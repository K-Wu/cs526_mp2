; ModuleID = '<stdin>'
source_filename = "<stdin>"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown"

@src64 = common global [4 x i64] zeroinitializer, align 32
@dst64 = common global [4 x i64] zeroinitializer, align 32
@src32 = common global [8 x i32] zeroinitializer, align 32
@dst32 = common global [8 x i32] zeroinitializer, align 32
@src16 = common global [16 x i16] zeroinitializer, align 32
@dst16 = common global [16 x i16] zeroinitializer, align 32

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #0

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #0

; Function Attrs: nounwind
define void @bswap_2i64() #1 {
  %ld0 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @src64, i32 0, i64 0), align 8
  %ld1 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @src64, i32 0, i64 1), align 8
  %bswap0 = call i64 @llvm.bswap.i64(i64 %ld0)
  %bswap1 = call i64 @llvm.bswap.i64(i64 %ld1)
  store i64 %bswap0, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @dst64, i32 0, i64 0), align 8
  store i64 %bswap1, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @dst64, i32 0, i64 1), align 8
  ret void
}

; Function Attrs: nounwind
define void @bswap_4i64() #1 {
  %ld0 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @src64, i64 0, i64 0), align 4
  %ld1 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @src64, i64 0, i64 1), align 4
  %ld2 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @src64, i64 0, i64 2), align 4
  %ld3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @src64, i64 0, i64 3), align 4
  %bswap0 = call i64 @llvm.bswap.i64(i64 %ld0)
  %bswap1 = call i64 @llvm.bswap.i64(i64 %ld1)
  %bswap2 = call i64 @llvm.bswap.i64(i64 %ld2)
  %bswap3 = call i64 @llvm.bswap.i64(i64 %ld3)
  store i64 %bswap0, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @dst64, i64 0, i64 0), align 4
  store i64 %bswap1, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @dst64, i64 0, i64 1), align 4
  store i64 %bswap2, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @dst64, i64 0, i64 2), align 4
  store i64 %bswap3, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @dst64, i64 0, i64 3), align 4
  ret void
}

; Function Attrs: nounwind
define void @bswap_4i32() #1 {
  %1 = load <4 x i32>, <4 x i32>* bitcast ([8 x i32]* @src32 to <4 x i32>*), align 4
  %2 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %1)
  store <4 x i32> %2, <4 x i32>* bitcast ([8 x i32]* @dst32 to <4 x i32>*), align 4
  ret void
}

; Function Attrs: nounwind
define void @bswap_8i32() #1 {
  %1 = load <4 x i32>, <4 x i32>* bitcast ([8 x i32]* @src32 to <4 x i32>*), align 2
  %2 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @src32, i32 0, i64 4) to <4 x i32>*), align 2
  %3 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %1)
  %4 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %2)
  store <4 x i32> %3, <4 x i32>* bitcast ([8 x i32]* @dst32 to <4 x i32>*), align 2
  store <4 x i32> %4, <4 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @dst32, i32 0, i64 4) to <4 x i32>*), align 2
  ret void
}

; Function Attrs: nounwind
define void @bswap_8i16() #1 {
  %1 = load <8 x i16>, <8 x i16>* bitcast ([16 x i16]* @src16 to <8 x i16>*), align 2
  %2 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %1)
  store <8 x i16> %2, <8 x i16>* bitcast ([16 x i16]* @dst16 to <8 x i16>*), align 2
  ret void
}

; Function Attrs: nounwind
define void @bswap_16i16() #1 {
  %1 = load <8 x i16>, <8 x i16>* bitcast ([16 x i16]* @src16 to <8 x i16>*), align 2
  %2 = load <8 x i16>, <8 x i16>* bitcast (i16* getelementptr inbounds ([16 x i16], [16 x i16]* @src16, i16 0, i64 8) to <8 x i16>*), align 2
  %3 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %1)
  %4 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %2)
  store <8 x i16> %3, <8 x i16>* bitcast ([16 x i16]* @dst16 to <8 x i16>*), align 2
  store <8 x i16> %4, <8 x i16>* bitcast (i16* getelementptr inbounds ([16 x i16], [16 x i16]* @dst16, i16 0, i64 8) to <8 x i16>*), align 2
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <4 x i32> @llvm.bswap.v4i32(<4 x i32>) #0

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.bswap.v8i16(<8 x i16>) #0

attributes #0 = { nounwind readnone speculatable }
attributes #1 = { nounwind }
