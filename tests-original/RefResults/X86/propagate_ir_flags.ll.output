; ModuleID = '<stdin>'
source_filename = "<stdin>"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-unknown"

define void @exact(i32* %x) {
  %idx1 = getelementptr inbounds i32, i32* %x, i64 0
  %idx2 = getelementptr inbounds i32, i32* %x, i64 1
  %idx3 = getelementptr inbounds i32, i32* %x, i64 2
  %idx4 = getelementptr inbounds i32, i32* %x, i64 3
  %1 = bitcast i32* %idx1 to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 4
  %3 = lshr exact <4 x i32> %2, <i32 1, i32 1, i32 1, i32 1>
  %4 = bitcast i32* %idx1 to <4 x i32>*
  store <4 x i32> %3, <4 x i32>* %4, align 4
  ret void
}

define void @not_exact(i32* %x) {
  %idx1 = getelementptr inbounds i32, i32* %x, i64 0
  %idx2 = getelementptr inbounds i32, i32* %x, i64 1
  %idx3 = getelementptr inbounds i32, i32* %x, i64 2
  %idx4 = getelementptr inbounds i32, i32* %x, i64 3
  %1 = bitcast i32* %idx1 to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 4
  %3 = lshr <4 x i32> %2, <i32 1, i32 1, i32 1, i32 1>
  %4 = bitcast i32* %idx1 to <4 x i32>*
  store <4 x i32> %3, <4 x i32>* %4, align 4
  ret void
}

define void @nsw(i32* %x) {
  %idx1 = getelementptr inbounds i32, i32* %x, i64 0
  %idx2 = getelementptr inbounds i32, i32* %x, i64 1
  %idx3 = getelementptr inbounds i32, i32* %x, i64 2
  %idx4 = getelementptr inbounds i32, i32* %x, i64 3
  %1 = bitcast i32* %idx1 to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 4
  %3 = add nsw <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %2
  %4 = bitcast i32* %idx1 to <4 x i32>*
  store <4 x i32> %3, <4 x i32>* %4, align 4
  ret void
}

define void @not_nsw(i32* %x) {
  %idx1 = getelementptr inbounds i32, i32* %x, i64 0
  %idx2 = getelementptr inbounds i32, i32* %x, i64 1
  %idx3 = getelementptr inbounds i32, i32* %x, i64 2
  %idx4 = getelementptr inbounds i32, i32* %x, i64 3
  %1 = bitcast i32* %idx1 to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 4
  %3 = add <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %2
  %4 = bitcast i32* %idx1 to <4 x i32>*
  store <4 x i32> %3, <4 x i32>* %4, align 4
  ret void
}

define void @nuw(i32* %x) {
  %idx1 = getelementptr inbounds i32, i32* %x, i64 0
  %idx2 = getelementptr inbounds i32, i32* %x, i64 1
  %idx3 = getelementptr inbounds i32, i32* %x, i64 2
  %idx4 = getelementptr inbounds i32, i32* %x, i64 3
  %1 = bitcast i32* %idx1 to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 4
  %3 = add nuw <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %2
  %4 = bitcast i32* %idx1 to <4 x i32>*
  store <4 x i32> %3, <4 x i32>* %4, align 4
  ret void
}

define void @not_nuw(i32* %x) {
  %idx1 = getelementptr inbounds i32, i32* %x, i64 0
  %idx2 = getelementptr inbounds i32, i32* %x, i64 1
  %idx3 = getelementptr inbounds i32, i32* %x, i64 2
  %idx4 = getelementptr inbounds i32, i32* %x, i64 3
  %1 = bitcast i32* %idx1 to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 4
  %3 = add <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %2
  %4 = bitcast i32* %idx1 to <4 x i32>*
  store <4 x i32> %3, <4 x i32>* %4, align 4
  ret void
}

define void @not_nsw_but_nuw(i32* %x) {
  %idx1 = getelementptr inbounds i32, i32* %x, i64 0
  %idx2 = getelementptr inbounds i32, i32* %x, i64 1
  %idx3 = getelementptr inbounds i32, i32* %x, i64 2
  %idx4 = getelementptr inbounds i32, i32* %x, i64 3
  %1 = bitcast i32* %idx1 to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 4
  %3 = add nuw <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %2
  %4 = bitcast i32* %idx1 to <4 x i32>*
  store <4 x i32> %3, <4 x i32>* %4, align 4
  ret void
}

define void @nnan(float* %x) {
  %idx1 = getelementptr inbounds float, float* %x, i64 0
  %idx2 = getelementptr inbounds float, float* %x, i64 1
  %idx3 = getelementptr inbounds float, float* %x, i64 2
  %idx4 = getelementptr inbounds float, float* %x, i64 3
  %1 = bitcast float* %idx1 to <4 x float>*
  %2 = load <4 x float>, <4 x float>* %1, align 4
  %3 = fadd nnan <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2
  %4 = bitcast float* %idx1 to <4 x float>*
  store <4 x float> %3, <4 x float>* %4, align 4
  ret void
}

define void @not_nnan(float* %x) {
  %idx1 = getelementptr inbounds float, float* %x, i64 0
  %idx2 = getelementptr inbounds float, float* %x, i64 1
  %idx3 = getelementptr inbounds float, float* %x, i64 2
  %idx4 = getelementptr inbounds float, float* %x, i64 3
  %1 = bitcast float* %idx1 to <4 x float>*
  %2 = load <4 x float>, <4 x float>* %1, align 4
  %3 = fadd <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2
  %4 = bitcast float* %idx1 to <4 x float>*
  store <4 x float> %3, <4 x float>* %4, align 4
  ret void
}

define void @only_fast(float* %x) {
  %idx1 = getelementptr inbounds float, float* %x, i64 0
  %idx2 = getelementptr inbounds float, float* %x, i64 1
  %idx3 = getelementptr inbounds float, float* %x, i64 2
  %idx4 = getelementptr inbounds float, float* %x, i64 3
  %1 = bitcast float* %idx1 to <4 x float>*
  %2 = load <4 x float>, <4 x float>* %1, align 4
  %3 = fadd fast <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2
  %4 = bitcast float* %idx1 to <4 x float>*
  store <4 x float> %3, <4 x float>* %4, align 4
  ret void
}

define void @only_arcp(float* %x) {
  %idx1 = getelementptr inbounds float, float* %x, i64 0
  %idx2 = getelementptr inbounds float, float* %x, i64 1
  %idx3 = getelementptr inbounds float, float* %x, i64 2
  %idx4 = getelementptr inbounds float, float* %x, i64 3
  %1 = bitcast float* %idx1 to <4 x float>*
  %2 = load <4 x float>, <4 x float>* %1, align 4
  %3 = fadd arcp <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2
  %4 = bitcast float* %idx1 to <4 x float>*
  store <4 x float> %3, <4 x float>* %4, align 4
  ret void
}

define void @addsub_all_nsw(i32* %x) {
  %idx1 = getelementptr inbounds i32, i32* %x, i64 0
  %idx2 = getelementptr inbounds i32, i32* %x, i64 1
  %idx3 = getelementptr inbounds i32, i32* %x, i64 2
  %idx4 = getelementptr inbounds i32, i32* %x, i64 3
  %1 = bitcast i32* %idx1 to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 4
  %3 = add nsw <4 x i32> %2, <i32 1, i32 1, i32 1, i32 1>
  %4 = sub nsw <4 x i32> %2, <i32 1, i32 1, i32 1, i32 1>
  %5 = shufflevector <4 x i32> %3, <4 x i32> %4, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %6 = bitcast i32* %idx1 to <4 x i32>*
  store <4 x i32> %5, <4 x i32>* %6, align 4
  ret void
}

define void @addsub_some_nsw(i32* %x) {
  %idx1 = getelementptr inbounds i32, i32* %x, i64 0
  %idx2 = getelementptr inbounds i32, i32* %x, i64 1
  %idx3 = getelementptr inbounds i32, i32* %x, i64 2
  %idx4 = getelementptr inbounds i32, i32* %x, i64 3
  %1 = bitcast i32* %idx1 to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 4
  %3 = add nsw <4 x i32> %2, <i32 1, i32 1, i32 1, i32 1>
  %4 = sub <4 x i32> %2, <i32 1, i32 1, i32 1, i32 1>
  %5 = shufflevector <4 x i32> %3, <4 x i32> %4, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %6 = bitcast i32* %idx1 to <4 x i32>*
  store <4 x i32> %5, <4 x i32>* %6, align 4
  ret void
}

define void @addsub_no_nsw(i32* %x) {
  %idx1 = getelementptr inbounds i32, i32* %x, i64 0
  %idx2 = getelementptr inbounds i32, i32* %x, i64 1
  %idx3 = getelementptr inbounds i32, i32* %x, i64 2
  %idx4 = getelementptr inbounds i32, i32* %x, i64 3
  %1 = bitcast i32* %idx1 to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 4
  %3 = add <4 x i32> %2, <i32 1, i32 1, i32 1, i32 1>
  %4 = sub <4 x i32> %2, <i32 1, i32 1, i32 1, i32 1>
  %5 = shufflevector <4 x i32> %3, <4 x i32> %4, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %6 = bitcast i32* %idx1 to <4 x i32>*
  store <4 x i32> %5, <4 x i32>* %6, align 4
  ret void
}

define void @fcmp_fast(double* %x) #0 {
  %idx1 = getelementptr inbounds double, double* %x, i64 0
  %idx2 = getelementptr inbounds double, double* %x, i64 1
  %1 = bitcast double* %idx1 to <2 x double>*
  %2 = load <2 x double>, <2 x double>* %1, align 8
  %3 = fcmp fast oge <2 x double> %2, zeroinitializer
  %4 = fsub fast <2 x double> <double -0.000000e+00, double -0.000000e+00>, %2
  %5 = select <2 x i1> %3, <2 x double> %2, <2 x double> %4
  %6 = bitcast double* %idx1 to <2 x double>*
  store <2 x double> %5, <2 x double>* %6, align 8
  ret void
}

define void @fcmp_fast_unary_fneg(double* %x) #0 {
  %idx1 = getelementptr inbounds double, double* %x, i64 0
  %idx2 = getelementptr inbounds double, double* %x, i64 1
  %1 = bitcast double* %idx1 to <2 x double>*
  %2 = load <2 x double>, <2 x double>* %1, align 8
  %3 = fcmp fast oge <2 x double> %2, zeroinitializer
  %4 = extractelement <2 x double> %2, i32 0
  %sub1 = fneg fast double %4
  %5 = extractelement <2 x double> %2, i32 1
  %sub2 = fneg fast double %5
  %6 = insertelement <2 x double> undef, double %sub1, i32 0
  %7 = insertelement <2 x double> %6, double %sub2, i32 1
  %8 = select <2 x i1> %3, <2 x double> %2, <2 x double> %7
  %9 = bitcast double* %idx1 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 8
  ret void
}

define void @fcmp_no_fast(double* %x) #0 {
  %idx1 = getelementptr inbounds double, double* %x, i64 0
  %idx2 = getelementptr inbounds double, double* %x, i64 1
  %1 = bitcast double* %idx1 to <2 x double>*
  %2 = load <2 x double>, <2 x double>* %1, align 8
  %3 = fcmp oge <2 x double> %2, zeroinitializer
  %4 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %2
  %5 = select <2 x i1> %3, <2 x double> %2, <2 x double> %4
  %6 = bitcast double* %idx1 to <2 x double>*
  store <2 x double> %5, <2 x double>* %6, align 8
  ret void
}

define void @fcmp_no_fast_unary_fneg(double* %x) #0 {
  %idx1 = getelementptr inbounds double, double* %x, i64 0
  %idx2 = getelementptr inbounds double, double* %x, i64 1
  %1 = bitcast double* %idx1 to <2 x double>*
  %2 = load <2 x double>, <2 x double>* %1, align 8
  %3 = fcmp oge <2 x double> %2, zeroinitializer
  %4 = extractelement <2 x double> %2, i32 0
  %sub1 = fneg double %4
  %5 = extractelement <2 x double> %2, i32 1
  %sub2 = fneg double %5
  %6 = insertelement <2 x double> undef, double %sub1, i32 0
  %7 = insertelement <2 x double> %6, double %sub2, i32 1
  %8 = select <2 x i1> %3, <2 x double> %2, <2 x double> %7
  %9 = bitcast double* %idx1 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #1

define void @call_fast(double* %x) {
  %idx1 = getelementptr inbounds double, double* %x, i64 0
  %idx2 = getelementptr inbounds double, double* %x, i64 1
  %1 = bitcast double* %idx1 to <2 x double>*
  %2 = load <2 x double>, <2 x double>* %1, align 8
  %3 = call fast <2 x double> @llvm.fabs.v2f64(<2 x double> %2)
  %4 = bitcast double* %idx1 to <2 x double>*
  store <2 x double> %3, <2 x double>* %4, align 8
  ret void
}

define void @call_no_fast(double* %x) {
  %idx1 = getelementptr inbounds double, double* %x, i64 0
  %idx2 = getelementptr inbounds double, double* %x, i64 1
  %1 = bitcast double* %idx1 to <2 x double>*
  %2 = load <2 x double>, <2 x double>* %1, align 8
  %3 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %2)
  %4 = bitcast double* %idx1 to <2 x double>*
  store <2 x double> %3, <2 x double>* %4, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #1

attributes #0 = { "target-features"="+avx" }
attributes #1 = { nounwind readnone speculatable }
