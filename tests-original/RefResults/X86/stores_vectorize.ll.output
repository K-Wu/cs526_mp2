; ModuleID = '<stdin>'
source_filename = "<stdin>"
target triple = "x86_64-apple-macosx"

define void @_Z8DistanceIlLi5EEvPfiPmS0_(float* %p1, i32 %p2, i64* %p3, float* %p4) #0 {
entry:
  store i64 5, i64* %p3, align 8
  %idx.ext = sext i32 %p2 to i64
  %add.ptr = getelementptr inbounds float, float* %p1, i64 %idx.ext
  %arrayidx1 = getelementptr inbounds float, float* %add.ptr, i64 5
  %0 = load float, float* %arrayidx1, align 4
  %arrayidx2 = getelementptr inbounds float, float* %p4, i64 3
  %1 = load float, float* %arrayidx2, align 4
  %add = fadd float %0, %1
  store float %add, float* %arrayidx2, align 4
  %arrayidx4 = getelementptr inbounds i64, i64* %p3, i64 1
  %arrayidx6 = getelementptr inbounds i64, i64* %p3, i64 2
  %arrayidx8 = getelementptr inbounds i64, i64* %p3, i64 3
  %2 = bitcast i64* %p3 to <4 x i64>*
  %3 = load <4 x i64>, <4 x i64>* %2, align 8
  %4 = lshr <4 x i64> %3, <i64 5, i64 5, i64 5, i64 5>
  %5 = bitcast i64* %p3 to <4 x i64>*
  store <4 x i64> %4, <4 x i64>* %5, align 8
  %add.ptr11 = getelementptr inbounds float, float* %add.ptr, i64 %idx.ext
  %6 = extractelement <4 x i64> %4, i32 0
  %and = and i64 %6, 5
  %arrayidx13 = getelementptr inbounds float, float* %add.ptr11, i64 %and
  %7 = load float, float* %arrayidx13, align 4
  %8 = load float, float* %p4, align 4
  %add15 = fadd float %7, %8
  store float %add15, float* %p4, align 4
  ret void
}

define void @store_reverse(i64* %p3) #0 {
entry:
  %arrayidx1 = getelementptr inbounds i64, i64* %p3, i64 8
  %arrayidx2 = getelementptr inbounds i64, i64* %p3, i64 7
  %arrayidx3 = getelementptr inbounds i64, i64* %p3, i64 1
  %arrayidx4 = getelementptr inbounds i64, i64* %p3, i64 9
  %arrayidx6 = getelementptr inbounds i64, i64* %p3, i64 6
  %arrayidx7 = getelementptr inbounds i64, i64* %p3, i64 2
  %arrayidx8 = getelementptr inbounds i64, i64* %p3, i64 10
  %arrayidx10 = getelementptr inbounds i64, i64* %p3, i64 5
  %arrayidx11 = getelementptr inbounds i64, i64* %p3, i64 3
  %0 = bitcast i64* %p3 to <4 x i64>*
  %1 = load <4 x i64>, <4 x i64>* %0, align 8
  %reorder_shuffle = shufflevector <4 x i64> %1, <4 x i64> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %arrayidx12 = getelementptr inbounds i64, i64* %p3, i64 11
  %2 = bitcast i64* %arrayidx1 to <4 x i64>*
  %3 = load <4 x i64>, <4 x i64>* %2, align 8
  %reorder_shuffle1 = shufflevector <4 x i64> %3, <4 x i64> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %4 = shl <4 x i64> %reorder_shuffle, %reorder_shuffle1
  %arrayidx14 = getelementptr inbounds i64, i64* %p3, i64 4
  %5 = bitcast i64* %arrayidx14 to <4 x i64>*
  store <4 x i64> %4, <4 x i64>* %5, align 8
  ret void
}

define void @store15(float* %p1, i32 %p2, i64* %p3, float* %p4) #0 {
entry:
  store i64 5, i64* %p3, align 8
  %idx.ext = sext i32 %p2 to i64
  %add.ptr = getelementptr inbounds float, float* %p1, i64 %idx.ext
  %arrayidx1 = getelementptr inbounds float, float* %add.ptr, i64 5
  %0 = load float, float* %arrayidx1, align 4
  %arrayidx2 = getelementptr inbounds float, float* %p4, i64 3
  %1 = load float, float* %arrayidx2, align 4
  %add = fadd float %0, %1
  store float %add, float* %arrayidx2, align 4
  %arrayidx4 = getelementptr inbounds i64, i64* %p3, i64 1
  %2 = bitcast i64* %p3 to <2 x i64>*
  %3 = load <2 x i64>, <2 x i64>* %2, align 8
  %4 = lshr <2 x i64> %3, <i64 5, i64 5>
  %5 = bitcast i64* %p3 to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %5, align 8
  %arrayidx6 = getelementptr inbounds i64, i64* %p3, i64 2
  %6 = load i64, i64* %arrayidx6, align 8
  %shr7 = lshr i64 %6, 5
  store i64 %shr7, i64* %arrayidx6, align 8
  %arrayidx8 = getelementptr inbounds i64, i64* %p3, i64 3
  %7 = load i64, i64* %arrayidx8, align 8
  %shr9 = lshr i64 %7, 5
  %arrayidx9 = getelementptr inbounds i64, i64* %p3, i64 5
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 %shr9, i64* %arrayidx8, align 8
  ret void
}

define void @store16(float* %p1, i32 %p2, i64* %p3, float* %p4) #0 {
entry:
  store i64 5, i64* %p3, align 8
  %idx.ext = sext i32 %p2 to i64
  %add.ptr = getelementptr inbounds float, float* %p1, i64 %idx.ext
  %arrayidx1 = getelementptr inbounds float, float* %add.ptr, i64 5
  %0 = load float, float* %arrayidx1, align 4
  %arrayidx2 = getelementptr inbounds float, float* %p4, i64 3
  %1 = load float, float* %arrayidx2, align 4
  %add = fadd float %0, %1
  store float %add, float* %arrayidx2, align 4
  %arrayidx4 = getelementptr inbounds i64, i64* %p3, i64 1
  %2 = bitcast i64* %p3 to <2 x i64>*
  %3 = load <2 x i64>, <2 x i64>* %2, align 8
  %4 = lshr <2 x i64> %3, <i64 5, i64 5>
  %5 = bitcast i64* %p3 to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %5, align 8
  %arrayidx6 = getelementptr inbounds i64, i64* %p3, i64 2
  %6 = load i64, i64* %arrayidx6, align 8
  %shr7 = lshr i64 %6, 5
  store i64 %shr7, i64* %arrayidx6, align 8
  %arrayidx8 = getelementptr inbounds i64, i64* %p3, i64 3
  %7 = load i64, i64* %arrayidx8, align 8
  %shr9 = lshr i64 %7, 5
  %arrayidx9 = getelementptr inbounds i64, i64* %p3, i64 5
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 5, i64* %arrayidx9, align 8
  store i64 %shr9, i64* %arrayidx8, align 8
  ret void
}

attributes #0 = { "target-cpu"="corei7-avx" "target-features"="+avx2" }
