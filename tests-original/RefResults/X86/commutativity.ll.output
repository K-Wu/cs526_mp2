; ModuleID = '<stdin>'
source_filename = "<stdin>"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.11.0"

@cle = external unnamed_addr global [32 x i8], align 16
@cle32 = external unnamed_addr global [32 x i32], align 16

define void @splat(i8 %a, i8 %b, i8 %c) {
  %1 = insertelement <16 x i8> undef, i8 %c, i32 0
  %2 = insertelement <16 x i8> %1, i8 %c, i32 1
  %3 = insertelement <16 x i8> %2, i8 %c, i32 2
  %4 = insertelement <16 x i8> %3, i8 %c, i32 3
  %5 = insertelement <16 x i8> %4, i8 %c, i32 4
  %6 = insertelement <16 x i8> %5, i8 %c, i32 5
  %7 = insertelement <16 x i8> %6, i8 %c, i32 6
  %8 = insertelement <16 x i8> %7, i8 %c, i32 7
  %9 = insertelement <16 x i8> %8, i8 %c, i32 8
  %10 = insertelement <16 x i8> %9, i8 %c, i32 9
  %11 = insertelement <16 x i8> %10, i8 %c, i32 10
  %12 = insertelement <16 x i8> %11, i8 %c, i32 11
  %13 = insertelement <16 x i8> %12, i8 %c, i32 12
  %14 = insertelement <16 x i8> %13, i8 %c, i32 13
  %15 = insertelement <16 x i8> %14, i8 %c, i32 14
  %16 = insertelement <16 x i8> %15, i8 %c, i32 15
  %17 = insertelement <2 x i8> undef, i8 %a, i32 0
  %18 = insertelement <2 x i8> %17, i8 %b, i32 1
  %shuffle = shufflevector <2 x i8> %18, <2 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %19 = xor <16 x i8> %16, %shuffle
  store <16 x i8> %19, <16 x i8>* bitcast ([32 x i8]* @cle to <16 x i8>*), align 16
  ret void
}

define void @same_opcode_on_one_side(i32 %a, i32 %b, i32 %c) {
  %1 = insertelement <4 x i32> undef, i32 %c, i32 0
  %2 = insertelement <4 x i32> %1, i32 %c, i32 1
  %3 = insertelement <4 x i32> %2, i32 %c, i32 2
  %4 = insertelement <4 x i32> %3, i32 %c, i32 3
  %5 = insertelement <4 x i32> undef, i32 %a, i32 0
  %6 = insertelement <4 x i32> %5, i32 %a, i32 1
  %7 = insertelement <4 x i32> %6, i32 %a, i32 2
  %8 = insertelement <4 x i32> %7, i32 %a, i32 3
  %9 = add <4 x i32> %4, %8
  %10 = insertelement <4 x i32> %5, i32 %b, i32 1
  %11 = insertelement <4 x i32> %10, i32 %c, i32 2
  %12 = insertelement <4 x i32> %11, i32 %a, i32 3
  %13 = xor <4 x i32> %12, %9
  store <4 x i32> %13, <4 x i32>* bitcast ([32 x i32]* @cle32 to <4 x i32>*), align 16
  ret void
}
