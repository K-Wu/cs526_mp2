; ModuleID = '<stdin>'
source_filename = "<stdin>"
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.8.0"

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #0

define void @vec_fabs_f64(double* %a, double* %b, double* %c) #1 {
entry:
  %0 = bitcast double* %a to <2 x double>*
  %1 = load <2 x double>, <2 x double>* %0, align 8
  %2 = bitcast double* %b to <2 x double>*
  %3 = load <2 x double>, <2 x double>* %2, align 8
  %4 = fmul <2 x double> %1, %3
  %5 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %4)
  %6 = bitcast double* %c to <2 x double>*
  store <2 x double> %5, <2 x double>* %6, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.copysign.f32(float, float) #0

define void @vec_copysign_f32(float* %a, float* %b, float* noalias %c) #1 {
entry:
  %0 = bitcast float* %a to <4 x float>*
  %1 = load <4 x float>, <4 x float>* %0, align 4
  %2 = bitcast float* %b to <4 x float>*
  %3 = load <4 x float>, <4 x float>* %2, align 4
  %4 = call <4 x float> @llvm.copysign.v4f32(<4 x float> %1, <4 x float> %3)
  %5 = bitcast float* %c to <4 x float>*
  store <4 x float> %4, <4 x float>* %5, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #0

define void @vec_bswap_i32(i32* %a, i32* %b, i32* %c) #1 {
entry:
  %0 = bitcast i32* %a to <4 x i32>*
  %1 = load <4 x i32>, <4 x i32>* %0, align 4
  %2 = bitcast i32* %b to <4 x i32>*
  %3 = load <4 x i32>, <4 x i32>* %2, align 4
  %4 = add <4 x i32> %1, %3
  %5 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %4)
  %6 = bitcast i32* %c to <4 x i32>*
  store <4 x i32> %5, <4 x i32>* %6, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1) #0

define void @vec_ctlz_i32(i32* %a, i32* %b, i32* %c, i1) #1 {
entry:
  %1 = bitcast i32* %a to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 4
  %3 = bitcast i32* %b to <4 x i32>*
  %4 = load <4 x i32>, <4 x i32>* %3, align 4
  %5 = add <4 x i32> %2, %4
  %6 = call <4 x i32> @llvm.ctlz.v4i32(<4 x i32> %5, i1 true)
  %7 = bitcast i32* %c to <4 x i32>*
  store <4 x i32> %6, <4 x i32>* %7, align 4
  ret void
}

define void @vec_ctlz_i32_neg(i32* %a, i32* %b, i32* %c, i1) #1 {
entry:
  %i0 = load i32, i32* %a, align 4
  %i1 = load i32, i32* %b, align 4
  %add1 = add i32 %i0, %i1
  %call1 = tail call i32 @llvm.ctlz.i32(i32 %add1, i1 true) #3
  %arrayidx2 = getelementptr inbounds i32, i32* %a, i32 1
  %i2 = load i32, i32* %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %b, i32 1
  %i3 = load i32, i32* %arrayidx3, align 4
  %add2 = add i32 %i2, %i3
  %call2 = tail call i32 @llvm.ctlz.i32(i32 %add2, i1 false) #3
  %arrayidx4 = getelementptr inbounds i32, i32* %a, i32 2
  %i4 = load i32, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %b, i32 2
  %i5 = load i32, i32* %arrayidx5, align 4
  %add3 = add i32 %i4, %i5
  %call3 = tail call i32 @llvm.ctlz.i32(i32 %add3, i1 true) #3
  %arrayidx6 = getelementptr inbounds i32, i32* %a, i32 3
  %i6 = load i32, i32* %arrayidx6, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %b, i32 3
  %i7 = load i32, i32* %arrayidx7, align 4
  %add4 = add i32 %i6, %i7
  %call4 = tail call i32 @llvm.ctlz.i32(i32 %add4, i1 false) #3
  store i32 %call1, i32* %c, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %c, i32 1
  store i32 %call2, i32* %arrayidx8, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %c, i32 2
  store i32 %call3, i32* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %c, i32 3
  store i32 %call4, i32* %arrayidx10, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1) #0

define void @vec_cttz_i32(i32* %a, i32* %b, i32* %c, i1) #1 {
entry:
  %1 = bitcast i32* %a to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 4
  %3 = bitcast i32* %b to <4 x i32>*
  %4 = load <4 x i32>, <4 x i32>* %3, align 4
  %5 = add <4 x i32> %2, %4
  %6 = call <4 x i32> @llvm.cttz.v4i32(<4 x i32> %5, i1 true)
  %7 = bitcast i32* %c to <4 x i32>*
  store <4 x i32> %6, <4 x i32>* %7, align 4
  ret void
}

define void @vec_cttz_i32_neg(i32* %a, i32* %b, i32* %c, i1) #1 {
entry:
  %i0 = load i32, i32* %a, align 4
  %i1 = load i32, i32* %b, align 4
  %add1 = add i32 %i0, %i1
  %call1 = tail call i32 @llvm.cttz.i32(i32 %add1, i1 true) #3
  %arrayidx2 = getelementptr inbounds i32, i32* %a, i32 1
  %i2 = load i32, i32* %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %b, i32 1
  %i3 = load i32, i32* %arrayidx3, align 4
  %add2 = add i32 %i2, %i3
  %call2 = tail call i32 @llvm.cttz.i32(i32 %add2, i1 false) #3
  %arrayidx4 = getelementptr inbounds i32, i32* %a, i32 2
  %i4 = load i32, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %b, i32 2
  %i5 = load i32, i32* %arrayidx5, align 4
  %add3 = add i32 %i4, %i5
  %call3 = tail call i32 @llvm.cttz.i32(i32 %add3, i1 true) #3
  %arrayidx6 = getelementptr inbounds i32, i32* %a, i32 3
  %i6 = load i32, i32* %arrayidx6, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %b, i32 3
  %i7 = load i32, i32* %arrayidx7, align 4
  %add4 = add i32 %i6, %i7
  %call4 = tail call i32 @llvm.cttz.i32(i32 %add4, i1 false) #3
  store i32 %call1, i32* %c, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %c, i32 1
  store i32 %call2, i32* %arrayidx8, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %c, i32 2
  store i32 %call3, i32* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %c, i32 3
  store i32 %call4, i32* %arrayidx10, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.powi.f32(float, i32) #0

define void @vec_powi_f32(float* %a, float* %b, float* %c, i32 %P) #1 {
entry:
  %0 = bitcast float* %a to <4 x float>*
  %1 = load <4 x float>, <4 x float>* %0, align 4
  %2 = bitcast float* %b to <4 x float>*
  %3 = load <4 x float>, <4 x float>* %2, align 4
  %4 = fadd <4 x float> %1, %3
  %5 = call <4 x float> @llvm.powi.v4f32(<4 x float> %4, i32 %P)
  %6 = bitcast float* %c to <4 x float>*
  store <4 x float> %5, <4 x float>* %6, align 4
  ret void
}

define void @vec_powi_f32_neg(float* %a, float* %b, float* %c, i32 %P, i32 %Q) #1 {
entry:
  %i0 = load float, float* %a, align 4
  %i1 = load float, float* %b, align 4
  %add1 = fadd float %i0, %i1
  %call1 = tail call float @llvm.powi.f32(float %add1, i32 %P) #3
  %arrayidx2 = getelementptr inbounds float, float* %a, i32 1
  %i2 = load float, float* %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds float, float* %b, i32 1
  %i3 = load float, float* %arrayidx3, align 4
  %add2 = fadd float %i2, %i3
  %call2 = tail call float @llvm.powi.f32(float %add2, i32 %Q) #3
  %arrayidx4 = getelementptr inbounds float, float* %a, i32 2
  %i4 = load float, float* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds float, float* %b, i32 2
  %i5 = load float, float* %arrayidx5, align 4
  %add3 = fadd float %i4, %i5
  %call3 = tail call float @llvm.powi.f32(float %add3, i32 %P) #3
  %arrayidx6 = getelementptr inbounds float, float* %a, i32 3
  %i6 = load float, float* %arrayidx6, align 4
  %arrayidx7 = getelementptr inbounds float, float* %b, i32 3
  %i7 = load float, float* %arrayidx7, align 4
  %add4 = fadd float %i6, %i7
  %call4 = tail call float @llvm.powi.f32(float %add4, i32 %Q) #3
  store float %call1, float* %c, align 4
  %arrayidx8 = getelementptr inbounds float, float* %c, i32 1
  store float %call2, float* %arrayidx8, align 4
  %arrayidx9 = getelementptr inbounds float, float* %c, i32 2
  store float %call3, float* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds float, float* %c, i32 3
  store float %call4, float* %arrayidx10, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #2

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.copysign.v4f32(<4 x float>, <4 x float>) #2

; Function Attrs: nounwind readnone speculatable
declare <4 x i32> @llvm.bswap.v4i32(<4 x i32>) #2

; Function Attrs: nounwind readnone speculatable
declare <4 x i32> @llvm.ctlz.v4i32(<4 x i32>, i1) #2

; Function Attrs: nounwind readnone speculatable
declare <4 x i32> @llvm.cttz.v4i32(<4 x i32>, i1) #2

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.powi.v4f32(<4 x float>, i32) #2

attributes #0 = { nounwind readnone speculatable "target-cpu"="corei7-avx" }
attributes #1 = { "target-cpu"="corei7-avx" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind readnone }
