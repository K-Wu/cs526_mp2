; ModuleID = '<stdin>'
source_filename = "<stdin>"
target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128-n8:16:32-S128"
target triple = "i386-apple-macosx10.8.0"

@a = common global [32000 x float] zeroinitializer, align 16

define void @shuffle_operands1(double* noalias %from, double* noalias %to, double %v1, double %v2) #0 {
  %1 = bitcast double* %from to <2 x double>*
  %2 = load <2 x double>, <2 x double>* %1, align 4
  %3 = insertelement <2 x double> undef, double %v1, i32 0
  %4 = insertelement <2 x double> %3, double %v2, i32 1
  %5 = fadd <2 x double> %4, %2
  %6 = bitcast double* %to to <2 x double>*
  store <2 x double> %5, <2 x double>* %6, align 4
  ret void
}

define void @vecload_vs_broadcast(double* noalias %from, double* noalias %to, double %v1, double %v2) #0 {
entry:
  br label %lp

lp:                                               ; preds = %lp, %entry
  %p = phi double [ 1.000000e+00, %lp ], [ 0.000000e+00, %entry ]
  %from_1 = getelementptr double, double* %from, i32 1
  %v0_1 = load double, double* %from, align 4
  %v0_2 = load double, double* %from_1, align 4
  %0 = insertelement <2 x double> undef, double %v0_1, i32 0
  %1 = shufflevector <2 x double> %0, <2 x double> undef, <2 x i32> zeroinitializer
  %2 = insertelement <2 x double> undef, double %p, i32 0
  %3 = insertelement <2 x double> %2, double %v0_2, i32 1
  %4 = fadd <2 x double> %1, %3
  %5 = bitcast double* %to to <2 x double>*
  store <2 x double> %4, <2 x double>* %5, align 4
  br i1 undef, label %lp, label %ext

ext:                                              ; preds = %lp
  ret void
}

define void @vecload_vs_broadcast2(double* noalias %from, double* noalias %to, double %v1, double %v2) #0 {
entry:
  br label %lp

lp:                                               ; preds = %lp, %entry
  %p = phi double [ 1.000000e+00, %lp ], [ 0.000000e+00, %entry ]
  %from_1 = getelementptr double, double* %from, i32 1
  %v0_1 = load double, double* %from, align 4
  %v0_2 = load double, double* %from_1, align 4
  %0 = insertelement <2 x double> undef, double %p, i32 0
  %1 = insertelement <2 x double> %0, double %v0_2, i32 1
  %2 = insertelement <2 x double> undef, double %v0_1, i32 0
  %3 = shufflevector <2 x double> %2, <2 x double> undef, <2 x i32> zeroinitializer
  %4 = fadd <2 x double> %1, %3
  %5 = bitcast double* %to to <2 x double>*
  store <2 x double> %4, <2 x double>* %5, align 4
  br i1 undef, label %lp, label %ext

ext:                                              ; preds = %lp
  ret void
}

define void @vecload_vs_broadcast3(double* noalias %from, double* noalias %to, double %v1, double %v2) #0 {
entry:
  br label %lp

lp:                                               ; preds = %lp, %entry
  %p = phi double [ 1.000000e+00, %lp ], [ 0.000000e+00, %entry ]
  %from_1 = getelementptr double, double* %from, i32 1
  %v0_1 = load double, double* %from, align 4
  %v0_2 = load double, double* %from_1, align 4
  %0 = insertelement <2 x double> undef, double %p, i32 0
  %1 = insertelement <2 x double> %0, double %v0_2, i32 1
  %2 = insertelement <2 x double> undef, double %v0_1, i32 0
  %3 = shufflevector <2 x double> %2, <2 x double> undef, <2 x i32> zeroinitializer
  %4 = fadd <2 x double> %1, %3
  %5 = bitcast double* %to to <2 x double>*
  store <2 x double> %4, <2 x double>* %5, align 4
  br i1 undef, label %lp, label %ext

ext:                                              ; preds = %lp
  ret void
}

define void @shuffle_preserve_broadcast4(double* noalias %from, double* noalias %to, double %v1, double %v2) #0 {
entry:
  br label %lp

lp:                                               ; preds = %lp, %entry
  %p = phi double [ 1.000000e+00, %lp ], [ 0.000000e+00, %entry ]
  %from_1 = getelementptr double, double* %from, i32 1
  %v0_1 = load double, double* %from, align 4
  %v0_2 = load double, double* %from_1, align 4
  %0 = insertelement <2 x double> undef, double %v0_2, i32 0
  %1 = insertelement <2 x double> %0, double %p, i32 1
  %2 = insertelement <2 x double> undef, double %v0_1, i32 0
  %3 = shufflevector <2 x double> %2, <2 x double> undef, <2 x i32> zeroinitializer
  %4 = fadd <2 x double> %1, %3
  %5 = bitcast double* %to to <2 x double>*
  store <2 x double> %4, <2 x double>* %5, align 4
  br i1 undef, label %lp, label %ext

ext:                                              ; preds = %lp
  ret void
}

define void @vecload_vs_broadcast5(double* noalias %from, double* noalias %to, double %v1, double %v2) #0 {
entry:
  br label %lp

lp:                                               ; preds = %lp, %entry
  %p = phi double [ 1.000000e+00, %lp ], [ 0.000000e+00, %entry ]
  %from_1 = getelementptr double, double* %from, i32 1
  %v0_1 = load double, double* %from, align 4
  %v0_2 = load double, double* %from_1, align 4
  %0 = insertelement <2 x double> undef, double %v0_1, i32 0
  %1 = shufflevector <2 x double> %0, <2 x double> undef, <2 x i32> zeroinitializer
  %2 = insertelement <2 x double> undef, double %v0_2, i32 0
  %3 = insertelement <2 x double> %2, double %p, i32 1
  %4 = fadd <2 x double> %1, %3
  %5 = bitcast double* %to to <2 x double>*
  store <2 x double> %4, <2 x double>* %5, align 4
  br i1 undef, label %lp, label %ext

ext:                                              ; preds = %lp
  ret void
}

define void @shuffle_preserve_broadcast6(double* noalias %from, double* noalias %to, double %v1, double %v2) #0 {
entry:
  br label %lp

lp:                                               ; preds = %lp, %entry
  %p = phi double [ 1.000000e+00, %lp ], [ 0.000000e+00, %entry ]
  %from_1 = getelementptr double, double* %from, i32 1
  %v0_1 = load double, double* %from, align 4
  %v0_2 = load double, double* %from_1, align 4
  %0 = insertelement <2 x double> undef, double %v0_1, i32 0
  %1 = shufflevector <2 x double> %0, <2 x double> undef, <2 x i32> zeroinitializer
  %2 = insertelement <2 x double> undef, double %v0_2, i32 0
  %3 = insertelement <2 x double> %2, double %p, i32 1
  %4 = fadd <2 x double> %1, %3
  %5 = bitcast double* %to to <2 x double>*
  store <2 x double> %4, <2 x double>* %5, align 4
  br i1 undef, label %lp, label %ext

ext:                                              ; preds = %lp
  ret void
}

define void @good_load_order() #0 {
entry:
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %entry
  %0 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i32 0, i32 0), align 16
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %1 = phi float [ %0, %for.cond1.preheader ], [ %14, %for.body3 ]
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.body3 ]
  %2 = trunc i64 %indvars.iv to i32
  %3 = add i32 %2, 1
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i32 0, i32 %3
  %4 = trunc i64 %indvars.iv to i32
  %arrayidx5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i32 0, i32 %4
  %5 = trunc i64 %indvars.iv to i32
  %6 = add i32 %5, 4
  %arrayidx31 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i32 0, i32 %6
  %7 = bitcast float* %arrayidx to <4 x float>*
  %8 = load <4 x float>, <4 x float>* %7, align 4
  %9 = insertelement <4 x float> undef, float %1, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> %8, <4 x i32> <i32 0, i32 4, i32 5, i32 6>
  %11 = fmul <4 x float> %8, %10
  %12 = bitcast float* %arrayidx5 to <4 x float>*
  store <4 x float> %11, <4 x float>* %12, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 5
  %13 = trunc i64 %indvars.iv.next to i32
  %arrayidx41 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i32 0, i32 %13
  %14 = load float, float* %arrayidx41, align 4
  %15 = extractelement <4 x float> %8, i32 3
  %mul45 = fmul float %14, %15
  store float %mul45, float* %arrayidx31, align 4
  %16 = trunc i64 %indvars.iv.next to i32
  %cmp2 = icmp slt i32 %16, 31995
  br i1 %cmp2, label %for.body3, label %for.end

for.end:                                          ; preds = %for.body3
  ret void
}

define void @load_reorder_double(double* nocapture %c, double* noalias nocapture readonly %a, double* noalias nocapture readonly %b) #0 {
  %1 = bitcast double* %b to <2 x double>*
  %2 = load <2 x double>, <2 x double>* %1, align 4
  %3 = bitcast double* %a to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 4
  %5 = fadd <2 x double> %4, %2
  %6 = bitcast double* %c to <2 x double>*
  store <2 x double> %5, <2 x double>* %6, align 4
  ret void
}

define void @load_reorder_float(float* nocapture %c, float* noalias nocapture readonly %a, float* noalias nocapture readonly %b) #0 {
  %1 = bitcast float* %a to <4 x float>*
  %2 = load <4 x float>, <4 x float>* %1, align 4
  %3 = bitcast float* %b to <4 x float>*
  %4 = load <4 x float>, <4 x float>* %3, align 4
  %5 = fadd <4 x float> %2, %4
  %6 = bitcast float* %c to <4 x float>*
  store <4 x float> %5, <4 x float>* %6, align 4
  ret void
}

define void @opcode_reorder(float* noalias nocapture %a, float* noalias nocapture readonly %b, float* noalias nocapture readonly %c, float* noalias nocapture readonly %d) #0 {
  %1 = bitcast float* %b to <4 x float>*
  %2 = load <4 x float>, <4 x float>* %1, align 4
  %3 = bitcast float* %c to <4 x float>*
  %4 = load <4 x float>, <4 x float>* %3, align 4
  %5 = fadd <4 x float> %2, %4
  %6 = bitcast float* %d to <4 x float>*
  %7 = load <4 x float>, <4 x float>* %6, align 4
  %8 = fadd <4 x float> %5, %7
  %9 = bitcast float* %a to <4 x float>*
  store <4 x float> %8, <4 x float>* %9, align 4
  ret void
}

attributes #0 = { "target-cpu"="corei7-avx" }
