; ModuleID = '<stdin>'
source_filename = "<stdin>"
target triple = "x86_64-unknown-linux-gnu"

@n = external local_unnamed_addr global i32, align 4
@arr = common local_unnamed_addr global [20 x float] zeroinitializer, align 16
@arr1 = common local_unnamed_addr global [20 x float] zeroinitializer, align 16
@res = external local_unnamed_addr global float, align 4

define float @baz() #0 {
entry:
  %0 = load i32, i32* @n, align 4
  %mul = mul nsw i32 %0, 3
  %conv = sitofp i32 %mul to float
  %1 = load <2 x float>, <2 x float>* bitcast ([20 x float]* @arr to <2 x float>*), align 16
  %2 = load <2 x float>, <2 x float>* bitcast ([20 x float]* @arr1 to <2 x float>*), align 16
  %3 = fmul fast <2 x float> %2, %1
  %4 = extractelement <2 x float> %3, i32 0
  %add = fadd fast float %4, %conv
  %5 = extractelement <2 x float> %3, i32 1
  %add.1 = fadd fast float %5, %add
  %6 = load <2 x float>, <2 x float>* bitcast (float* getelementptr inbounds ([20 x float], [20 x float]* @arr, i64 0, i64 2) to <2 x float>*), align 8
  %7 = load <2 x float>, <2 x float>* bitcast (float* getelementptr inbounds ([20 x float], [20 x float]* @arr1, i64 0, i64 2) to <2 x float>*), align 8
  %8 = fmul fast <2 x float> %7, %6
  %9 = extractelement <2 x float> %8, i32 0
  %add.2 = fadd fast float %9, %add.1
  %10 = extractelement <2 x float> %8, i32 1
  %add.3 = fadd fast float %10, %add.2
  %add7 = fadd fast float %add.3, %conv
  %add19 = fadd fast float %4, %add7
  %add19.1 = fadd fast float %5, %add19
  %add19.2 = fadd fast float %9, %add19.1
  %add19.3 = fadd fast float %10, %add19.2
  store float %add19.3, float* @res, align 4
  ret float %add19.3
}

define float @bazz() #0 {
entry:
  %0 = load i32, i32* @n, align 4
  %mul = mul nsw i32 %0, 3
  %conv = sitofp i32 %mul to float
  %1 = load <8 x float>, <8 x float>* bitcast ([20 x float]* @arr to <8 x float>*), align 16
  %2 = load <8 x float>, <8 x float>* bitcast ([20 x float]* @arr1 to <8 x float>*), align 16
  %3 = fmul fast <8 x float> %2, %1
  %add = fadd fast float undef, %conv
  %add.1 = fadd fast float undef, %add
  %add.2 = fadd fast float undef, %add.1
  %add.3 = fadd fast float undef, %add.2
  %mul5 = shl nsw i32 %0, 2
  %conv6 = sitofp i32 %mul5 to float
  %add7 = fadd fast float %add.3, %conv6
  %add19 = fadd fast float undef, %add7
  %add19.1 = fadd fast float undef, %add19
  %add19.2 = fadd fast float undef, %add19.1
  %rdx.shuf = shufflevector <8 x float> %3, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx = fadd fast <8 x float> %3, %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x float> %bin.rdx, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = fadd fast <8 x float> %bin.rdx, %rdx.shuf1
  %rdx.shuf3 = shufflevector <8 x float> %bin.rdx2, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx4 = fadd fast <8 x float> %bin.rdx2, %rdx.shuf3
  %4 = extractelement <8 x float> %bin.rdx4, i32 0
  %op.extra = fadd fast float %4, %conv
  %op.extra5 = fadd fast float %op.extra, %conv6
  %add19.3 = fadd fast float undef, %add19.2
  store float %op.extra5, float* @res, align 4
  ret float %op.extra5
}

define float @bazzz() #0 {
entry:
  %0 = load i32, i32* @n, align 4
  %conv = sitofp i32 %0 to float
  %1 = load <4 x float>, <4 x float>* bitcast ([20 x float]* @arr to <4 x float>*), align 16
  %2 = load <4 x float>, <4 x float>* bitcast ([20 x float]* @arr1 to <4 x float>*), align 16
  %3 = fmul fast <4 x float> %2, %1
  %4 = fadd fast float undef, undef
  %5 = fadd fast float undef, %4
  %rdx.shuf = shufflevector <4 x float> %3, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = fadd fast <4 x float> %3, %rdx.shuf
  %rdx.shuf1 = shufflevector <4 x float> %bin.rdx, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = fadd fast <4 x float> %bin.rdx, %rdx.shuf1
  %6 = extractelement <4 x float> %bin.rdx2, i32 0
  %7 = fadd fast float undef, %5
  %8 = fmul fast float %conv, %6
  store float %8, float* @res, align 4
  ret float %8
}

define i32 @foo() #0 {
entry:
  %0 = load i32, i32* @n, align 4
  %conv = sitofp i32 %0 to float
  %1 = load <4 x float>, <4 x float>* bitcast ([20 x float]* @arr to <4 x float>*), align 16
  %2 = load <4 x float>, <4 x float>* bitcast ([20 x float]* @arr1 to <4 x float>*), align 16
  %3 = fmul fast <4 x float> %2, %1
  %4 = fadd fast float undef, undef
  %5 = fadd fast float undef, %4
  %rdx.shuf = shufflevector <4 x float> %3, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = fadd fast <4 x float> %3, %rdx.shuf
  %rdx.shuf1 = shufflevector <4 x float> %bin.rdx, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = fadd fast <4 x float> %bin.rdx, %rdx.shuf1
  %6 = extractelement <4 x float> %bin.rdx2, i32 0
  %7 = fadd fast float undef, %5
  %8 = fmul fast float %conv, %6
  %conv4 = fptosi float %8 to i32
  store i32 %conv4, i32* @n, align 4
  ret i32 %conv4
}

define float @bar() #0 {
entry:
  %0 = load <4 x float>, <4 x float>* bitcast ([20 x float]* @arr to <4 x float>*), align 16
  %1 = load <4 x float>, <4 x float>* bitcast ([20 x float]* @arr1 to <4 x float>*), align 16
  %2 = fmul fast <4 x float> %1, %0
  %cmp4 = fcmp fast ogt float undef, undef
  %max.0.mul3 = select i1 %cmp4, float undef, float undef
  %cmp4.1 = fcmp fast ogt float %max.0.mul3, undef
  %max.0.mul3.1 = select i1 %cmp4.1, float %max.0.mul3, float undef
  %cmp4.2 = fcmp fast ogt float %max.0.mul3.1, undef
  %rdx.shuf = shufflevector <4 x float> %2, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp = fcmp fast ogt <4 x float> %2, %rdx.shuf
  %rdx.minmax.select = select <4 x i1> %rdx.minmax.cmp, <4 x float> %2, <4 x float> %rdx.shuf
  %rdx.shuf1 = shufflevector <4 x float> %rdx.minmax.select, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp2 = fcmp fast ogt <4 x float> %rdx.minmax.select, %rdx.shuf1
  %rdx.minmax.select3 = select <4 x i1> %rdx.minmax.cmp2, <4 x float> %rdx.minmax.select, <4 x float> %rdx.shuf1
  %3 = extractelement <4 x float> %rdx.minmax.select3, i32 0
  %max.0.mul3.2 = select i1 %cmp4.2, float %max.0.mul3.1, float undef
  store float %3, float* @res, align 4
  ret float %3
}

define float @f(float* nocapture readonly %x) #0 {
entry:
  %arrayidx.1 = getelementptr inbounds float, float* %x, i64 1
  %arrayidx.2 = getelementptr inbounds float, float* %x, i64 2
  %arrayidx.3 = getelementptr inbounds float, float* %x, i64 3
  %arrayidx.4 = getelementptr inbounds float, float* %x, i64 4
  %arrayidx.5 = getelementptr inbounds float, float* %x, i64 5
  %arrayidx.6 = getelementptr inbounds float, float* %x, i64 6
  %arrayidx.7 = getelementptr inbounds float, float* %x, i64 7
  %arrayidx.8 = getelementptr inbounds float, float* %x, i64 8
  %arrayidx.9 = getelementptr inbounds float, float* %x, i64 9
  %arrayidx.10 = getelementptr inbounds float, float* %x, i64 10
  %arrayidx.11 = getelementptr inbounds float, float* %x, i64 11
  %arrayidx.12 = getelementptr inbounds float, float* %x, i64 12
  %arrayidx.13 = getelementptr inbounds float, float* %x, i64 13
  %arrayidx.14 = getelementptr inbounds float, float* %x, i64 14
  %arrayidx.15 = getelementptr inbounds float, float* %x, i64 15
  %0 = bitcast float* %x to <16 x float>*
  %1 = load <16 x float>, <16 x float>* %0, align 4
  %add.1 = fadd fast float undef, undef
  %add.2 = fadd fast float undef, %add.1
  %add.3 = fadd fast float undef, %add.2
  %add.4 = fadd fast float undef, %add.3
  %add.5 = fadd fast float undef, %add.4
  %add.6 = fadd fast float undef, %add.5
  %add.7 = fadd fast float undef, %add.6
  %add.8 = fadd fast float undef, %add.7
  %add.9 = fadd fast float undef, %add.8
  %add.10 = fadd fast float undef, %add.9
  %add.11 = fadd fast float undef, %add.10
  %add.12 = fadd fast float undef, %add.11
  %add.13 = fadd fast float undef, %add.12
  %add.14 = fadd fast float undef, %add.13
  %add.15 = fadd fast float undef, %add.14
  %arrayidx.16 = getelementptr inbounds float, float* %x, i64 16
  %arrayidx.17 = getelementptr inbounds float, float* %x, i64 17
  %arrayidx.18 = getelementptr inbounds float, float* %x, i64 18
  %arrayidx.19 = getelementptr inbounds float, float* %x, i64 19
  %arrayidx.20 = getelementptr inbounds float, float* %x, i64 20
  %arrayidx.21 = getelementptr inbounds float, float* %x, i64 21
  %arrayidx.22 = getelementptr inbounds float, float* %x, i64 22
  %arrayidx.23 = getelementptr inbounds float, float* %x, i64 23
  %arrayidx.24 = getelementptr inbounds float, float* %x, i64 24
  %arrayidx.25 = getelementptr inbounds float, float* %x, i64 25
  %arrayidx.26 = getelementptr inbounds float, float* %x, i64 26
  %arrayidx.27 = getelementptr inbounds float, float* %x, i64 27
  %arrayidx.28 = getelementptr inbounds float, float* %x, i64 28
  %arrayidx.29 = getelementptr inbounds float, float* %x, i64 29
  %arrayidx.30 = getelementptr inbounds float, float* %x, i64 30
  %arrayidx.31 = getelementptr inbounds float, float* %x, i64 31
  %arrayidx.32 = getelementptr inbounds float, float* %x, i64 32
  %arrayidx.33 = getelementptr inbounds float, float* %x, i64 33
  %arrayidx.34 = getelementptr inbounds float, float* %x, i64 34
  %arrayidx.35 = getelementptr inbounds float, float* %x, i64 35
  %arrayidx.36 = getelementptr inbounds float, float* %x, i64 36
  %arrayidx.37 = getelementptr inbounds float, float* %x, i64 37
  %arrayidx.38 = getelementptr inbounds float, float* %x, i64 38
  %arrayidx.39 = getelementptr inbounds float, float* %x, i64 39
  %arrayidx.40 = getelementptr inbounds float, float* %x, i64 40
  %arrayidx.41 = getelementptr inbounds float, float* %x, i64 41
  %arrayidx.42 = getelementptr inbounds float, float* %x, i64 42
  %arrayidx.43 = getelementptr inbounds float, float* %x, i64 43
  %arrayidx.44 = getelementptr inbounds float, float* %x, i64 44
  %arrayidx.45 = getelementptr inbounds float, float* %x, i64 45
  %arrayidx.46 = getelementptr inbounds float, float* %x, i64 46
  %arrayidx.47 = getelementptr inbounds float, float* %x, i64 47
  %2 = bitcast float* %arrayidx.16 to <32 x float>*
  %3 = load <32 x float>, <32 x float>* %2, align 4
  %add.16 = fadd fast float undef, %add.15
  %add.17 = fadd fast float undef, %add.16
  %add.18 = fadd fast float undef, %add.17
  %add.19 = fadd fast float undef, %add.18
  %add.20 = fadd fast float undef, %add.19
  %add.21 = fadd fast float undef, %add.20
  %add.22 = fadd fast float undef, %add.21
  %add.23 = fadd fast float undef, %add.22
  %add.24 = fadd fast float undef, %add.23
  %add.25 = fadd fast float undef, %add.24
  %add.26 = fadd fast float undef, %add.25
  %add.27 = fadd fast float undef, %add.26
  %add.28 = fadd fast float undef, %add.27
  %add.29 = fadd fast float undef, %add.28
  %add.30 = fadd fast float undef, %add.29
  %add.31 = fadd fast float undef, %add.30
  %add.32 = fadd fast float undef, %add.31
  %add.33 = fadd fast float undef, %add.32
  %add.34 = fadd fast float undef, %add.33
  %add.35 = fadd fast float undef, %add.34
  %add.36 = fadd fast float undef, %add.35
  %add.37 = fadd fast float undef, %add.36
  %add.38 = fadd fast float undef, %add.37
  %add.39 = fadd fast float undef, %add.38
  %add.40 = fadd fast float undef, %add.39
  %add.41 = fadd fast float undef, %add.40
  %add.42 = fadd fast float undef, %add.41
  %add.43 = fadd fast float undef, %add.42
  %add.44 = fadd fast float undef, %add.43
  %add.45 = fadd fast float undef, %add.44
  %add.46 = fadd fast float undef, %add.45
  %rdx.shuf = shufflevector <32 x float> %3, <32 x float> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx = fadd fast <32 x float> %3, %rdx.shuf
  %rdx.shuf1 = shufflevector <32 x float> %bin.rdx, <32 x float> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = fadd fast <32 x float> %bin.rdx, %rdx.shuf1
  %rdx.shuf3 = shufflevector <32 x float> %bin.rdx2, <32 x float> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx4 = fadd fast <32 x float> %bin.rdx2, %rdx.shuf3
  %rdx.shuf5 = shufflevector <32 x float> %bin.rdx4, <32 x float> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = fadd fast <32 x float> %bin.rdx4, %rdx.shuf5
  %rdx.shuf7 = shufflevector <32 x float> %bin.rdx6, <32 x float> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx8 = fadd fast <32 x float> %bin.rdx6, %rdx.shuf7
  %4 = extractelement <32 x float> %bin.rdx8, i32 0
  %rdx.shuf9 = shufflevector <16 x float> %1, <16 x float> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx10 = fadd fast <16 x float> %1, %rdx.shuf9
  %rdx.shuf11 = shufflevector <16 x float> %bin.rdx10, <16 x float> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx12 = fadd fast <16 x float> %bin.rdx10, %rdx.shuf11
  %rdx.shuf13 = shufflevector <16 x float> %bin.rdx12, <16 x float> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx14 = fadd fast <16 x float> %bin.rdx12, %rdx.shuf13
  %rdx.shuf15 = shufflevector <16 x float> %bin.rdx14, <16 x float> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx16 = fadd fast <16 x float> %bin.rdx14, %rdx.shuf15
  %5 = extractelement <16 x float> %bin.rdx16, i32 0
  %op.rdx = fadd fast float %4, %5
  %add.47 = fadd fast float undef, %add.46
  ret float %op.rdx
}

define float @f1(float* nocapture readonly %x, i32 %a, i32 %b) #0 {
entry:
  %rem = srem i32 %a, %b
  %conv = sitofp i32 %rem to float
  %arrayidx.1 = getelementptr inbounds float, float* %x, i64 1
  %arrayidx.2 = getelementptr inbounds float, float* %x, i64 2
  %arrayidx.3 = getelementptr inbounds float, float* %x, i64 3
  %arrayidx.4 = getelementptr inbounds float, float* %x, i64 4
  %arrayidx.5 = getelementptr inbounds float, float* %x, i64 5
  %arrayidx.6 = getelementptr inbounds float, float* %x, i64 6
  %arrayidx.7 = getelementptr inbounds float, float* %x, i64 7
  %arrayidx.8 = getelementptr inbounds float, float* %x, i64 8
  %arrayidx.9 = getelementptr inbounds float, float* %x, i64 9
  %arrayidx.10 = getelementptr inbounds float, float* %x, i64 10
  %arrayidx.11 = getelementptr inbounds float, float* %x, i64 11
  %arrayidx.12 = getelementptr inbounds float, float* %x, i64 12
  %arrayidx.13 = getelementptr inbounds float, float* %x, i64 13
  %arrayidx.14 = getelementptr inbounds float, float* %x, i64 14
  %arrayidx.15 = getelementptr inbounds float, float* %x, i64 15
  %arrayidx.16 = getelementptr inbounds float, float* %x, i64 16
  %arrayidx.17 = getelementptr inbounds float, float* %x, i64 17
  %arrayidx.18 = getelementptr inbounds float, float* %x, i64 18
  %arrayidx.19 = getelementptr inbounds float, float* %x, i64 19
  %arrayidx.20 = getelementptr inbounds float, float* %x, i64 20
  %arrayidx.21 = getelementptr inbounds float, float* %x, i64 21
  %arrayidx.22 = getelementptr inbounds float, float* %x, i64 22
  %arrayidx.23 = getelementptr inbounds float, float* %x, i64 23
  %arrayidx.24 = getelementptr inbounds float, float* %x, i64 24
  %arrayidx.25 = getelementptr inbounds float, float* %x, i64 25
  %arrayidx.26 = getelementptr inbounds float, float* %x, i64 26
  %arrayidx.27 = getelementptr inbounds float, float* %x, i64 27
  %arrayidx.28 = getelementptr inbounds float, float* %x, i64 28
  %arrayidx.29 = getelementptr inbounds float, float* %x, i64 29
  %arrayidx.30 = getelementptr inbounds float, float* %x, i64 30
  %arrayidx.31 = getelementptr inbounds float, float* %x, i64 31
  %0 = bitcast float* %x to <32 x float>*
  %1 = load <32 x float>, <32 x float>* %0, align 4
  %add = fadd fast float undef, %conv
  %add.1 = fadd fast float undef, %add
  %add.2 = fadd fast float undef, %add.1
  %add.3 = fadd fast float undef, %add.2
  %add.4 = fadd fast float undef, %add.3
  %add.5 = fadd fast float undef, %add.4
  %add.6 = fadd fast float undef, %add.5
  %add.7 = fadd fast float undef, %add.6
  %add.8 = fadd fast float undef, %add.7
  %add.9 = fadd fast float undef, %add.8
  %add.10 = fadd fast float undef, %add.9
  %add.11 = fadd fast float undef, %add.10
  %add.12 = fadd fast float undef, %add.11
  %add.13 = fadd fast float undef, %add.12
  %add.14 = fadd fast float undef, %add.13
  %add.15 = fadd fast float undef, %add.14
  %add.16 = fadd fast float undef, %add.15
  %add.17 = fadd fast float undef, %add.16
  %add.18 = fadd fast float undef, %add.17
  %add.19 = fadd fast float undef, %add.18
  %add.20 = fadd fast float undef, %add.19
  %add.21 = fadd fast float undef, %add.20
  %add.22 = fadd fast float undef, %add.21
  %add.23 = fadd fast float undef, %add.22
  %add.24 = fadd fast float undef, %add.23
  %add.25 = fadd fast float undef, %add.24
  %add.26 = fadd fast float undef, %add.25
  %add.27 = fadd fast float undef, %add.26
  %add.28 = fadd fast float undef, %add.27
  %add.29 = fadd fast float undef, %add.28
  %add.30 = fadd fast float undef, %add.29
  %rdx.shuf = shufflevector <32 x float> %1, <32 x float> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx = fadd fast <32 x float> %1, %rdx.shuf
  %rdx.shuf1 = shufflevector <32 x float> %bin.rdx, <32 x float> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = fadd fast <32 x float> %bin.rdx, %rdx.shuf1
  %rdx.shuf3 = shufflevector <32 x float> %bin.rdx2, <32 x float> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx4 = fadd fast <32 x float> %bin.rdx2, %rdx.shuf3
  %rdx.shuf5 = shufflevector <32 x float> %bin.rdx4, <32 x float> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = fadd fast <32 x float> %bin.rdx4, %rdx.shuf5
  %rdx.shuf7 = shufflevector <32 x float> %bin.rdx6, <32 x float> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx8 = fadd fast <32 x float> %bin.rdx6, %rdx.shuf7
  %2 = extractelement <32 x float> %bin.rdx8, i32 0
  %op.extra = fadd fast float %2, %conv
  %add.31 = fadd fast float undef, %add.30
  ret float %op.extra
}

define float @loadadd31(float* nocapture readonly %x) #0 {
entry:
  %arrayidx = getelementptr inbounds float, float* %x, i64 1
  %0 = load float, float* %arrayidx, align 4
  %arrayidx.1 = getelementptr inbounds float, float* %x, i64 2
  %1 = load float, float* %arrayidx.1, align 4
  %add.1 = fadd fast float %1, %0
  %arrayidx.2 = getelementptr inbounds float, float* %x, i64 3
  %arrayidx.3 = getelementptr inbounds float, float* %x, i64 4
  %arrayidx.4 = getelementptr inbounds float, float* %x, i64 5
  %arrayidx.5 = getelementptr inbounds float, float* %x, i64 6
  %2 = bitcast float* %arrayidx.2 to <4 x float>*
  %3 = load <4 x float>, <4 x float>* %2, align 4
  %add.2 = fadd fast float undef, %add.1
  %add.3 = fadd fast float undef, %add.2
  %add.4 = fadd fast float undef, %add.3
  %add.5 = fadd fast float undef, %add.4
  %arrayidx.6 = getelementptr inbounds float, float* %x, i64 7
  %arrayidx.7 = getelementptr inbounds float, float* %x, i64 8
  %arrayidx.8 = getelementptr inbounds float, float* %x, i64 9
  %arrayidx.9 = getelementptr inbounds float, float* %x, i64 10
  %arrayidx.10 = getelementptr inbounds float, float* %x, i64 11
  %arrayidx.11 = getelementptr inbounds float, float* %x, i64 12
  %arrayidx.12 = getelementptr inbounds float, float* %x, i64 13
  %arrayidx.13 = getelementptr inbounds float, float* %x, i64 14
  %4 = bitcast float* %arrayidx.6 to <8 x float>*
  %5 = load <8 x float>, <8 x float>* %4, align 4
  %add.6 = fadd fast float undef, %add.5
  %add.7 = fadd fast float undef, %add.6
  %add.8 = fadd fast float undef, %add.7
  %add.9 = fadd fast float undef, %add.8
  %add.10 = fadd fast float undef, %add.9
  %add.11 = fadd fast float undef, %add.10
  %add.12 = fadd fast float undef, %add.11
  %add.13 = fadd fast float undef, %add.12
  %arrayidx.14 = getelementptr inbounds float, float* %x, i64 15
  %arrayidx.15 = getelementptr inbounds float, float* %x, i64 16
  %arrayidx.16 = getelementptr inbounds float, float* %x, i64 17
  %arrayidx.17 = getelementptr inbounds float, float* %x, i64 18
  %arrayidx.18 = getelementptr inbounds float, float* %x, i64 19
  %arrayidx.19 = getelementptr inbounds float, float* %x, i64 20
  %arrayidx.20 = getelementptr inbounds float, float* %x, i64 21
  %arrayidx.21 = getelementptr inbounds float, float* %x, i64 22
  %arrayidx.22 = getelementptr inbounds float, float* %x, i64 23
  %arrayidx.23 = getelementptr inbounds float, float* %x, i64 24
  %arrayidx.24 = getelementptr inbounds float, float* %x, i64 25
  %arrayidx.25 = getelementptr inbounds float, float* %x, i64 26
  %arrayidx.26 = getelementptr inbounds float, float* %x, i64 27
  %arrayidx.27 = getelementptr inbounds float, float* %x, i64 28
  %arrayidx.28 = getelementptr inbounds float, float* %x, i64 29
  %arrayidx.29 = getelementptr inbounds float, float* %x, i64 30
  %6 = bitcast float* %arrayidx.14 to <16 x float>*
  %7 = load <16 x float>, <16 x float>* %6, align 4
  %add.14 = fadd fast float undef, %add.13
  %add.15 = fadd fast float undef, %add.14
  %add.16 = fadd fast float undef, %add.15
  %add.17 = fadd fast float undef, %add.16
  %add.18 = fadd fast float undef, %add.17
  %add.19 = fadd fast float undef, %add.18
  %add.20 = fadd fast float undef, %add.19
  %add.21 = fadd fast float undef, %add.20
  %add.22 = fadd fast float undef, %add.21
  %add.23 = fadd fast float undef, %add.22
  %add.24 = fadd fast float undef, %add.23
  %add.25 = fadd fast float undef, %add.24
  %add.26 = fadd fast float undef, %add.25
  %add.27 = fadd fast float undef, %add.26
  %add.28 = fadd fast float undef, %add.27
  %rdx.shuf = shufflevector <16 x float> %7, <16 x float> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx = fadd fast <16 x float> %7, %rdx.shuf
  %rdx.shuf1 = shufflevector <16 x float> %bin.rdx, <16 x float> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = fadd fast <16 x float> %bin.rdx, %rdx.shuf1
  %rdx.shuf3 = shufflevector <16 x float> %bin.rdx2, <16 x float> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx4 = fadd fast <16 x float> %bin.rdx2, %rdx.shuf3
  %rdx.shuf5 = shufflevector <16 x float> %bin.rdx4, <16 x float> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = fadd fast <16 x float> %bin.rdx4, %rdx.shuf5
  %8 = extractelement <16 x float> %bin.rdx6, i32 0
  %rdx.shuf7 = shufflevector <8 x float> %5, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx8 = fadd fast <8 x float> %5, %rdx.shuf7
  %rdx.shuf9 = shufflevector <8 x float> %bin.rdx8, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx10 = fadd fast <8 x float> %bin.rdx8, %rdx.shuf9
  %rdx.shuf11 = shufflevector <8 x float> %bin.rdx10, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx12 = fadd fast <8 x float> %bin.rdx10, %rdx.shuf11
  %9 = extractelement <8 x float> %bin.rdx12, i32 0
  %op.rdx = fadd fast float %8, %9
  %rdx.shuf13 = shufflevector <4 x float> %3, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx14 = fadd fast <4 x float> %3, %rdx.shuf13
  %rdx.shuf15 = shufflevector <4 x float> %bin.rdx14, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx16 = fadd fast <4 x float> %bin.rdx14, %rdx.shuf15
  %10 = extractelement <4 x float> %bin.rdx16, i32 0
  %op.rdx17 = fadd fast float %op.rdx, %10
  %11 = fadd fast float %op.rdx17, %1
  %12 = fadd fast float %11, %0
  %add.29 = fadd fast float undef, %add.28
  ret float %12
}

define float @extra_args(float* nocapture readonly %x, i32 %a, i32 %b) #0 {
entry:
  %mul = mul nsw i32 %b, %a
  %conv = sitofp i32 %mul to float
  %add = fadd fast float %conv, 3.000000e+00
  %arrayidx3 = getelementptr inbounds float, float* %x, i64 1
  %arrayidx3.1 = getelementptr inbounds float, float* %x, i64 2
  %arrayidx3.2 = getelementptr inbounds float, float* %x, i64 3
  %arrayidx3.3 = getelementptr inbounds float, float* %x, i64 4
  %arrayidx3.4 = getelementptr inbounds float, float* %x, i64 5
  %arrayidx3.5 = getelementptr inbounds float, float* %x, i64 6
  %arrayidx3.6 = getelementptr inbounds float, float* %x, i64 7
  %0 = bitcast float* %x to <8 x float>*
  %1 = load <8 x float>, <8 x float>* %0, align 4
  %add1 = fadd fast float undef, %add
  %add4 = fadd fast float undef, %add1
  %add5 = fadd fast float %add4, %conv
  %add4.1 = fadd fast float undef, %add5
  %add4.2 = fadd fast float undef, %add4.1
  %add4.3 = fadd fast float undef, %add4.2
  %add4.4 = fadd fast float undef, %add4.3
  %add4.5 = fadd fast float undef, %add4.4
  %rdx.shuf = shufflevector <8 x float> %1, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx = fadd fast <8 x float> %1, %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x float> %bin.rdx, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = fadd fast <8 x float> %bin.rdx, %rdx.shuf1
  %rdx.shuf3 = shufflevector <8 x float> %bin.rdx2, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx4 = fadd fast <8 x float> %bin.rdx2, %rdx.shuf3
  %2 = extractelement <8 x float> %bin.rdx4, i32 0
  %op.extra = fadd fast float %2, %add
  %op.extra5 = fadd fast float %op.extra, %conv
  %add4.6 = fadd fast float undef, %add4.5
  ret float %op.extra5
}

define float @extra_args_same_several_times(float* nocapture readonly %x, i32 %a, i32 %b) #0 {
entry:
  %mul = mul nsw i32 %b, %a
  %conv = sitofp i32 %mul to float
  %add = fadd fast float %conv, 3.000000e+00
  %arrayidx3 = getelementptr inbounds float, float* %x, i64 1
  %arrayidx3.1 = getelementptr inbounds float, float* %x, i64 2
  %arrayidx3.2 = getelementptr inbounds float, float* %x, i64 3
  %arrayidx3.3 = getelementptr inbounds float, float* %x, i64 4
  %arrayidx3.4 = getelementptr inbounds float, float* %x, i64 5
  %arrayidx3.5 = getelementptr inbounds float, float* %x, i64 6
  %arrayidx3.6 = getelementptr inbounds float, float* %x, i64 7
  %0 = bitcast float* %x to <8 x float>*
  %1 = load <8 x float>, <8 x float>* %0, align 4
  %add1 = fadd fast float undef, %add
  %add4 = fadd fast float undef, %add1
  %add41 = fadd fast float %add4, 5.000000e+00
  %add5 = fadd fast float %add41, %conv
  %add4.1 = fadd fast float undef, %add5
  %add4.11 = fadd fast float %add4.1, 5.000000e+00
  %add4.2 = fadd fast float undef, %add4.11
  %add4.3 = fadd fast float undef, %add4.2
  %add4.4 = fadd fast float undef, %add4.3
  %add4.5 = fadd fast float undef, %add4.4
  %rdx.shuf = shufflevector <8 x float> %1, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx = fadd fast <8 x float> %1, %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x float> %bin.rdx, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = fadd fast <8 x float> %bin.rdx, %rdx.shuf1
  %rdx.shuf3 = shufflevector <8 x float> %bin.rdx2, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx4 = fadd fast <8 x float> %bin.rdx2, %rdx.shuf3
  %2 = extractelement <8 x float> %bin.rdx4, i32 0
  %op.extra = fadd fast float %2, %add
  %op.extra5 = fadd fast float %op.extra, 5.000000e+00
  %op.extra6 = fadd fast float %op.extra5, 5.000000e+00
  %op.extra7 = fadd fast float %op.extra6, %conv
  %add4.6 = fadd fast float undef, %add4.5
  ret float %op.extra7
}

define float @extra_args_no_replace(float* nocapture readonly %x, i32 %a, i32 %b, i32 %c) #0 {
entry:
  %mul = mul nsw i32 %b, %a
  %conv = sitofp i32 %mul to float
  %convc = sitofp i32 %c to float
  %addc = fadd fast float %convc, 3.000000e+00
  %add = fadd fast float %conv, %addc
  %arrayidx3 = getelementptr inbounds float, float* %x, i64 1
  %arrayidx3.1 = getelementptr inbounds float, float* %x, i64 2
  %arrayidx3.2 = getelementptr inbounds float, float* %x, i64 3
  %arrayidx3.3 = getelementptr inbounds float, float* %x, i64 4
  %arrayidx3.4 = getelementptr inbounds float, float* %x, i64 5
  %arrayidx3.5 = getelementptr inbounds float, float* %x, i64 6
  %arrayidx3.6 = getelementptr inbounds float, float* %x, i64 7
  %0 = bitcast float* %x to <8 x float>*
  %1 = load <8 x float>, <8 x float>* %0, align 4
  %add1 = fadd fast float undef, %add
  %add4 = fadd fast float undef, %add1
  %add4.1 = fadd fast float undef, %add4
  %add4.2 = fadd fast float undef, %add4.1
  %add4.3 = fadd fast float undef, %add4.2
  %add5 = fadd fast float %add4.3, %conv
  %add4.4 = fadd fast float undef, %add5
  %add4.5 = fadd fast float undef, %add4.4
  %rdx.shuf = shufflevector <8 x float> %1, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx = fadd fast <8 x float> %1, %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x float> %bin.rdx, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = fadd fast <8 x float> %bin.rdx, %rdx.shuf1
  %rdx.shuf3 = shufflevector <8 x float> %bin.rdx2, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx4 = fadd fast <8 x float> %bin.rdx2, %rdx.shuf3
  %2 = extractelement <8 x float> %bin.rdx4, i32 0
  %op.extra = fadd fast float %2, %add
  %op.extra5 = fadd fast float %op.extra, %conv
  %add4.6 = fadd fast float undef, %add4.5
  ret float %op.extra5
}

define i32 @wobble(i32 %arg, i32 %bar) #0 {
bb:
  %0 = insertelement <4 x i32> undef, i32 %arg, i32 0
  %1 = insertelement <4 x i32> %0, i32 %arg, i32 1
  %2 = insertelement <4 x i32> %1, i32 %arg, i32 2
  %3 = insertelement <4 x i32> %2, i32 %arg, i32 3
  %4 = insertelement <4 x i32> undef, i32 %bar, i32 0
  %5 = insertelement <4 x i32> %4, i32 %bar, i32 1
  %6 = insertelement <4 x i32> %5, i32 %bar, i32 2
  %7 = insertelement <4 x i32> %6, i32 %bar, i32 3
  %8 = xor <4 x i32> %3, %7
  %9 = extractelement <4 x i32> %8, i32 3
  %10 = icmp eq <4 x i32> %8, zeroinitializer
  %11 = sext <4 x i1> %10 to <4 x i32>
  %r1 = add nuw i32 %arg, undef
  %r2 = add nsw i32 %r1, undef
  %r3 = add nsw i32 %r2, undef
  %r4 = add nsw i32 %r3, undef
  %rdx.shuf = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = add <4 x i32> %11, %rdx.shuf
  %rdx.shuf1 = shufflevector <4 x i32> %bin.rdx, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = add <4 x i32> %bin.rdx, %rdx.shuf1
  %12 = extractelement <4 x i32> %bin.rdx2, i32 0
  %op.extra = add nuw i32 %12, %arg
  %op.extra3 = add nsw i32 %op.extra, %9
  %r5 = add nsw i32 %r4, %9
  ret i32 %op.extra3
}

attributes #0 = { "target-cpu"="bdver2" }
