; ModuleID = '<stdin>'
source_filename = "<stdin>"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"
target triple = "x86_64--linux-gnu"

@a = common global [4 x double] zeroinitializer, align 8
@b = common global [4 x double] zeroinitializer, align 8

define double @return1() {
entry:
  %0 = load <2 x double>, <2 x double>* bitcast ([4 x double]* @a to <2 x double>*), align 8
  %1 = load <2 x double>, <2 x double>* bitcast ([4 x double]* @b to <2 x double>*), align 8
  %2 = fadd <2 x double> %0, %1
  %3 = extractelement <2 x double> %2, i32 0
  %4 = extractelement <2 x double> %2, i32 1
  %add2 = fadd double %3, %4
  ret double %add2
}

define double @return2(double* nocapture readonly %x) {
entry:
  %arrayidx1 = getelementptr inbounds double, double* %x, i32 2
  %arrayidx2 = getelementptr inbounds double, double* %x, i32 1
  %0 = bitcast double* %x to <2 x double>*
  %1 = load <2 x double>, <2 x double>* %0, align 4
  %arrayidx3 = getelementptr inbounds double, double* %x, i32 3
  %2 = bitcast double* %arrayidx1 to <2 x double>*
  %3 = load <2 x double>, <2 x double>* %2, align 4
  %4 = fadd <2 x double> %1, %3
  %5 = extractelement <2 x double> %4, i32 0
  %6 = extractelement <2 x double> %4, i32 1
  %add5 = fadd double %5, %6
  ret double %add5
}
