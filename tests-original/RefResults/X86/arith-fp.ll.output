; ModuleID = '<stdin>'
source_filename = "<stdin>"
target triple = "x86_64-unknown"

define <2 x double> @buildvector_add_2f64(<2 x double> %a, <2 x double> %b) {
  %1 = fadd <2 x double> %a, %b
  %2 = extractelement <2 x double> %1, i32 0
  %r0 = insertelement <2 x double> undef, double %2, i32 0
  %3 = extractelement <2 x double> %1, i32 1
  %r1 = insertelement <2 x double> %r0, double %3, i32 1
  ret <2 x double> %r1
}

define <2 x double> @buildvector_sub_2f64(<2 x double> %a, <2 x double> %b) {
  %1 = fsub <2 x double> %a, %b
  %2 = extractelement <2 x double> %1, i32 0
  %r0 = insertelement <2 x double> undef, double %2, i32 0
  %3 = extractelement <2 x double> %1, i32 1
  %r1 = insertelement <2 x double> %r0, double %3, i32 1
  ret <2 x double> %r1
}

define <2 x double> @buildvector_mul_2f64(<2 x double> %a, <2 x double> %b) {
  %1 = fmul <2 x double> %a, %b
  %2 = extractelement <2 x double> %1, i32 0
  %r0 = insertelement <2 x double> undef, double %2, i32 0
  %3 = extractelement <2 x double> %1, i32 1
  %r1 = insertelement <2 x double> %r0, double %3, i32 1
  ret <2 x double> %r1
}

define <2 x double> @buildvector_div_2f64(<2 x double> %a, <2 x double> %b) {
  %1 = fdiv <2 x double> %a, %b
  %2 = extractelement <2 x double> %1, i32 0
  %r0 = insertelement <2 x double> undef, double %2, i32 0
  %3 = extractelement <2 x double> %1, i32 1
  %r1 = insertelement <2 x double> %r0, double %3, i32 1
  ret <2 x double> %r1
}

define <4 x float> @buildvector_add_4f32(<4 x float> %a, <4 x float> %b) {
  %1 = fadd <4 x float> %a, %b
  %2 = extractelement <4 x float> %1, i32 0
  %r0 = insertelement <4 x float> undef, float %2, i32 0
  %3 = extractelement <4 x float> %1, i32 1
  %r1 = insertelement <4 x float> %r0, float %3, i32 1
  %4 = extractelement <4 x float> %1, i32 2
  %r2 = insertelement <4 x float> %r1, float %4, i32 2
  %5 = extractelement <4 x float> %1, i32 3
  %r3 = insertelement <4 x float> %r2, float %5, i32 3
  ret <4 x float> %r3
}

define <4 x float> @buildvector_sub_4f32(<4 x float> %a, <4 x float> %b) {
  %1 = fsub <4 x float> %a, %b
  %2 = extractelement <4 x float> %1, i32 0
  %r0 = insertelement <4 x float> undef, float %2, i32 0
  %3 = extractelement <4 x float> %1, i32 1
  %r1 = insertelement <4 x float> %r0, float %3, i32 1
  %4 = extractelement <4 x float> %1, i32 2
  %r2 = insertelement <4 x float> %r1, float %4, i32 2
  %5 = extractelement <4 x float> %1, i32 3
  %r3 = insertelement <4 x float> %r2, float %5, i32 3
  ret <4 x float> %r3
}

define <4 x float> @buildvector_mul_4f32(<4 x float> %a, <4 x float> %b) {
  %1 = fmul <4 x float> %a, %b
  %2 = extractelement <4 x float> %1, i32 0
  %r0 = insertelement <4 x float> undef, float %2, i32 0
  %3 = extractelement <4 x float> %1, i32 1
  %r1 = insertelement <4 x float> %r0, float %3, i32 1
  %4 = extractelement <4 x float> %1, i32 2
  %r2 = insertelement <4 x float> %r1, float %4, i32 2
  %5 = extractelement <4 x float> %1, i32 3
  %r3 = insertelement <4 x float> %r2, float %5, i32 3
  ret <4 x float> %r3
}

define <4 x float> @buildvector_div_4f32(<4 x float> %a, <4 x float> %b) {
  %1 = fdiv <4 x float> %a, %b
  %2 = extractelement <4 x float> %1, i32 0
  %r0 = insertelement <4 x float> undef, float %2, i32 0
  %3 = extractelement <4 x float> %1, i32 1
  %r1 = insertelement <4 x float> %r0, float %3, i32 1
  %4 = extractelement <4 x float> %1, i32 2
  %r2 = insertelement <4 x float> %r1, float %4, i32 2
  %5 = extractelement <4 x float> %1, i32 3
  %r3 = insertelement <4 x float> %r2, float %5, i32 3
  ret <4 x float> %r3
}

define <4 x double> @buildvector_add_4f64(<4 x double> %a, <4 x double> %b) {
  %1 = fadd <4 x double> %a, %b
  %2 = extractelement <4 x double> %1, i32 0
  %r0 = insertelement <4 x double> undef, double %2, i32 0
  %3 = extractelement <4 x double> %1, i32 1
  %r1 = insertelement <4 x double> %r0, double %3, i32 1
  %4 = extractelement <4 x double> %1, i32 2
  %r2 = insertelement <4 x double> %r1, double %4, i32 2
  %5 = extractelement <4 x double> %1, i32 3
  %r3 = insertelement <4 x double> %r2, double %5, i32 3
  ret <4 x double> %r3
}

define <4 x double> @buildvector_sub_4f64(<4 x double> %a, <4 x double> %b) {
  %1 = fsub <4 x double> %a, %b
  %2 = extractelement <4 x double> %1, i32 0
  %r0 = insertelement <4 x double> undef, double %2, i32 0
  %3 = extractelement <4 x double> %1, i32 1
  %r1 = insertelement <4 x double> %r0, double %3, i32 1
  %4 = extractelement <4 x double> %1, i32 2
  %r2 = insertelement <4 x double> %r1, double %4, i32 2
  %5 = extractelement <4 x double> %1, i32 3
  %r3 = insertelement <4 x double> %r2, double %5, i32 3
  ret <4 x double> %r3
}

define <4 x double> @buildvector_mul_4f64(<4 x double> %a, <4 x double> %b) {
  %1 = fmul <4 x double> %a, %b
  %2 = extractelement <4 x double> %1, i32 0
  %r0 = insertelement <4 x double> undef, double %2, i32 0
  %3 = extractelement <4 x double> %1, i32 1
  %r1 = insertelement <4 x double> %r0, double %3, i32 1
  %4 = extractelement <4 x double> %1, i32 2
  %r2 = insertelement <4 x double> %r1, double %4, i32 2
  %5 = extractelement <4 x double> %1, i32 3
  %r3 = insertelement <4 x double> %r2, double %5, i32 3
  ret <4 x double> %r3
}

define <4 x double> @buildvector_div_4f64(<4 x double> %a, <4 x double> %b) {
  %1 = fdiv <4 x double> %a, %b
  %2 = extractelement <4 x double> %1, i32 0
  %r0 = insertelement <4 x double> undef, double %2, i32 0
  %3 = extractelement <4 x double> %1, i32 1
  %r1 = insertelement <4 x double> %r0, double %3, i32 1
  %4 = extractelement <4 x double> %1, i32 2
  %r2 = insertelement <4 x double> %r1, double %4, i32 2
  %5 = extractelement <4 x double> %1, i32 3
  %r3 = insertelement <4 x double> %r2, double %5, i32 3
  ret <4 x double> %r3
}

define <8 x float> @buildvector_add_8f32(<8 x float> %a, <8 x float> %b) {
  %1 = fadd <8 x float> %a, %b
  %2 = extractelement <8 x float> %1, i32 0
  %r0 = insertelement <8 x float> undef, float %2, i32 0
  %3 = extractelement <8 x float> %1, i32 1
  %r1 = insertelement <8 x float> %r0, float %3, i32 1
  %4 = extractelement <8 x float> %1, i32 2
  %r2 = insertelement <8 x float> %r1, float %4, i32 2
  %5 = extractelement <8 x float> %1, i32 3
  %r3 = insertelement <8 x float> %r2, float %5, i32 3
  %6 = extractelement <8 x float> %1, i32 4
  %r4 = insertelement <8 x float> %r3, float %6, i32 4
  %7 = extractelement <8 x float> %1, i32 5
  %r5 = insertelement <8 x float> %r4, float %7, i32 5
  %8 = extractelement <8 x float> %1, i32 6
  %r6 = insertelement <8 x float> %r5, float %8, i32 6
  %9 = extractelement <8 x float> %1, i32 7
  %r7 = insertelement <8 x float> %r6, float %9, i32 7
  ret <8 x float> %r7
}

define <8 x float> @buildvector_sub_8f32(<8 x float> %a, <8 x float> %b) {
  %1 = fsub <8 x float> %a, %b
  %2 = extractelement <8 x float> %1, i32 0
  %r0 = insertelement <8 x float> undef, float %2, i32 0
  %3 = extractelement <8 x float> %1, i32 1
  %r1 = insertelement <8 x float> %r0, float %3, i32 1
  %4 = extractelement <8 x float> %1, i32 2
  %r2 = insertelement <8 x float> %r1, float %4, i32 2
  %5 = extractelement <8 x float> %1, i32 3
  %r3 = insertelement <8 x float> %r2, float %5, i32 3
  %6 = extractelement <8 x float> %1, i32 4
  %r4 = insertelement <8 x float> %r3, float %6, i32 4
  %7 = extractelement <8 x float> %1, i32 5
  %r5 = insertelement <8 x float> %r4, float %7, i32 5
  %8 = extractelement <8 x float> %1, i32 6
  %r6 = insertelement <8 x float> %r5, float %8, i32 6
  %9 = extractelement <8 x float> %1, i32 7
  %r7 = insertelement <8 x float> %r6, float %9, i32 7
  ret <8 x float> %r7
}

define <8 x float> @buildvector_mul_8f32(<8 x float> %a, <8 x float> %b) {
  %1 = fmul <8 x float> %a, %b
  %2 = extractelement <8 x float> %1, i32 0
  %r0 = insertelement <8 x float> undef, float %2, i32 0
  %3 = extractelement <8 x float> %1, i32 1
  %r1 = insertelement <8 x float> %r0, float %3, i32 1
  %4 = extractelement <8 x float> %1, i32 2
  %r2 = insertelement <8 x float> %r1, float %4, i32 2
  %5 = extractelement <8 x float> %1, i32 3
  %r3 = insertelement <8 x float> %r2, float %5, i32 3
  %6 = extractelement <8 x float> %1, i32 4
  %r4 = insertelement <8 x float> %r3, float %6, i32 4
  %7 = extractelement <8 x float> %1, i32 5
  %r5 = insertelement <8 x float> %r4, float %7, i32 5
  %8 = extractelement <8 x float> %1, i32 6
  %r6 = insertelement <8 x float> %r5, float %8, i32 6
  %9 = extractelement <8 x float> %1, i32 7
  %r7 = insertelement <8 x float> %r6, float %9, i32 7
  ret <8 x float> %r7
}

define <8 x float> @buildvector_div_8f32(<8 x float> %a, <8 x float> %b) {
  %1 = fdiv <8 x float> %a, %b
  %2 = extractelement <8 x float> %1, i32 0
  %r0 = insertelement <8 x float> undef, float %2, i32 0
  %3 = extractelement <8 x float> %1, i32 1
  %r1 = insertelement <8 x float> %r0, float %3, i32 1
  %4 = extractelement <8 x float> %1, i32 2
  %r2 = insertelement <8 x float> %r1, float %4, i32 2
  %5 = extractelement <8 x float> %1, i32 3
  %r3 = insertelement <8 x float> %r2, float %5, i32 3
  %6 = extractelement <8 x float> %1, i32 4
  %r4 = insertelement <8 x float> %r3, float %6, i32 4
  %7 = extractelement <8 x float> %1, i32 5
  %r5 = insertelement <8 x float> %r4, float %7, i32 5
  %8 = extractelement <8 x float> %1, i32 6
  %r6 = insertelement <8 x float> %r5, float %8, i32 6
  %9 = extractelement <8 x float> %1, i32 7
  %r7 = insertelement <8 x float> %r6, float %9, i32 7
  ret <8 x float> %r7
}

define <8 x double> @buildvector_add_8f64(<8 x double> %a, <8 x double> %b) {
  %1 = fadd <8 x double> %a, %b
  %2 = extractelement <8 x double> %1, i32 0
  %r0 = insertelement <8 x double> undef, double %2, i32 0
  %3 = extractelement <8 x double> %1, i32 1
  %r1 = insertelement <8 x double> %r0, double %3, i32 1
  %4 = extractelement <8 x double> %1, i32 2
  %r2 = insertelement <8 x double> %r1, double %4, i32 2
  %5 = extractelement <8 x double> %1, i32 3
  %r3 = insertelement <8 x double> %r2, double %5, i32 3
  %6 = extractelement <8 x double> %1, i32 4
  %r4 = insertelement <8 x double> %r3, double %6, i32 4
  %7 = extractelement <8 x double> %1, i32 5
  %r5 = insertelement <8 x double> %r4, double %7, i32 5
  %8 = extractelement <8 x double> %1, i32 6
  %r6 = insertelement <8 x double> %r5, double %8, i32 6
  %9 = extractelement <8 x double> %1, i32 7
  %r7 = insertelement <8 x double> %r6, double %9, i32 7
  ret <8 x double> %r7
}

define <8 x double> @buildvector_sub_8f64(<8 x double> %a, <8 x double> %b) {
  %1 = fsub <8 x double> %a, %b
  %2 = extractelement <8 x double> %1, i32 0
  %r0 = insertelement <8 x double> undef, double %2, i32 0
  %3 = extractelement <8 x double> %1, i32 1
  %r1 = insertelement <8 x double> %r0, double %3, i32 1
  %4 = extractelement <8 x double> %1, i32 2
  %r2 = insertelement <8 x double> %r1, double %4, i32 2
  %5 = extractelement <8 x double> %1, i32 3
  %r3 = insertelement <8 x double> %r2, double %5, i32 3
  %6 = extractelement <8 x double> %1, i32 4
  %r4 = insertelement <8 x double> %r3, double %6, i32 4
  %7 = extractelement <8 x double> %1, i32 5
  %r5 = insertelement <8 x double> %r4, double %7, i32 5
  %8 = extractelement <8 x double> %1, i32 6
  %r6 = insertelement <8 x double> %r5, double %8, i32 6
  %9 = extractelement <8 x double> %1, i32 7
  %r7 = insertelement <8 x double> %r6, double %9, i32 7
  ret <8 x double> %r7
}

define <8 x double> @buildvector_mul_8f64(<8 x double> %a, <8 x double> %b) {
  %1 = fmul <8 x double> %a, %b
  %2 = extractelement <8 x double> %1, i32 0
  %r0 = insertelement <8 x double> undef, double %2, i32 0
  %3 = extractelement <8 x double> %1, i32 1
  %r1 = insertelement <8 x double> %r0, double %3, i32 1
  %4 = extractelement <8 x double> %1, i32 2
  %r2 = insertelement <8 x double> %r1, double %4, i32 2
  %5 = extractelement <8 x double> %1, i32 3
  %r3 = insertelement <8 x double> %r2, double %5, i32 3
  %6 = extractelement <8 x double> %1, i32 4
  %r4 = insertelement <8 x double> %r3, double %6, i32 4
  %7 = extractelement <8 x double> %1, i32 5
  %r5 = insertelement <8 x double> %r4, double %7, i32 5
  %8 = extractelement <8 x double> %1, i32 6
  %r6 = insertelement <8 x double> %r5, double %8, i32 6
  %9 = extractelement <8 x double> %1, i32 7
  %r7 = insertelement <8 x double> %r6, double %9, i32 7
  ret <8 x double> %r7
}

define <8 x double> @buildvector_div_8f64(<8 x double> %a, <8 x double> %b) {
  %1 = fdiv <8 x double> %a, %b
  %2 = extractelement <8 x double> %1, i32 0
  %r0 = insertelement <8 x double> undef, double %2, i32 0
  %3 = extractelement <8 x double> %1, i32 1
  %r1 = insertelement <8 x double> %r0, double %3, i32 1
  %4 = extractelement <8 x double> %1, i32 2
  %r2 = insertelement <8 x double> %r1, double %4, i32 2
  %5 = extractelement <8 x double> %1, i32 3
  %r3 = insertelement <8 x double> %r2, double %5, i32 3
  %6 = extractelement <8 x double> %1, i32 4
  %r4 = insertelement <8 x double> %r3, double %6, i32 4
  %7 = extractelement <8 x double> %1, i32 5
  %r5 = insertelement <8 x double> %r4, double %7, i32 5
  %8 = extractelement <8 x double> %1, i32 6
  %r6 = insertelement <8 x double> %r5, double %8, i32 6
  %9 = extractelement <8 x double> %1, i32 7
  %r7 = insertelement <8 x double> %r6, double %9, i32 7
  ret <8 x double> %r7
}

define <16 x float> @buildvector_add_16f32(<16 x float> %a, <16 x float> %b) {
  %1 = fadd <16 x float> %a, %b
  %2 = extractelement <16 x float> %1, i32 0
  %r0 = insertelement <16 x float> undef, float %2, i32 0
  %3 = extractelement <16 x float> %1, i32 1
  %r1 = insertelement <16 x float> %r0, float %3, i32 1
  %4 = extractelement <16 x float> %1, i32 2
  %r2 = insertelement <16 x float> %r1, float %4, i32 2
  %5 = extractelement <16 x float> %1, i32 3
  %r3 = insertelement <16 x float> %r2, float %5, i32 3
  %6 = extractelement <16 x float> %1, i32 4
  %r4 = insertelement <16 x float> %r3, float %6, i32 4
  %7 = extractelement <16 x float> %1, i32 5
  %r5 = insertelement <16 x float> %r4, float %7, i32 5
  %8 = extractelement <16 x float> %1, i32 6
  %r6 = insertelement <16 x float> %r5, float %8, i32 6
  %9 = extractelement <16 x float> %1, i32 7
  %r7 = insertelement <16 x float> %r6, float %9, i32 7
  %10 = extractelement <16 x float> %1, i32 8
  %r8 = insertelement <16 x float> %r7, float %10, i32 8
  %11 = extractelement <16 x float> %1, i32 9
  %r9 = insertelement <16 x float> %r8, float %11, i32 9
  %12 = extractelement <16 x float> %1, i32 10
  %r10 = insertelement <16 x float> %r9, float %12, i32 10
  %13 = extractelement <16 x float> %1, i32 11
  %r11 = insertelement <16 x float> %r10, float %13, i32 11
  %14 = extractelement <16 x float> %1, i32 12
  %r12 = insertelement <16 x float> %r11, float %14, i32 12
  %15 = extractelement <16 x float> %1, i32 13
  %r13 = insertelement <16 x float> %r12, float %15, i32 13
  %16 = extractelement <16 x float> %1, i32 14
  %r14 = insertelement <16 x float> %r13, float %16, i32 14
  %17 = extractelement <16 x float> %1, i32 15
  %r15 = insertelement <16 x float> %r14, float %17, i32 15
  ret <16 x float> %r15
}

define <16 x float> @buildvector_sub_16f32(<16 x float> %a, <16 x float> %b) {
  %1 = fsub <16 x float> %a, %b
  %2 = extractelement <16 x float> %1, i32 0
  %r0 = insertelement <16 x float> undef, float %2, i32 0
  %3 = extractelement <16 x float> %1, i32 1
  %r1 = insertelement <16 x float> %r0, float %3, i32 1
  %4 = extractelement <16 x float> %1, i32 2
  %r2 = insertelement <16 x float> %r1, float %4, i32 2
  %5 = extractelement <16 x float> %1, i32 3
  %r3 = insertelement <16 x float> %r2, float %5, i32 3
  %6 = extractelement <16 x float> %1, i32 4
  %r4 = insertelement <16 x float> %r3, float %6, i32 4
  %7 = extractelement <16 x float> %1, i32 5
  %r5 = insertelement <16 x float> %r4, float %7, i32 5
  %8 = extractelement <16 x float> %1, i32 6
  %r6 = insertelement <16 x float> %r5, float %8, i32 6
  %9 = extractelement <16 x float> %1, i32 7
  %r7 = insertelement <16 x float> %r6, float %9, i32 7
  %10 = extractelement <16 x float> %1, i32 8
  %r8 = insertelement <16 x float> %r7, float %10, i32 8
  %11 = extractelement <16 x float> %1, i32 9
  %r9 = insertelement <16 x float> %r8, float %11, i32 9
  %12 = extractelement <16 x float> %1, i32 10
  %r10 = insertelement <16 x float> %r9, float %12, i32 10
  %13 = extractelement <16 x float> %1, i32 11
  %r11 = insertelement <16 x float> %r10, float %13, i32 11
  %14 = extractelement <16 x float> %1, i32 12
  %r12 = insertelement <16 x float> %r11, float %14, i32 12
  %15 = extractelement <16 x float> %1, i32 13
  %r13 = insertelement <16 x float> %r12, float %15, i32 13
  %16 = extractelement <16 x float> %1, i32 14
  %r14 = insertelement <16 x float> %r13, float %16, i32 14
  %17 = extractelement <16 x float> %1, i32 15
  %r15 = insertelement <16 x float> %r14, float %17, i32 15
  ret <16 x float> %r15
}

define <16 x float> @buildvector_mul_16f32(<16 x float> %a, <16 x float> %b) {
  %1 = fmul <16 x float> %a, %b
  %2 = extractelement <16 x float> %1, i32 0
  %r0 = insertelement <16 x float> undef, float %2, i32 0
  %3 = extractelement <16 x float> %1, i32 1
  %r1 = insertelement <16 x float> %r0, float %3, i32 1
  %4 = extractelement <16 x float> %1, i32 2
  %r2 = insertelement <16 x float> %r1, float %4, i32 2
  %5 = extractelement <16 x float> %1, i32 3
  %r3 = insertelement <16 x float> %r2, float %5, i32 3
  %6 = extractelement <16 x float> %1, i32 4
  %r4 = insertelement <16 x float> %r3, float %6, i32 4
  %7 = extractelement <16 x float> %1, i32 5
  %r5 = insertelement <16 x float> %r4, float %7, i32 5
  %8 = extractelement <16 x float> %1, i32 6
  %r6 = insertelement <16 x float> %r5, float %8, i32 6
  %9 = extractelement <16 x float> %1, i32 7
  %r7 = insertelement <16 x float> %r6, float %9, i32 7
  %10 = extractelement <16 x float> %1, i32 8
  %r8 = insertelement <16 x float> %r7, float %10, i32 8
  %11 = extractelement <16 x float> %1, i32 9
  %r9 = insertelement <16 x float> %r8, float %11, i32 9
  %12 = extractelement <16 x float> %1, i32 10
  %r10 = insertelement <16 x float> %r9, float %12, i32 10
  %13 = extractelement <16 x float> %1, i32 11
  %r11 = insertelement <16 x float> %r10, float %13, i32 11
  %14 = extractelement <16 x float> %1, i32 12
  %r12 = insertelement <16 x float> %r11, float %14, i32 12
  %15 = extractelement <16 x float> %1, i32 13
  %r13 = insertelement <16 x float> %r12, float %15, i32 13
  %16 = extractelement <16 x float> %1, i32 14
  %r14 = insertelement <16 x float> %r13, float %16, i32 14
  %17 = extractelement <16 x float> %1, i32 15
  %r15 = insertelement <16 x float> %r14, float %17, i32 15
  ret <16 x float> %r15
}

define <16 x float> @buildvector_div_16f32(<16 x float> %a, <16 x float> %b) {
  %1 = fdiv <16 x float> %a, %b
  %2 = extractelement <16 x float> %1, i32 0
  %r0 = insertelement <16 x float> undef, float %2, i32 0
  %3 = extractelement <16 x float> %1, i32 1
  %r1 = insertelement <16 x float> %r0, float %3, i32 1
  %4 = extractelement <16 x float> %1, i32 2
  %r2 = insertelement <16 x float> %r1, float %4, i32 2
  %5 = extractelement <16 x float> %1, i32 3
  %r3 = insertelement <16 x float> %r2, float %5, i32 3
  %6 = extractelement <16 x float> %1, i32 4
  %r4 = insertelement <16 x float> %r3, float %6, i32 4
  %7 = extractelement <16 x float> %1, i32 5
  %r5 = insertelement <16 x float> %r4, float %7, i32 5
  %8 = extractelement <16 x float> %1, i32 6
  %r6 = insertelement <16 x float> %r5, float %8, i32 6
  %9 = extractelement <16 x float> %1, i32 7
  %r7 = insertelement <16 x float> %r6, float %9, i32 7
  %10 = extractelement <16 x float> %1, i32 8
  %r8 = insertelement <16 x float> %r7, float %10, i32 8
  %11 = extractelement <16 x float> %1, i32 9
  %r9 = insertelement <16 x float> %r8, float %11, i32 9
  %12 = extractelement <16 x float> %1, i32 10
  %r10 = insertelement <16 x float> %r9, float %12, i32 10
  %13 = extractelement <16 x float> %1, i32 11
  %r11 = insertelement <16 x float> %r10, float %13, i32 11
  %14 = extractelement <16 x float> %1, i32 12
  %r12 = insertelement <16 x float> %r11, float %14, i32 12
  %15 = extractelement <16 x float> %1, i32 13
  %r13 = insertelement <16 x float> %r12, float %15, i32 13
  %16 = extractelement <16 x float> %1, i32 14
  %r14 = insertelement <16 x float> %r13, float %16, i32 14
  %17 = extractelement <16 x float> %1, i32 15
  %r15 = insertelement <16 x float> %r14, float %17, i32 15
  ret <16 x float> %r15
}
