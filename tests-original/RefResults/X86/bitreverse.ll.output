; ModuleID = '<stdin>'
source_filename = "<stdin>"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown"

@src64 = common global [4 x i64] zeroinitializer, align 32
@dst64 = common global [4 x i64] zeroinitializer, align 32
@src32 = common global [8 x i32] zeroinitializer, align 32
@dst32 = common global [8 x i32] zeroinitializer, align 32
@src16 = common global [16 x i16] zeroinitializer, align 32
@dst16 = common global [16 x i16] zeroinitializer, align 32
@src8 = common global [32 x i8] zeroinitializer, align 32
@dst8 = common global [32 x i8] zeroinitializer, align 32

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bitreverse.i64(i64) #0

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bitreverse.i32(i32) #0

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bitreverse.i16(i16) #0

; Function Attrs: nounwind readnone speculatable
declare i8 @llvm.bitreverse.i8(i8) #0

; Function Attrs: nounwind
define void @bitreverse_2i64() #1 {
  %1 = load <2 x i64>, <2 x i64>* bitcast ([4 x i64]* @src64 to <2 x i64>*), align 8
  %2 = call <2 x i64> @llvm.bitreverse.v2i64(<2 x i64> %1)
  store <2 x i64> %2, <2 x i64>* bitcast ([4 x i64]* @dst64 to <2 x i64>*), align 8
  ret void
}

; Function Attrs: nounwind
define void @bitreverse_4i64() #1 {
  %1 = load <2 x i64>, <2 x i64>* bitcast ([4 x i64]* @src64 to <2 x i64>*), align 4
  %2 = load <2 x i64>, <2 x i64>* bitcast (i64* getelementptr inbounds ([4 x i64], [4 x i64]* @src64, i64 0, i64 2) to <2 x i64>*), align 4
  %3 = call <2 x i64> @llvm.bitreverse.v2i64(<2 x i64> %1)
  %4 = call <2 x i64> @llvm.bitreverse.v2i64(<2 x i64> %2)
  store <2 x i64> %3, <2 x i64>* bitcast ([4 x i64]* @dst64 to <2 x i64>*), align 4
  store <2 x i64> %4, <2 x i64>* bitcast (i64* getelementptr inbounds ([4 x i64], [4 x i64]* @dst64, i64 0, i64 2) to <2 x i64>*), align 4
  ret void
}

; Function Attrs: nounwind
define void @bitreverse_4i32() #1 {
  %1 = load <4 x i32>, <4 x i32>* bitcast ([8 x i32]* @src32 to <4 x i32>*), align 4
  %2 = call <4 x i32> @llvm.bitreverse.v4i32(<4 x i32> %1)
  store <4 x i32> %2, <4 x i32>* bitcast ([8 x i32]* @dst32 to <4 x i32>*), align 4
  ret void
}

; Function Attrs: nounwind
define void @bitreverse_8i32() #1 {
  %1 = load <4 x i32>, <4 x i32>* bitcast ([8 x i32]* @src32 to <4 x i32>*), align 2
  %2 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @src32, i32 0, i64 4) to <4 x i32>*), align 2
  %3 = call <4 x i32> @llvm.bitreverse.v4i32(<4 x i32> %1)
  %4 = call <4 x i32> @llvm.bitreverse.v4i32(<4 x i32> %2)
  store <4 x i32> %3, <4 x i32>* bitcast ([8 x i32]* @dst32 to <4 x i32>*), align 2
  store <4 x i32> %4, <4 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @dst32, i32 0, i64 4) to <4 x i32>*), align 2
  ret void
}

; Function Attrs: nounwind
define void @bitreverse_8i16() #1 {
  %1 = load <8 x i16>, <8 x i16>* bitcast ([16 x i16]* @src16 to <8 x i16>*), align 2
  %2 = call <8 x i16> @llvm.bitreverse.v8i16(<8 x i16> %1)
  store <8 x i16> %2, <8 x i16>* bitcast ([16 x i16]* @dst16 to <8 x i16>*), align 2
  ret void
}

; Function Attrs: nounwind
define void @bitreverse_16i16() #1 {
  %1 = load <8 x i16>, <8 x i16>* bitcast ([16 x i16]* @src16 to <8 x i16>*), align 2
  %2 = load <8 x i16>, <8 x i16>* bitcast (i16* getelementptr inbounds ([16 x i16], [16 x i16]* @src16, i16 0, i64 8) to <8 x i16>*), align 2
  %3 = call <8 x i16> @llvm.bitreverse.v8i16(<8 x i16> %1)
  %4 = call <8 x i16> @llvm.bitreverse.v8i16(<8 x i16> %2)
  store <8 x i16> %3, <8 x i16>* bitcast ([16 x i16]* @dst16 to <8 x i16>*), align 2
  store <8 x i16> %4, <8 x i16>* bitcast (i16* getelementptr inbounds ([16 x i16], [16 x i16]* @dst16, i16 0, i64 8) to <8 x i16>*), align 2
  ret void
}

; Function Attrs: nounwind
define void @bitreverse_16i8() #1 {
  %1 = load <16 x i8>, <16 x i8>* bitcast ([32 x i8]* @src8 to <16 x i8>*), align 1
  %2 = call <16 x i8> @llvm.bitreverse.v16i8(<16 x i8> %1)
  store <16 x i8> %2, <16 x i8>* bitcast ([32 x i8]* @dst8 to <16 x i8>*), align 1
  ret void
}

; Function Attrs: nounwind
define void @bitreverse_32i8() #1 {
  %1 = load <16 x i8>, <16 x i8>* bitcast ([32 x i8]* @src8 to <16 x i8>*), align 1
  %2 = load <16 x i8>, <16 x i8>* bitcast (i8* getelementptr inbounds ([32 x i8], [32 x i8]* @src8, i8 0, i64 16) to <16 x i8>*), align 1
  %3 = call <16 x i8> @llvm.bitreverse.v16i8(<16 x i8> %1)
  %4 = call <16 x i8> @llvm.bitreverse.v16i8(<16 x i8> %2)
  store <16 x i8> %3, <16 x i8>* bitcast ([32 x i8]* @dst8 to <16 x i8>*), align 1
  store <16 x i8> %4, <16 x i8>* bitcast (i8* getelementptr inbounds ([32 x i8], [32 x i8]* @dst8, i8 0, i64 16) to <16 x i8>*), align 1
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <2 x i64> @llvm.bitreverse.v2i64(<2 x i64>) #0

; Function Attrs: nounwind readnone speculatable
declare <4 x i32> @llvm.bitreverse.v4i32(<4 x i32>) #0

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.bitreverse.v8i16(<8 x i16>) #0

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.bitreverse.v16i8(<16 x i8>) #0

attributes #0 = { nounwind readnone speculatable }
attributes #1 = { nounwind }
