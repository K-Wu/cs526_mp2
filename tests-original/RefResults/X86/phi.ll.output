; ModuleID = '<stdin>'
source_filename = "<stdin>"
target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128-n8:16:32-S128"
target triple = "i386-apple-macosx10.8.0"

define i32 @foo(double* nocapture %A, i32 %k) #0 {
entry:
  %tobool = icmp eq i32 %k, 0
  br i1 %tobool, label %if.else, label %if.end

if.else:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds double, double* %A, i64 10
  %0 = bitcast double* %arrayidx to <2 x double>*
  %1 = load <2 x double>, <2 x double>* %0, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %entry
  %2 = phi <2 x double> [ %1, %if.else ], [ <double 3.000000e+00, double 5.000000e+00>, %entry ]
  %3 = bitcast double* %A to <2 x double>*
  store <2 x double> %2, <2 x double>* %3, align 8
  ret i32 undef
}

define i32 @foo2(double* noalias nocapture %B, double* noalias nocapture %A, i32 %n, i32 %m) #0 {
entry:
  %0 = bitcast double* %A to <2 x double>*
  %1 = load <2 x double>, <2 x double>* %0, align 8
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.019 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %2 = phi <2 x double> [ %1, %entry ], [ %5, %for.body ]
  %3 = fadd <2 x double> <double 1.000000e+01, double 1.000000e+01>, %2
  %4 = fmul <2 x double> <double 4.000000e+00, double 4.000000e+00>, %3
  %5 = fadd <2 x double> <double 4.000000e+00, double 4.000000e+00>, %4
  %inc = add nsw i32 %i.019, 1
  %exitcond = icmp eq i32 %inc, 100
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %6 = bitcast double* %B to <2 x double>*
  store <2 x double> %5, <2 x double>* %6, align 8
  ret i32 0
}

define float @foo3(float* nocapture readonly %A) #0 {
entry:
  %0 = load float, float* %A, align 4
  %arrayidx1 = getelementptr inbounds float, float* %A, i64 1
  %1 = bitcast float* %arrayidx1 to <4 x float>*
  %2 = load <4 x float>, <4 x float>* %1, align 4
  %reorder_shuffle = shufflevector <4 x float> %2, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %3 = extractelement <4 x float> %reorder_shuffle, i32 3
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %R.052 = phi float [ %0, %entry ], [ %add6, %for.body ]
  %4 = phi float [ %3, %entry ], [ %12, %for.body ]
  %5 = phi float [ %0, %entry ], [ %14, %for.body ]
  %6 = phi <4 x float> [ %reorder_shuffle, %entry ], [ %19, %for.body ]
  %mul = fmul float %5, 7.000000e+00
  %add6 = fadd float %R.052, %mul
  %7 = add nsw i64 %indvars.iv, 2
  %arrayidx14 = getelementptr inbounds float, float* %A, i64 %7
  %8 = load float, float* %arrayidx14, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 3
  %arrayidx19 = getelementptr inbounds float, float* %A, i64 %indvars.iv.next
  %9 = bitcast float* %arrayidx19 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %reorder_shuffle1 = shufflevector <2 x float> %10, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %11 = insertelement <4 x float> <float 1.100000e+01, float 1.000000e+01, float 9.000000e+00, float undef>, float %4, i32 3
  %12 = extractelement <2 x float> %reorder_shuffle1, i32 0
  %13 = insertelement <4 x float> undef, float %12, i32 0
  %14 = extractelement <2 x float> %reorder_shuffle1, i32 1
  %15 = insertelement <4 x float> %13, float %14, i32 1
  %16 = insertelement <4 x float> %15, float %8, i32 2
  %17 = insertelement <4 x float> %16, float 8.000000e+00, i32 3
  %18 = fmul <4 x float> %11, %17
  %19 = fadd <4 x float> %6, %18
  %20 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %20, 121
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body
  %21 = extractelement <4 x float> %19, i32 3
  %add28 = fadd float %add6, %21
  %22 = extractelement <4 x float> %19, i32 2
  %add29 = fadd float %add28, %22
  %23 = extractelement <4 x float> %19, i32 1
  %add30 = fadd float %add29, %23
  %24 = extractelement <4 x float> %19, i32 0
  %add31 = fadd float %add30, %24
  ret float %add31
}

define float @sort_phi_type(float* nocapture readonly %A) #0 {
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %0 = phi <4 x float> [ <float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01>, %entry ], [ %9, %for.body ]
  %1 = extractelement <4 x float> %0, i32 0
  %2 = insertelement <4 x float> undef, float %1, i32 0
  %3 = extractelement <4 x float> %0, i32 1
  %4 = insertelement <4 x float> %2, float %3, i32 1
  %5 = extractelement <4 x float> %0, i32 3
  %6 = insertelement <4 x float> %4, float %5, i32 2
  %7 = extractelement <4 x float> %0, i32 2
  %8 = insertelement <4 x float> %6, float %7, i32 3
  %9 = fmul <4 x float> <float 8.000000e+00, float 9.000000e+00, float 1.000000e+02, float 1.110000e+02>, %8
  %indvars.iv.next = add nsw i64 %indvars.iv, 4
  %cmp = icmp slt i64 %indvars.iv.next, 128
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body
  %10 = extractelement <4 x float> %9, i32 0
  %11 = extractelement <4 x float> %9, i32 1
  %add29 = fadd float %10, %11
  %12 = extractelement <4 x float> %9, i32 2
  %add30 = fadd float %add29, %12
  %13 = extractelement <4 x float> %9, i32 3
  %add31 = fadd float %add30, %13
  ret float %add31
}

define void @test(x86_fp80* %i1, x86_fp80* %i2, x86_fp80* %o) #0 {
entry:
  %i1.0 = load x86_fp80, x86_fp80* %i1, align 16
  %i1.gep1 = getelementptr x86_fp80, x86_fp80* %i1, i64 1
  %i1.1 = load x86_fp80, x86_fp80* %i1.gep1, align 16
  br i1 undef, label %then, label %end

then:                                             ; preds = %entry
  %i2.gep0 = getelementptr inbounds x86_fp80, x86_fp80* %i2, i64 0
  %i2.0 = load x86_fp80, x86_fp80* %i2.gep0, align 16
  %i2.gep1 = getelementptr inbounds x86_fp80, x86_fp80* %i2, i64 1
  %i2.1 = load x86_fp80, x86_fp80* %i2.gep1, align 16
  br label %end

end:                                              ; preds = %then, %entry
  %phi0 = phi x86_fp80 [ %i1.0, %entry ], [ %i2.0, %then ]
  %phi1 = phi x86_fp80 [ %i1.1, %entry ], [ %i2.1, %then ]
  store x86_fp80 %phi0, x86_fp80* %o, align 16
  %o.gep1 = getelementptr inbounds x86_fp80, x86_fp80* %o, i64 1
  store x86_fp80 %phi1, x86_fp80* %o.gep1, align 16
  ret void
}

attributes #0 = { "target-cpu"="corei7-avx" }
