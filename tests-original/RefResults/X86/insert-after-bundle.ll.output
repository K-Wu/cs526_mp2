; ModuleID = '<stdin>'
source_filename = "<stdin>"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ib = local_unnamed_addr global [64 x i32] [i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0], align 16
@ia = common local_unnamed_addr global [64 x i32] zeroinitializer, align 16

define zeroext i8 @foo(i32 %x, i32 %y, i32 %a, i32 %b) local_unnamed_addr {
entry:
  %cmp = icmp slt i32 %x, %y
  %b.a = select i1 %cmp, i32 %b, i32 %a
  %retval.0 = trunc i32 %b.a to i8
  ret i8 %retval.0
}

define void @bar(i8* noalias nocapture readonly %a, i8* noalias nocapture readonly %b, i8* noalias nocapture readonly %c, i8* noalias nocapture readonly %d, i8* noalias nocapture %e, i32 %w) local_unnamed_addr {
entry:
  %0 = insertelement <16 x i32> undef, i32 %w, i32 0
  %1 = insertelement <16 x i32> %0, i32 %w, i32 1
  %2 = insertelement <16 x i32> %1, i32 %w, i32 2
  %3 = insertelement <16 x i32> %2, i32 %w, i32 3
  %4 = insertelement <16 x i32> %3, i32 %w, i32 4
  %5 = insertelement <16 x i32> %4, i32 %w, i32 5
  %6 = insertelement <16 x i32> %5, i32 %w, i32 6
  %7 = insertelement <16 x i32> %6, i32 %w, i32 7
  %8 = insertelement <16 x i32> %7, i32 %w, i32 8
  %9 = insertelement <16 x i32> %8, i32 %w, i32 9
  %10 = insertelement <16 x i32> %9, i32 %w, i32 10
  %11 = insertelement <16 x i32> %10, i32 %w, i32 11
  %12 = insertelement <16 x i32> %11, i32 %w, i32 12
  %13 = insertelement <16 x i32> %12, i32 %w, i32 13
  %14 = insertelement <16 x i32> %13, i32 %w, i32 14
  %15 = insertelement <16 x i32> %14, i32 %w, i32 15
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.0356 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %a.addr.0355 = phi i8* [ %a, %entry ], [ %add.ptr, %for.body ]
  %e.addr.0354 = phi i8* [ %e, %entry ], [ %add.ptr192, %for.body ]
  %d.addr.0353 = phi i8* [ %d, %entry ], [ %add.ptr191, %for.body ]
  %c.addr.0352 = phi i8* [ %c, %entry ], [ %add.ptr190, %for.body ]
  %b.addr.0351 = phi i8* [ %b, %entry ], [ %add.ptr189, %for.body ]
  %arrayidx9 = getelementptr inbounds i8, i8* %c.addr.0352, i64 1
  %arrayidx11 = getelementptr inbounds i8, i8* %d.addr.0353, i64 1
  %arrayidx13 = getelementptr inbounds i8, i8* %a.addr.0355, i64 1
  %arrayidx16 = getelementptr inbounds i8, i8* %b.addr.0351, i64 1
  %arrayidx20 = getelementptr inbounds i8, i8* %e.addr.0354, i64 1
  %arrayidx21 = getelementptr inbounds i8, i8* %c.addr.0352, i64 2
  %arrayidx23 = getelementptr inbounds i8, i8* %d.addr.0353, i64 2
  %arrayidx25 = getelementptr inbounds i8, i8* %a.addr.0355, i64 2
  %arrayidx28 = getelementptr inbounds i8, i8* %b.addr.0351, i64 2
  %arrayidx32 = getelementptr inbounds i8, i8* %e.addr.0354, i64 2
  %arrayidx33 = getelementptr inbounds i8, i8* %c.addr.0352, i64 3
  %arrayidx35 = getelementptr inbounds i8, i8* %d.addr.0353, i64 3
  %arrayidx37 = getelementptr inbounds i8, i8* %a.addr.0355, i64 3
  %arrayidx40 = getelementptr inbounds i8, i8* %b.addr.0351, i64 3
  %arrayidx44 = getelementptr inbounds i8, i8* %e.addr.0354, i64 3
  %arrayidx45 = getelementptr inbounds i8, i8* %c.addr.0352, i64 4
  %arrayidx47 = getelementptr inbounds i8, i8* %d.addr.0353, i64 4
  %arrayidx49 = getelementptr inbounds i8, i8* %a.addr.0355, i64 4
  %arrayidx52 = getelementptr inbounds i8, i8* %b.addr.0351, i64 4
  %arrayidx56 = getelementptr inbounds i8, i8* %e.addr.0354, i64 4
  %arrayidx57 = getelementptr inbounds i8, i8* %c.addr.0352, i64 5
  %arrayidx59 = getelementptr inbounds i8, i8* %d.addr.0353, i64 5
  %arrayidx61 = getelementptr inbounds i8, i8* %a.addr.0355, i64 5
  %arrayidx64 = getelementptr inbounds i8, i8* %b.addr.0351, i64 5
  %arrayidx68 = getelementptr inbounds i8, i8* %e.addr.0354, i64 5
  %arrayidx69 = getelementptr inbounds i8, i8* %c.addr.0352, i64 6
  %arrayidx71 = getelementptr inbounds i8, i8* %d.addr.0353, i64 6
  %arrayidx73 = getelementptr inbounds i8, i8* %a.addr.0355, i64 6
  %arrayidx76 = getelementptr inbounds i8, i8* %b.addr.0351, i64 6
  %arrayidx80 = getelementptr inbounds i8, i8* %e.addr.0354, i64 6
  %arrayidx81 = getelementptr inbounds i8, i8* %c.addr.0352, i64 7
  %arrayidx83 = getelementptr inbounds i8, i8* %d.addr.0353, i64 7
  %arrayidx85 = getelementptr inbounds i8, i8* %a.addr.0355, i64 7
  %arrayidx88 = getelementptr inbounds i8, i8* %b.addr.0351, i64 7
  %arrayidx92 = getelementptr inbounds i8, i8* %e.addr.0354, i64 7
  %arrayidx93 = getelementptr inbounds i8, i8* %c.addr.0352, i64 8
  %arrayidx95 = getelementptr inbounds i8, i8* %d.addr.0353, i64 8
  %arrayidx97 = getelementptr inbounds i8, i8* %a.addr.0355, i64 8
  %arrayidx100 = getelementptr inbounds i8, i8* %b.addr.0351, i64 8
  %arrayidx104 = getelementptr inbounds i8, i8* %e.addr.0354, i64 8
  %arrayidx105 = getelementptr inbounds i8, i8* %c.addr.0352, i64 9
  %arrayidx107 = getelementptr inbounds i8, i8* %d.addr.0353, i64 9
  %arrayidx109 = getelementptr inbounds i8, i8* %a.addr.0355, i64 9
  %arrayidx112 = getelementptr inbounds i8, i8* %b.addr.0351, i64 9
  %arrayidx116 = getelementptr inbounds i8, i8* %e.addr.0354, i64 9
  %arrayidx117 = getelementptr inbounds i8, i8* %c.addr.0352, i64 10
  %arrayidx119 = getelementptr inbounds i8, i8* %d.addr.0353, i64 10
  %arrayidx121 = getelementptr inbounds i8, i8* %a.addr.0355, i64 10
  %arrayidx124 = getelementptr inbounds i8, i8* %b.addr.0351, i64 10
  %arrayidx128 = getelementptr inbounds i8, i8* %e.addr.0354, i64 10
  %arrayidx129 = getelementptr inbounds i8, i8* %c.addr.0352, i64 11
  %arrayidx131 = getelementptr inbounds i8, i8* %d.addr.0353, i64 11
  %arrayidx133 = getelementptr inbounds i8, i8* %a.addr.0355, i64 11
  %arrayidx136 = getelementptr inbounds i8, i8* %b.addr.0351, i64 11
  %arrayidx140 = getelementptr inbounds i8, i8* %e.addr.0354, i64 11
  %arrayidx141 = getelementptr inbounds i8, i8* %c.addr.0352, i64 12
  %arrayidx143 = getelementptr inbounds i8, i8* %d.addr.0353, i64 12
  %arrayidx145 = getelementptr inbounds i8, i8* %a.addr.0355, i64 12
  %arrayidx148 = getelementptr inbounds i8, i8* %b.addr.0351, i64 12
  %arrayidx152 = getelementptr inbounds i8, i8* %e.addr.0354, i64 12
  %arrayidx153 = getelementptr inbounds i8, i8* %c.addr.0352, i64 13
  %arrayidx155 = getelementptr inbounds i8, i8* %d.addr.0353, i64 13
  %arrayidx157 = getelementptr inbounds i8, i8* %a.addr.0355, i64 13
  %arrayidx160 = getelementptr inbounds i8, i8* %b.addr.0351, i64 13
  %arrayidx164 = getelementptr inbounds i8, i8* %e.addr.0354, i64 13
  %arrayidx165 = getelementptr inbounds i8, i8* %c.addr.0352, i64 14
  %arrayidx167 = getelementptr inbounds i8, i8* %d.addr.0353, i64 14
  %arrayidx169 = getelementptr inbounds i8, i8* %a.addr.0355, i64 14
  %arrayidx172 = getelementptr inbounds i8, i8* %b.addr.0351, i64 14
  %arrayidx176 = getelementptr inbounds i8, i8* %e.addr.0354, i64 14
  %arrayidx177 = getelementptr inbounds i8, i8* %c.addr.0352, i64 15
  %16 = bitcast i8* %c.addr.0352 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %arrayidx179 = getelementptr inbounds i8, i8* %d.addr.0353, i64 15
  %18 = bitcast i8* %d.addr.0353 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 1
  %arrayidx181 = getelementptr inbounds i8, i8* %a.addr.0355, i64 15
  %20 = bitcast i8* %a.addr.0355 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %arrayidx184 = getelementptr inbounds i8, i8* %b.addr.0351, i64 15
  %22 = bitcast i8* %b.addr.0351 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = icmp ult <16 x i8> %17, %19
  %25 = select <16 x i1> %24, <16 x i8> %23, <16 x i8> %21
  %26 = zext <16 x i8> %25 to <16 x i32>
  %27 = mul <16 x i32> %15, %26
  %28 = trunc <16 x i32> %27 to <16 x i8>
  %arrayidx188 = getelementptr inbounds i8, i8* %e.addr.0354, i64 15
  %29 = bitcast i8* %e.addr.0354 to <16 x i8>*
  store <16 x i8> %28, <16 x i8>* %29, align 1
  %inc = add nuw nsw i32 %i.0356, 1
  %add.ptr = getelementptr inbounds i8, i8* %a.addr.0355, i64 16
  %add.ptr189 = getelementptr inbounds i8, i8* %b.addr.0351, i64 16
  %add.ptr190 = getelementptr inbounds i8, i8* %c.addr.0352, i64 16
  %add.ptr191 = getelementptr inbounds i8, i8* %d.addr.0353, i64 16
  %add.ptr192 = getelementptr inbounds i8, i8* %e.addr.0354, i64 16
  %exitcond = icmp eq i32 %inc, 8
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret void
}

define i32 @foo1() local_unnamed_addr {
entry:
  %0 = load <4 x i32>, <4 x i32>* bitcast ([64 x i32]* @ib to <4 x i32>*), align 16
  %1 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %0
  store <4 x i32> %1, <4 x i32>* bitcast ([64 x i32]* @ia to <4 x i32>*), align 16
  %2 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 4) to <4 x i32>*), align 16
  %3 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %2
  store <4 x i32> %3, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 4) to <4 x i32>*), align 16
  %4 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 8) to <4 x i32>*), align 16
  %5 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %4
  store <4 x i32> %5, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 8) to <4 x i32>*), align 16
  %6 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 12) to <4 x i32>*), align 16
  %7 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %6
  store <4 x i32> %7, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 12) to <4 x i32>*), align 16
  %8 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 16) to <4 x i32>*), align 16
  %9 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %8
  store <4 x i32> %9, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 16) to <4 x i32>*), align 16
  %10 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 20) to <4 x i32>*), align 16
  %11 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %10
  store <4 x i32> %11, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 20) to <4 x i32>*), align 16
  %12 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 24) to <4 x i32>*), align 16
  %13 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %12
  store <4 x i32> %13, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 24) to <4 x i32>*), align 16
  %14 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 28) to <4 x i32>*), align 16
  %15 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %14
  store <4 x i32> %15, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 28) to <4 x i32>*), align 16
  %16 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 32) to <4 x i32>*), align 16
  %17 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %16
  store <4 x i32> %17, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 32) to <4 x i32>*), align 16
  %18 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 36) to <4 x i32>*), align 16
  %19 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %18
  store <4 x i32> %19, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 36) to <4 x i32>*), align 16
  %20 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 40) to <4 x i32>*), align 16
  %21 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %20
  store <4 x i32> %21, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 40) to <4 x i32>*), align 16
  %22 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 44) to <4 x i32>*), align 16
  %23 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %22
  store <4 x i32> %23, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 44) to <4 x i32>*), align 16
  %24 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 48) to <4 x i32>*), align 16
  %25 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %24
  store <4 x i32> %25, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 48) to <4 x i32>*), align 16
  %26 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 52) to <4 x i32>*), align 16
  %27 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %26
  store <4 x i32> %27, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 52) to <4 x i32>*), align 16
  %28 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 56) to <4 x i32>*), align 16
  %29 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %28
  store <4 x i32> %29, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 56) to <4 x i32>*), align 16
  %30 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ib, i64 0, i64 60) to <4 x i32>*), align 16
  %31 = xor <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, %30
  store <4 x i32> %31, <4 x i32>* bitcast (i32* getelementptr inbounds ([64 x i32], [64 x i32]* @ia, i64 0, i64 60) to <4 x i32>*), align 16
  br label %for.body5

for.cond3:                                        ; preds = %for.body5
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp4 = icmp ult i64 %indvars.iv, 63
  br i1 %cmp4, label %for.body5, label %for.end14

for.body5:                                        ; preds = %for.cond3, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.cond3 ]
  %arrayidx7 = getelementptr inbounds [64 x i32], [64 x i32]* @ia, i64 0, i64 %indvars.iv
  %32 = load i32, i32* %arrayidx7, align 4
  %arrayidx9 = getelementptr inbounds [64 x i32], [64 x i32]* @ib, i64 0, i64 %indvars.iv
  %33 = load i32, i32* %arrayidx9, align 4
  %neg10 = xor i32 %33, -1
  %cmp11 = icmp eq i32 %32, %neg10
  br i1 %cmp11, label %for.cond3, label %if.then

if.then:                                          ; preds = %for.body5
  tail call void @abort()
  unreachable

for.end14:                                        ; preds = %for.cond3
  ret i32 0
}

declare void @abort()
