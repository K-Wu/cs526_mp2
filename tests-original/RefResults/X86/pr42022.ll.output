; ModuleID = '<stdin>'
source_filename = "<stdin>"
target triple = "x86_64-unknown-linux-gnu"

%StructTy = type { float, float }
%Struct2Ty = type { %Struct1Ty, %Struct1Ty }
%Struct1Ty = type { i16, i16 }

define { <2 x float>, <2 x float> } @StructOfVectors(float* %Ptr) {
  %GEP0 = getelementptr inbounds float, float* %Ptr, i64 0
  %GEP1 = getelementptr inbounds float, float* %Ptr, i64 1
  %1 = bitcast float* %GEP0 to <2 x float>*
  %2 = load <2 x float>, <2 x float>* %1, align 4
  %GEP2 = getelementptr inbounds float, float* %Ptr, i64 2
  %GEP3 = getelementptr inbounds float, float* %Ptr, i64 3
  %3 = bitcast float* %GEP2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = fadd fast <2 x float> <float 1.100000e+01, float 1.200000e+01>, %2
  %6 = fadd fast <2 x float> <float 1.300000e+01, float 1.400000e+01>, %4
  %7 = extractelement <2 x float> %5, i32 0
  %VecIn0 = insertelement <2 x float> undef, float %7, i64 0
  %8 = extractelement <2 x float> %5, i32 1
  %VecIn1 = insertelement <2 x float> %VecIn0, float %8, i64 1
  %9 = extractelement <2 x float> %6, i32 0
  %VecIn2 = insertelement <2 x float> undef, float %9, i64 0
  %10 = extractelement <2 x float> %6, i32 1
  %VecIn3 = insertelement <2 x float> %VecIn2, float %10, i64 1
  %Ret0 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %VecIn1, 0
  %Ret1 = insertvalue { <2 x float>, <2 x float> } %Ret0, <2 x float> %VecIn3, 1
  ret { <2 x float>, <2 x float> } %Ret1
}

define [2 x %StructTy] @ArrayOfStruct(float* %Ptr) {
  %GEP0 = getelementptr inbounds float, float* %Ptr, i64 0
  %L0 = load float, float* %GEP0
  %GEP1 = getelementptr inbounds float, float* %Ptr, i64 1
  %L1 = load float, float* %GEP1
  %GEP2 = getelementptr inbounds float, float* %Ptr, i64 2
  %L2 = load float, float* %GEP2
  %GEP3 = getelementptr inbounds float, float* %Ptr, i64 3
  %L3 = load float, float* %GEP3
  %Fadd0 = fadd fast float %L0, 1.100000e+01
  %Fadd1 = fadd fast float %L1, 1.200000e+01
  %Fadd2 = fadd fast float %L2, 1.300000e+01
  %Fadd3 = fadd fast float %L3, 1.400000e+01
  %StructIn0 = insertvalue %StructTy undef, float %Fadd0, 0
  %StructIn1 = insertvalue %StructTy %StructIn0, float %Fadd1, 1
  %StructIn2 = insertvalue %StructTy undef, float %Fadd2, 0
  %StructIn3 = insertvalue %StructTy %StructIn2, float %Fadd3, 1
  %Ret0 = insertvalue [2 x %StructTy] undef, %StructTy %StructIn1, 0
  %Ret1 = insertvalue [2 x %StructTy] %Ret0, %StructTy %StructIn3, 1
  ret [2 x %StructTy] %Ret1
}

define { %StructTy, %StructTy } @StructOfStruct(float* %Ptr) {
  %GEP0 = getelementptr inbounds float, float* %Ptr, i64 0
  %L0 = load float, float* %GEP0
  %GEP1 = getelementptr inbounds float, float* %Ptr, i64 1
  %L1 = load float, float* %GEP1
  %GEP2 = getelementptr inbounds float, float* %Ptr, i64 2
  %L2 = load float, float* %GEP2
  %GEP3 = getelementptr inbounds float, float* %Ptr, i64 3
  %L3 = load float, float* %GEP3
  %Fadd0 = fadd fast float %L0, 1.100000e+01
  %Fadd1 = fadd fast float %L1, 1.200000e+01
  %Fadd2 = fadd fast float %L2, 1.300000e+01
  %Fadd3 = fadd fast float %L3, 1.400000e+01
  %StructIn0 = insertvalue %StructTy undef, float %Fadd0, 0
  %StructIn1 = insertvalue %StructTy %StructIn0, float %Fadd1, 1
  %StructIn2 = insertvalue %StructTy undef, float %Fadd2, 0
  %StructIn3 = insertvalue %StructTy %StructIn2, float %Fadd3, 1
  %Ret0 = insertvalue { %StructTy, %StructTy } undef, %StructTy %StructIn1, 0
  %Ret1 = insertvalue { %StructTy, %StructTy } %Ret0, %StructTy %StructIn3, 1
  ret { %StructTy, %StructTy } %Ret1
}

define { %StructTy, float, float } @NonHomogeneousStruct(float* %Ptr) {
  %GEP0 = getelementptr inbounds float, float* %Ptr, i64 0
  %L0 = load float, float* %GEP0
  %GEP1 = getelementptr inbounds float, float* %Ptr, i64 1
  %L1 = load float, float* %GEP1
  %GEP2 = getelementptr inbounds float, float* %Ptr, i64 2
  %L2 = load float, float* %GEP2
  %GEP3 = getelementptr inbounds float, float* %Ptr, i64 3
  %L3 = load float, float* %GEP3
  %Fadd0 = fadd fast float %L0, 1.100000e+01
  %Fadd1 = fadd fast float %L1, 1.200000e+01
  %Fadd2 = fadd fast float %L2, 1.300000e+01
  %Fadd3 = fadd fast float %L3, 1.400000e+01
  %StructIn0 = insertvalue %StructTy undef, float %Fadd0, 0
  %StructIn1 = insertvalue %StructTy %StructIn0, float %Fadd1, 1
  %Ret0 = insertvalue { %StructTy, float, float } undef, %StructTy %StructIn1, 0
  %Ret1 = insertvalue { %StructTy, float, float } %Ret0, float %Fadd2, 1
  %Ret2 = insertvalue { %StructTy, float, float } %Ret1, float %Fadd3, 2
  ret { %StructTy, float, float } %Ret2
}

define { %Struct2Ty, %Struct2Ty } @StructOfStructOfStruct(i16* %Ptr) {
  %GEP0 = getelementptr inbounds i16, i16* %Ptr, i64 0
  %L0 = load i16, i16* %GEP0
  %GEP1 = getelementptr inbounds i16, i16* %Ptr, i64 1
  %L1 = load i16, i16* %GEP1
  %GEP2 = getelementptr inbounds i16, i16* %Ptr, i64 2
  %L2 = load i16, i16* %GEP2
  %GEP3 = getelementptr inbounds i16, i16* %Ptr, i64 3
  %L3 = load i16, i16* %GEP3
  %GEP4 = getelementptr inbounds i16, i16* %Ptr, i64 4
  %L4 = load i16, i16* %GEP4
  %GEP5 = getelementptr inbounds i16, i16* %Ptr, i64 5
  %L5 = load i16, i16* %GEP5
  %GEP6 = getelementptr inbounds i16, i16* %Ptr, i64 6
  %L6 = load i16, i16* %GEP6
  %GEP7 = getelementptr inbounds i16, i16* %Ptr, i64 7
  %L7 = load i16, i16* %GEP7
  %Fadd0 = add i16 %L0, 1
  %Fadd1 = add i16 %L1, 2
  %Fadd2 = add i16 %L2, 3
  %Fadd3 = add i16 %L3, 4
  %Fadd4 = add i16 %L4, 5
  %Fadd5 = add i16 %L5, 6
  %Fadd6 = add i16 %L6, 7
  %Fadd7 = add i16 %L7, 8
  %StructIn0 = insertvalue %Struct1Ty undef, i16 %Fadd0, 0
  %StructIn1 = insertvalue %Struct1Ty %StructIn0, i16 %Fadd1, 1
  %StructIn2 = insertvalue %Struct1Ty undef, i16 %Fadd2, 0
  %StructIn3 = insertvalue %Struct1Ty %StructIn2, i16 %Fadd3, 1
  %StructIn4 = insertvalue %Struct1Ty undef, i16 %Fadd4, 0
  %StructIn5 = insertvalue %Struct1Ty %StructIn4, i16 %Fadd5, 1
  %StructIn6 = insertvalue %Struct1Ty undef, i16 %Fadd6, 0
  %StructIn7 = insertvalue %Struct1Ty %StructIn6, i16 %Fadd7, 1
  %Struct2In0 = insertvalue %Struct2Ty undef, %Struct1Ty %StructIn1, 0
  %Struct2In1 = insertvalue %Struct2Ty %Struct2In0, %Struct1Ty %StructIn3, 1
  %Struct2In2 = insertvalue %Struct2Ty undef, %Struct1Ty %StructIn5, 0
  %Struct2In3 = insertvalue %Struct2Ty %Struct2In2, %Struct1Ty %StructIn7, 1
  %Ret0 = insertvalue { %Struct2Ty, %Struct2Ty } undef, %Struct2Ty %Struct2In1, 0
  %Ret1 = insertvalue { %Struct2Ty, %Struct2Ty } %Ret0, %Struct2Ty %Struct2In3, 1
  ret { %Struct2Ty, %Struct2Ty } %Ret1
}
