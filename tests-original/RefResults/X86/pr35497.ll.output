; ModuleID = '<stdin>'
source_filename = "<stdin>"
target triple = "x86_64-unknown-linux-gnu"

%class.1 = type { %class.2 }
%class.2 = type { %class.3 }
%class.3 = type { %struct.1, i64 }
%struct.1 = type { [8 x i64] }

$_ZN1C10SwitchModeEv = comdat any

define void @_ZN1C10SwitchModeEv() local_unnamed_addr comdat align 2 {
for.body.lr.ph.i:
  %or.1 = or i64 undef, 1
  store i64 %or.1, i64* undef, align 8
  %foo.1 = getelementptr inbounds %class.1, %class.1* undef, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %foo.2 = getelementptr inbounds %class.1, %class.1* undef, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %0 = bitcast i64* %foo.1 to <2 x i64>*
  %1 = load <2 x i64>, <2 x i64>* %0, align 8
  %bar5 = load i64, i64* undef, align 8
  %2 = insertelement <2 x i64> undef, i64 %or.1, i32 0
  %3 = insertelement <2 x i64> %2, i64 %bar5, i32 1
  %4 = and <2 x i64> %3, %1
  %bar3 = getelementptr inbounds %class.2, %class.2* undef, i64 0, i32 0, i32 0, i32 0, i64 0
  %bar4 = getelementptr inbounds %class.2, %class.2* undef, i64 0, i32 0, i32 0, i32 0, i64 1
  %5 = bitcast i64* %bar3 to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %5, align 8
  ret void
}

define void @pr35497() local_unnamed_addr {
entry:
  %0 = load i64, i64* undef, align 1
  %add = add i64 undef, undef
  store i64 %add, i64* undef, align 1
  %arrayidx2.1 = getelementptr inbounds [0 x i64], [0 x i64]* undef, i64 0, i64 5
  %1 = insertelement <2 x i64> undef, i64 %0, i32 1
  %2 = shl <2 x i64> %1, <i64 2, i64 2>
  %3 = and <2 x i64> <i64 20, i64 20>, %2
  %arrayidx2.2 = getelementptr inbounds [0 x i64], [0 x i64]* undef, i64 0, i64 4
  %4 = add nuw nsw <2 x i64> %3, zeroinitializer
  %arrayidx2.5 = getelementptr inbounds [0 x i64], [0 x i64]* undef, i64 0, i64 1
  %5 = extractelement <2 x i64> %4, i32 1
  %6 = insertelement <2 x i64> undef, i64 %5, i32 0
  %7 = insertelement <2 x i64> %6, i64 %add, i32 1
  %8 = shl <2 x i64> %7, <i64 2, i64 2>
  %9 = and <2 x i64> <i64 20, i64 20>, %8
  %arrayidx2.6 = getelementptr inbounds [0 x i64], [0 x i64]* undef, i64 0, i64 0
  %10 = bitcast i64* %arrayidx2.6 to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %10, align 1
  %11 = lshr <2 x i64> %4, <i64 6, i64 6>
  %12 = add nuw nsw <2 x i64> %9, %11
  %13 = bitcast i64* %arrayidx2.2 to <2 x i64>*
  store <2 x i64> %12, <2 x i64>* %13, align 1
  ret void
}
