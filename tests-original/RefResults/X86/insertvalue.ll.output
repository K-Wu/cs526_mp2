; ModuleID = '<stdin>'
source_filename = "<stdin>"
target triple = "x86_64-unknown-linux-gnu"

%pseudovec = type { float, float, float, float }

define void @julia_2xdouble([2 x double]* sret, [2 x double]*, [2 x double]*, [2 x double]*) #0 {
top:
  %px0 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 0
  %py0 = getelementptr inbounds [2 x double], [2 x double]* %3, i64 0, i64 0
  %px1 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 1
  %4 = bitcast double* %px0 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 4
  %py1 = getelementptr inbounds [2 x double], [2 x double]* %3, i64 0, i64 1
  %6 = bitcast double* %py0 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 4
  %8 = fmul <2 x double> %5, %7
  %pz0 = getelementptr inbounds [2 x double], [2 x double]* %1, i64 0, i64 0
  %pz1 = getelementptr inbounds [2 x double], [2 x double]* %1, i64 0, i64 1
  %9 = bitcast double* %pz0 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 4
  %11 = fadd <2 x double> %8, %10
  %12 = extractelement <2 x double> %11, i32 0
  %i0 = insertvalue [2 x double] undef, double %12, 0
  %13 = extractelement <2 x double> %11, i32 1
  %i1 = insertvalue [2 x double] %i0, double %13, 1
  store [2 x double] %i1, [2 x double]* %0, align 4
  ret void
}

define void @julia_4xfloat([4 x float]* sret, [4 x float]*, [4 x float]*, [4 x float]*) #0 {
top:
  %px0 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 0
  %py0 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 0
  %px1 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 1
  %py1 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 1
  %px2 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 2
  %py2 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 2
  %px3 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 3
  %4 = bitcast float* %px0 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 4
  %py3 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 3
  %6 = bitcast float* %py0 to <4 x float>*
  %7 = load <4 x float>, <4 x float>* %6, align 4
  %8 = fmul <4 x float> %5, %7
  %pz0 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, i64 0
  %pz1 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, i64 1
  %pz2 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, i64 2
  %pz3 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, i64 3
  %9 = bitcast float* %pz0 to <4 x float>*
  %10 = load <4 x float>, <4 x float>* %9, align 4
  %11 = fadd <4 x float> %8, %10
  %12 = extractelement <4 x float> %11, i32 0
  %i0 = insertvalue [4 x float] undef, float %12, 0
  %13 = extractelement <4 x float> %11, i32 1
  %i1 = insertvalue [4 x float] %i0, float %13, 1
  %14 = extractelement <4 x float> %11, i32 2
  %i2 = insertvalue [4 x float] %i1, float %14, 2
  %15 = extractelement <4 x float> %11, i32 3
  %i3 = insertvalue [4 x float] %i2, float %15, 3
  store [4 x float] %i3, [4 x float]* %0, align 4
  ret void
}

define void @julia_load_array_of_float([4 x float]* %a, [4 x float]* %b, [4 x float]* %c) #0 {
top:
  %0 = bitcast [4 x float]* %a to <4 x float>*
  %1 = load <4 x float>, <4 x float>* %0, align 4
  %a_arr = load [4 x float], [4 x float]* %a, align 4
  %2 = bitcast [4 x float]* %b to <4 x float>*
  %3 = load <4 x float>, <4 x float>* %2, align 4
  %b_arr = load [4 x float], [4 x float]* %b, align 4
  %4 = fsub <4 x float> %1, %3
  %5 = extractelement <4 x float> %4, i32 0
  %c_arr0 = insertvalue [4 x float] undef, float %5, 0
  %6 = extractelement <4 x float> %4, i32 1
  %c_arr1 = insertvalue [4 x float] %c_arr0, float %6, 1
  %7 = extractelement <4 x float> %4, i32 2
  %c_arr2 = insertvalue [4 x float] %c_arr1, float %7, 2
  %8 = extractelement <4 x float> %4, i32 3
  %c_arr3 = insertvalue [4 x float] %c_arr2, float %8, 3
  store [4 x float] %c_arr3, [4 x float]* %c, align 4
  ret void
}

define void @julia_load_array_of_i32([4 x i32]* %a, [4 x i32]* %b, [4 x i32]* %c) #0 {
top:
  %0 = bitcast [4 x i32]* %a to <4 x i32>*
  %1 = load <4 x i32>, <4 x i32>* %0, align 4
  %a_arr = load [4 x i32], [4 x i32]* %a, align 4
  %2 = bitcast [4 x i32]* %b to <4 x i32>*
  %3 = load <4 x i32>, <4 x i32>* %2, align 4
  %b_arr = load [4 x i32], [4 x i32]* %b, align 4
  %4 = sub <4 x i32> %1, %3
  %5 = extractelement <4 x i32> %4, i32 0
  %c_arr0 = insertvalue [4 x i32] undef, i32 %5, 0
  %6 = extractelement <4 x i32> %4, i32 1
  %c_arr1 = insertvalue [4 x i32] %c_arr0, i32 %6, 1
  %7 = extractelement <4 x i32> %4, i32 2
  %c_arr2 = insertvalue [4 x i32] %c_arr1, i32 %7, 2
  %8 = extractelement <4 x i32> %4, i32 3
  %c_arr3 = insertvalue [4 x i32] %c_arr2, i32 %8, 3
  store [4 x i32] %c_arr3, [4 x i32]* %c, align 4
  ret void
}

define void @julia_load_array_of_i16([4 x i16]* %a, [4 x i16]* %b, [4 x i16]* %c) #0 {
top:
  %a_arr = load [4 x i16], [4 x i16]* %a, align 4
  %a0 = extractvalue [4 x i16] %a_arr, 0
  %a2 = extractvalue [4 x i16] %a_arr, 2
  %a1 = extractvalue [4 x i16] %a_arr, 1
  %b_arr = load [4 x i16], [4 x i16]* %b, align 4
  %b0 = extractvalue [4 x i16] %b_arr, 0
  %b2 = extractvalue [4 x i16] %b_arr, 2
  %b1 = extractvalue [4 x i16] %b_arr, 1
  %a3 = extractvalue [4 x i16] %a_arr, 3
  %c1 = sub i16 %a1, %b1
  %b3 = extractvalue [4 x i16] %b_arr, 3
  %c0 = sub i16 %a0, %b0
  %c2 = sub i16 %a2, %b2
  %c_arr0 = insertvalue [4 x i16] undef, i16 %c0, 0
  %c_arr1 = insertvalue [4 x i16] %c_arr0, i16 %c1, 1
  %c3 = sub i16 %a3, %b3
  %c_arr2 = insertvalue [4 x i16] %c_arr1, i16 %c2, 2
  %c_arr3 = insertvalue [4 x i16] %c_arr2, i16 %c3, 3
  store [4 x i16] %c_arr3, [4 x i16]* %c, align 4
  ret void
}

define void @julia_load_struct_of_float(%pseudovec* %a, %pseudovec* %b, %pseudovec* %c) #0 {
top:
  %0 = bitcast %pseudovec* %a to <4 x float>*
  %1 = load <4 x float>, <4 x float>* %0, align 4
  %a_struct = load %pseudovec, %pseudovec* %a, align 4
  %2 = bitcast %pseudovec* %b to <4 x float>*
  %3 = load <4 x float>, <4 x float>* %2, align 4
  %b_struct = load %pseudovec, %pseudovec* %b, align 4
  %4 = fsub <4 x float> %1, %3
  %5 = extractelement <4 x float> %4, i32 0
  %c_struct0 = insertvalue %pseudovec undef, float %5, 0
  %6 = extractelement <4 x float> %4, i32 1
  %c_struct1 = insertvalue %pseudovec %c_struct0, float %6, 1
  %7 = extractelement <4 x float> %4, i32 2
  %c_struct2 = insertvalue %pseudovec %c_struct1, float %7, 2
  %8 = extractelement <4 x float> %4, i32 3
  %c_struct3 = insertvalue %pseudovec %c_struct2, float %8, 3
  store %pseudovec %c_struct3, %pseudovec* %c, align 4
  ret void
}

attributes #0 = { "target-cpu"="corei7-avx" }
