; ModuleID = '<stdin>'
source_filename = "<stdin>"
target triple = "x86_64-unknown-linux-gnu"

define i32 @foo(i32* nocapture readonly %arr, i32 %a1, i32 %a2, i32 %a3, i32 %a4, i32 %a5, i32 %a6, i32 %a7, i32 %a8) #0 {
entry:
  %arrayidx = getelementptr inbounds i32, i32* %arr, i64 1
  %0 = bitcast i32* %arr to <2 x i32>*
  %1 = load <2 x i32>, <2 x i32>* %0, align 4
  %reorder_shuffle = shufflevector <2 x i32> %1, <2 x i32> undef, <2 x i32> <i32 1, i32 0>
  %shuffle = shufflevector <2 x i32> %reorder_shuffle, <2 x i32> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1>
  %2 = insertelement <8 x i32> undef, i32 %a1, i32 0
  %3 = insertelement <8 x i32> %2, i32 %a2, i32 1
  %4 = insertelement <8 x i32> %3, i32 %a3, i32 2
  %5 = insertelement <8 x i32> %4, i32 %a4, i32 3
  %6 = insertelement <8 x i32> %5, i32 %a5, i32 4
  %7 = insertelement <8 x i32> %6, i32 %a6, i32 5
  %8 = insertelement <8 x i32> %7, i32 %a7, i32 6
  %9 = insertelement <8 x i32> %8, i32 %a8, i32 7
  %10 = add <8 x i32> %9, %shuffle
  %cmp = icmp ult i32 undef, undef
  %cond = select i1 %cmp, i32 undef, i32 undef
  %cmp15 = icmp ult i32 %cond, undef
  %cond19 = select i1 %cmp15, i32 %cond, i32 undef
  %cmp20 = icmp ult i32 %cond19, undef
  %cond24 = select i1 %cmp20, i32 %cond19, i32 undef
  %cmp25 = icmp ult i32 %cond24, undef
  %cond29 = select i1 %cmp25, i32 %cond24, i32 undef
  %cmp30 = icmp ult i32 %cond29, undef
  %cond34 = select i1 %cmp30, i32 %cond29, i32 undef
  %cmp35 = icmp ult i32 %cond34, undef
  %cond39 = select i1 %cmp35, i32 %cond34, i32 undef
  %cmp40 = icmp ult i32 %cond39, undef
  %rdx.shuf = shufflevector <8 x i32> %10, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp = icmp ult <8 x i32> %10, %rdx.shuf
  %rdx.minmax.select = select <8 x i1> %rdx.minmax.cmp, <8 x i32> %10, <8 x i32> %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x i32> %rdx.minmax.select, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp2 = icmp ult <8 x i32> %rdx.minmax.select, %rdx.shuf1
  %rdx.minmax.select3 = select <8 x i1> %rdx.minmax.cmp2, <8 x i32> %rdx.minmax.select, <8 x i32> %rdx.shuf1
  %rdx.shuf4 = shufflevector <8 x i32> %rdx.minmax.select3, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp5 = icmp ult <8 x i32> %rdx.minmax.select3, %rdx.shuf4
  %rdx.minmax.select6 = select <8 x i1> %rdx.minmax.cmp5, <8 x i32> %rdx.minmax.select3, <8 x i32> %rdx.shuf4
  %11 = extractelement <8 x i32> %rdx.minmax.select6, i32 0
  %cond44 = select i1 %cmp40, i32 %cond39, i32 undef
  ret i32 %11
}

define i32 @foo1(i32* nocapture readonly %arr, i32 %a1, i32 %a2, i32 %a3, i32 %a4, i32 %a5, i32 %a6, i32 %a7, i32 %a8) #0 {
entry:
  %arrayidx = getelementptr inbounds i32, i32* %arr, i64 1
  %arrayidx1 = getelementptr inbounds i32, i32* %arr, i64 2
  %arrayidx3 = getelementptr inbounds i32, i32* %arr, i64 3
  %0 = bitcast i32* %arr to <4 x i32>*
  %1 = load <4 x i32>, <4 x i32>* %0, align 4
  %reorder_shuffle = shufflevector <4 x i32> %1, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %shuffle = shufflevector <4 x i32> %reorder_shuffle, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 0, i32 0, i32 3, i32 1, i32 0>
  %2 = insertelement <8 x i32> undef, i32 %a1, i32 0
  %3 = insertelement <8 x i32> %2, i32 %a2, i32 1
  %4 = insertelement <8 x i32> %3, i32 %a3, i32 2
  %5 = insertelement <8 x i32> %4, i32 %a4, i32 3
  %6 = insertelement <8 x i32> %5, i32 %a5, i32 4
  %7 = insertelement <8 x i32> %6, i32 %a6, i32 5
  %8 = insertelement <8 x i32> %7, i32 %a7, i32 6
  %9 = insertelement <8 x i32> %8, i32 %a8, i32 7
  %10 = add <8 x i32> %9, %shuffle
  %cmp = icmp ult i32 undef, undef
  %cond = select i1 %cmp, i32 undef, i32 undef
  %cmp15 = icmp ult i32 %cond, undef
  %cond19 = select i1 %cmp15, i32 %cond, i32 undef
  %cmp20 = icmp ult i32 %cond19, undef
  %cond24 = select i1 %cmp20, i32 %cond19, i32 undef
  %cmp25 = icmp ult i32 %cond24, undef
  %cond29 = select i1 %cmp25, i32 %cond24, i32 undef
  %cmp30 = icmp ult i32 %cond29, undef
  %cond34 = select i1 %cmp30, i32 %cond29, i32 undef
  %cmp35 = icmp ult i32 %cond34, undef
  %cond39 = select i1 %cmp35, i32 %cond34, i32 undef
  %cmp40 = icmp ult i32 %cond39, undef
  %rdx.shuf = shufflevector <8 x i32> %10, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp = icmp ult <8 x i32> %10, %rdx.shuf
  %rdx.minmax.select = select <8 x i1> %rdx.minmax.cmp, <8 x i32> %10, <8 x i32> %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x i32> %rdx.minmax.select, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp2 = icmp ult <8 x i32> %rdx.minmax.select, %rdx.shuf1
  %rdx.minmax.select3 = select <8 x i1> %rdx.minmax.cmp2, <8 x i32> %rdx.minmax.select, <8 x i32> %rdx.shuf1
  %rdx.shuf4 = shufflevector <8 x i32> %rdx.minmax.select3, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp5 = icmp ult <8 x i32> %rdx.minmax.select3, %rdx.shuf4
  %rdx.minmax.select6 = select <8 x i1> %rdx.minmax.cmp5, <8 x i32> %rdx.minmax.select3, <8 x i32> %rdx.shuf4
  %11 = extractelement <8 x i32> %rdx.minmax.select6, i32 0
  %cond44 = select i1 %cmp40, i32 %cond39, i32 undef
  ret i32 %11
}

define i32 @foo2(i32* nocapture readonly %arr, i32 %a1, i32 %a2, i32 %a3, i32 %a4, i32 %a5, i32 %a6, i32 %a7, i32 %a8) #0 {
entry:
  %arrayidx = getelementptr inbounds i32, i32* %arr, i64 3
  %arrayidx1 = getelementptr inbounds i32, i32* %arr, i64 2
  %arrayidx7 = getelementptr inbounds i32, i32* %arr, i64 1
  %0 = bitcast i32* %arr to <4 x i32>*
  %1 = load <4 x i32>, <4 x i32>* %0, align 4
  %reorder_shuffle = shufflevector <4 x i32> %1, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 0, i32 1>
  %shuffle = shufflevector <4 x i32> %reorder_shuffle, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 0, i32 2, i32 3, i32 2, i32 1, i32 3>
  %2 = insertelement <8 x i32> undef, i32 %a1, i32 0
  %3 = insertelement <8 x i32> %2, i32 %a2, i32 1
  %4 = insertelement <8 x i32> %3, i32 %a3, i32 2
  %5 = insertelement <8 x i32> %4, i32 %a4, i32 3
  %6 = insertelement <8 x i32> %5, i32 %a5, i32 4
  %7 = insertelement <8 x i32> %6, i32 %a6, i32 5
  %8 = insertelement <8 x i32> %7, i32 %a7, i32 6
  %9 = insertelement <8 x i32> %8, i32 %a8, i32 7
  %10 = add <8 x i32> %9, %shuffle
  %cmp = icmp ult i32 undef, undef
  %cond = select i1 %cmp, i32 undef, i32 undef
  %cmp15 = icmp ult i32 %cond, undef
  %cond19 = select i1 %cmp15, i32 %cond, i32 undef
  %cmp20 = icmp ult i32 %cond19, undef
  %cond24 = select i1 %cmp20, i32 %cond19, i32 undef
  %cmp25 = icmp ult i32 %cond24, undef
  %cond29 = select i1 %cmp25, i32 %cond24, i32 undef
  %cmp30 = icmp ult i32 %cond29, undef
  %cond34 = select i1 %cmp30, i32 %cond29, i32 undef
  %cmp35 = icmp ult i32 %cond34, undef
  %cond39 = select i1 %cmp35, i32 %cond34, i32 undef
  %cmp40 = icmp ult i32 %cond39, undef
  %rdx.shuf = shufflevector <8 x i32> %10, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp = icmp ult <8 x i32> %10, %rdx.shuf
  %rdx.minmax.select = select <8 x i1> %rdx.minmax.cmp, <8 x i32> %10, <8 x i32> %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x i32> %rdx.minmax.select, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp2 = icmp ult <8 x i32> %rdx.minmax.select, %rdx.shuf1
  %rdx.minmax.select3 = select <8 x i1> %rdx.minmax.cmp2, <8 x i32> %rdx.minmax.select, <8 x i32> %rdx.shuf1
  %rdx.shuf4 = shufflevector <8 x i32> %rdx.minmax.select3, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp5 = icmp ult <8 x i32> %rdx.minmax.select3, %rdx.shuf4
  %rdx.minmax.select6 = select <8 x i1> %rdx.minmax.cmp5, <8 x i32> %rdx.minmax.select3, <8 x i32> %rdx.shuf4
  %11 = extractelement <8 x i32> %rdx.minmax.select6, i32 0
  %cond44 = select i1 %cmp40, i32 %cond39, i32 undef
  ret i32 %11
}

attributes #0 = { "target-cpu"="bdver2" }
