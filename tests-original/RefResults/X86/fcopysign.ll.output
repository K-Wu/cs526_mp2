; ModuleID = '<stdin>'
source_filename = "<stdin>"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown"

@srcA64 = common global [8 x double] zeroinitializer, align 64
@srcB64 = common global [8 x double] zeroinitializer, align 64
@srcC64 = common global [8 x double] zeroinitializer, align 64
@srcA32 = common global [16 x float] zeroinitializer, align 64
@srcB32 = common global [16 x float] zeroinitializer, align 64
@srcC32 = common global [16 x float] zeroinitializer, align 64
@dst64 = common global [8 x double] zeroinitializer, align 64
@dst32 = common global [16 x float] zeroinitializer, align 64

; Function Attrs: nounwind readnone speculatable
declare float @llvm.copysign.f32(float, float) #0

; Function Attrs: nounwind readnone speculatable
declare double @llvm.copysign.f64(double, double) #0

; Function Attrs: nounwind
define void @fcopysign_2f64() #1 {
  %1 = load <2 x double>, <2 x double>* bitcast ([8 x double]* @srcA64 to <2 x double>*), align 8
  %2 = load <2 x double>, <2 x double>* bitcast ([8 x double]* @srcB64 to <2 x double>*), align 8
  %3 = call <2 x double> @llvm.copysign.v2f64(<2 x double> %1, <2 x double> %2)
  store <2 x double> %3, <2 x double>* bitcast ([8 x double]* @dst64 to <2 x double>*), align 8
  ret void
}

; Function Attrs: nounwind
define void @fcopysign_4f64() #1 {
  %1 = load <2 x double>, <2 x double>* bitcast ([8 x double]* @srcA64 to <2 x double>*), align 8
  %2 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @srcA64, i32 0, i64 2) to <2 x double>*), align 8
  %3 = load <2 x double>, <2 x double>* bitcast ([8 x double]* @srcB64 to <2 x double>*), align 8
  %4 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @srcB64, i32 0, i64 2) to <2 x double>*), align 8
  %5 = call <2 x double> @llvm.copysign.v2f64(<2 x double> %1, <2 x double> %3)
  %6 = call <2 x double> @llvm.copysign.v2f64(<2 x double> %2, <2 x double> %4)
  store <2 x double> %5, <2 x double>* bitcast ([8 x double]* @dst64 to <2 x double>*), align 8
  store <2 x double> %6, <2 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @dst64, i32 0, i64 2) to <2 x double>*), align 8
  ret void
}

; Function Attrs: nounwind
define void @fcopysign_8f64() #1 {
  %1 = load <2 x double>, <2 x double>* bitcast ([8 x double]* @srcA64 to <2 x double>*), align 4
  %2 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @srcA64, i32 0, i64 2) to <2 x double>*), align 4
  %3 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @srcA64, i32 0, i64 4) to <2 x double>*), align 4
  %4 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @srcA64, i32 0, i64 6) to <2 x double>*), align 4
  %5 = load <2 x double>, <2 x double>* bitcast ([8 x double]* @srcB64 to <2 x double>*), align 4
  %6 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @srcB64, i32 0, i64 2) to <2 x double>*), align 4
  %7 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @srcB64, i32 0, i64 4) to <2 x double>*), align 4
  %8 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @srcB64, i32 0, i64 6) to <2 x double>*), align 4
  %9 = call <2 x double> @llvm.copysign.v2f64(<2 x double> %1, <2 x double> %5)
  %10 = call <2 x double> @llvm.copysign.v2f64(<2 x double> %2, <2 x double> %6)
  %11 = call <2 x double> @llvm.copysign.v2f64(<2 x double> %3, <2 x double> %7)
  %12 = call <2 x double> @llvm.copysign.v2f64(<2 x double> %4, <2 x double> %8)
  store <2 x double> %9, <2 x double>* bitcast ([8 x double]* @dst64 to <2 x double>*), align 4
  store <2 x double> %10, <2 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @dst64, i32 0, i64 2) to <2 x double>*), align 4
  store <2 x double> %11, <2 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @dst64, i32 0, i64 4) to <2 x double>*), align 4
  store <2 x double> %12, <2 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @dst64, i32 0, i64 6) to <2 x double>*), align 4
  ret void
}

; Function Attrs: nounwind
define void @fcopysign_4f32() #1 {
  %1 = load <4 x float>, <4 x float>* bitcast ([16 x float]* @srcA32 to <4 x float>*), align 4
  %2 = load <4 x float>, <4 x float>* bitcast ([16 x float]* @srcB32 to <4 x float>*), align 4
  %3 = call <4 x float> @llvm.copysign.v4f32(<4 x float> %1, <4 x float> %2)
  store <4 x float> %3, <4 x float>* bitcast ([16 x float]* @dst32 to <4 x float>*), align 4
  ret void
}

; Function Attrs: nounwind
define void @fcopysign_8f32() #1 {
  %1 = load <4 x float>, <4 x float>* bitcast ([16 x float]* @srcA32 to <4 x float>*), align 4
  %2 = load <4 x float>, <4 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @srcA32, i32 0, i64 4) to <4 x float>*), align 4
  %3 = load <4 x float>, <4 x float>* bitcast ([16 x float]* @srcB32 to <4 x float>*), align 4
  %4 = load <4 x float>, <4 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @srcB32, i32 0, i64 4) to <4 x float>*), align 4
  %5 = call <4 x float> @llvm.copysign.v4f32(<4 x float> %1, <4 x float> %3)
  %6 = call <4 x float> @llvm.copysign.v4f32(<4 x float> %2, <4 x float> %4)
  store <4 x float> %5, <4 x float>* bitcast ([16 x float]* @dst32 to <4 x float>*), align 4
  store <4 x float> %6, <4 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @dst32, i32 0, i64 4) to <4 x float>*), align 4
  ret void
}

; Function Attrs: nounwind
define void @fcopysign_16f32() #1 {
  %1 = load <4 x float>, <4 x float>* bitcast ([16 x float]* @srcA32 to <4 x float>*), align 4
  %2 = load <4 x float>, <4 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @srcA32, i32 0, i64 4) to <4 x float>*), align 4
  %3 = load <4 x float>, <4 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @srcA32, i32 0, i64 8) to <4 x float>*), align 4
  %4 = load <4 x float>, <4 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @srcA32, i32 0, i64 12) to <4 x float>*), align 4
  %5 = load <4 x float>, <4 x float>* bitcast ([16 x float]* @srcB32 to <4 x float>*), align 4
  %6 = load <4 x float>, <4 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @srcB32, i32 0, i64 4) to <4 x float>*), align 4
  %7 = load <4 x float>, <4 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @srcB32, i32 0, i64 8) to <4 x float>*), align 4
  %8 = load <4 x float>, <4 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @srcB32, i32 0, i64 12) to <4 x float>*), align 4
  %9 = call <4 x float> @llvm.copysign.v4f32(<4 x float> %1, <4 x float> %5)
  %10 = call <4 x float> @llvm.copysign.v4f32(<4 x float> %2, <4 x float> %6)
  %11 = call <4 x float> @llvm.copysign.v4f32(<4 x float> %3, <4 x float> %7)
  %12 = call <4 x float> @llvm.copysign.v4f32(<4 x float> %4, <4 x float> %8)
  store <4 x float> %9, <4 x float>* bitcast ([16 x float]* @dst32 to <4 x float>*), align 4
  store <4 x float> %10, <4 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @dst32, i32 0, i64 4) to <4 x float>*), align 4
  store <4 x float> %11, <4 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @dst32, i32 0, i64 8) to <4 x float>*), align 4
  store <4 x float> %12, <4 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @dst32, i32 0, i64 12) to <4 x float>*), align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.copysign.v2f64(<2 x double>, <2 x double>) #0

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.copysign.v4f32(<4 x float>, <4 x float>) #0

attributes #0 = { nounwind readnone speculatable }
attributes #1 = { nounwind }
