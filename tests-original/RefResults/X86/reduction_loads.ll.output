; ModuleID = '<stdin>'
source_filename = "<stdin>"
target triple = "x86_64-apple-macosx10.10.0"

define i32 @test(i32* nocapture readonly %p) #0 {
entry:
  %arrayidx.1 = getelementptr inbounds i32, i32* %p, i64 1
  %arrayidx.2 = getelementptr inbounds i32, i32* %p, i64 2
  %arrayidx.3 = getelementptr inbounds i32, i32* %p, i64 3
  %arrayidx.4 = getelementptr inbounds i32, i32* %p, i64 4
  %arrayidx.5 = getelementptr inbounds i32, i32* %p, i64 5
  %arrayidx.6 = getelementptr inbounds i32, i32* %p, i64 6
  %arrayidx.7 = getelementptr inbounds i32, i32* %p, i64 7
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %sum = phi i32 [ 0, %entry ], [ %op.extra, %for.body ]
  %0 = bitcast i32* %p to <8 x i32>*
  %1 = load <8 x i32>, <8 x i32>* %0, align 4
  %2 = mul <8 x i32> <i32 42, i32 42, i32 42, i32 42, i32 42, i32 42, i32 42, i32 42>, %1
  %add = add i32 undef, %sum
  %add.1 = add i32 undef, %add
  %add.2 = add i32 undef, %add.1
  %add.3 = add i32 undef, %add.2
  %add.4 = add i32 undef, %add.3
  %add.5 = add i32 undef, %add.4
  %add.6 = add i32 undef, %add.5
  %rdx.shuf = shufflevector <8 x i32> %2, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx = add <8 x i32> %2, %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x i32> %bin.rdx, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = add <8 x i32> %bin.rdx, %rdx.shuf1
  %rdx.shuf3 = shufflevector <8 x i32> %bin.rdx2, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx4 = add <8 x i32> %bin.rdx2, %rdx.shuf3
  %3 = extractelement <8 x i32> %bin.rdx4, i32 0
  %op.extra = add i32 %3, %sum
  %add.7 = add i32 undef, %add.6
  br i1 true, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret i32 %op.extra
}

define i32 @test2(i32* nocapture readonly %p, i32* nocapture readonly %q) #0 {
entry:
  %arrayidx.p.1 = getelementptr inbounds i32, i32* %p, i64 1
  %arrayidx.p.2 = getelementptr inbounds i32, i32* %p, i64 2
  %arrayidx.p.3 = getelementptr inbounds i32, i32* %p, i64 3
  %arrayidx.p.4 = getelementptr inbounds i32, i32* %p, i64 4
  %arrayidx.p.5 = getelementptr inbounds i32, i32* %p, i64 5
  %arrayidx.p.6 = getelementptr inbounds i32, i32* %p, i64 6
  %arrayidx.p.7 = getelementptr inbounds i32, i32* %p, i64 7
  %arrayidx.q.1 = getelementptr inbounds i32, i32* %q, i64 1
  %arrayidx.q.2 = getelementptr inbounds i32, i32* %q, i64 2
  %arrayidx.q.3 = getelementptr inbounds i32, i32* %q, i64 3
  %arrayidx.q.4 = getelementptr inbounds i32, i32* %q, i64 4
  %arrayidx.q.5 = getelementptr inbounds i32, i32* %q, i64 5
  %arrayidx.q.6 = getelementptr inbounds i32, i32* %q, i64 6
  %arrayidx.q.7 = getelementptr inbounds i32, i32* %q, i64 7
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %sum = phi i32 [ 0, %entry ], [ %op.extra, %for.body ]
  %0 = bitcast i32* %p to <8 x i32>*
  %1 = load <8 x i32>, <8 x i32>* %0, align 4
  %2 = bitcast i32* %q to <8 x i32>*
  %3 = load <8 x i32>, <8 x i32>* %2, align 4
  %4 = mul <8 x i32> %1, %3
  %add = add i32 undef, %sum
  %add.1 = add i32 undef, %add
  %add.2 = add i32 undef, %add.1
  %add.3 = add i32 undef, %add.2
  %add.4 = add i32 undef, %add.3
  %add.5 = add i32 undef, %add.4
  %add.6 = add i32 undef, %add.5
  %rdx.shuf = shufflevector <8 x i32> %4, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx = add <8 x i32> %4, %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x i32> %bin.rdx, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = add <8 x i32> %bin.rdx, %rdx.shuf1
  %rdx.shuf3 = shufflevector <8 x i32> %bin.rdx2, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx4 = add <8 x i32> %bin.rdx2, %rdx.shuf3
  %5 = extractelement <8 x i32> %bin.rdx4, i32 0
  %op.extra = add i32 %5, %sum
  %add.7 = add i32 undef, %add.6
  br i1 true, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret i32 %op.extra
}

define i32 @test3(i32* nocapture readonly %p, i32* nocapture readonly %q) #0 {
entry:
  %arrayidx.p.1 = getelementptr inbounds i32, i32* %p, i64 1
  %arrayidx.p.2 = getelementptr inbounds i32, i32* %p, i64 2
  %arrayidx.p.3 = getelementptr inbounds i32, i32* %p, i64 3
  %arrayidx.p.4 = getelementptr inbounds i32, i32* %p, i64 4
  %arrayidx.p.5 = getelementptr inbounds i32, i32* %p, i64 5
  %arrayidx.p.6 = getelementptr inbounds i32, i32* %p, i64 6
  %arrayidx.p.7 = getelementptr inbounds i32, i32* %p, i64 7
  %arrayidx.q.1 = getelementptr inbounds i32, i32* %q, i64 1
  %arrayidx.q.2 = getelementptr inbounds i32, i32* %q, i64 2
  %arrayidx.q.3 = getelementptr inbounds i32, i32* %q, i64 3
  %arrayidx.q.4 = getelementptr inbounds i32, i32* %q, i64 4
  %arrayidx.q.5 = getelementptr inbounds i32, i32* %q, i64 5
  %arrayidx.q.6 = getelementptr inbounds i32, i32* %q, i64 6
  %arrayidx.q.7 = getelementptr inbounds i32, i32* %q, i64 7
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %sum = phi i32 [ 0, %entry ], [ %op.extra, %for.body ]
  %0 = bitcast i32* %p to <8 x i32>*
  %1 = load <8 x i32>, <8 x i32>* %0, align 4
  %reorder_shuffle = shufflevector <8 x i32> %1, <8 x i32> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %2 = bitcast i32* %q to <8 x i32>*
  %3 = load <8 x i32>, <8 x i32>* %2, align 4
  %4 = mul <8 x i32> %reorder_shuffle, %3
  %add = add i32 undef, %sum
  %add.1 = add i32 undef, %add
  %add.2 = add i32 undef, %add.1
  %add.3 = add i32 undef, %add.2
  %add.4 = add i32 undef, %add.3
  %add.5 = add i32 undef, %add.4
  %add.6 = add i32 undef, %add.5
  %rdx.shuf = shufflevector <8 x i32> %4, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx = add <8 x i32> %4, %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x i32> %bin.rdx, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = add <8 x i32> %bin.rdx, %rdx.shuf1
  %rdx.shuf3 = shufflevector <8 x i32> %bin.rdx2, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx4 = add <8 x i32> %bin.rdx2, %rdx.shuf3
  %5 = extractelement <8 x i32> %bin.rdx4, i32 0
  %op.extra = add i32 %5, %sum
  %add.7 = add i32 undef, %add.6
  br i1 true, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret i32 %op.extra
}

attributes #0 = { "target-features"="+sse4.2" }
