; ModuleID = '<stdin>'
source_filename = "<stdin>"
target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128-n8:16:32-S128"
target triple = "i386-apple-macosx10.8.0"

define i32 @reduce(double* nocapture %A, i32 %n, i32 %m) #0 {
entry:
  %cmp13 = icmp sgt i32 %n, 0
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.body, %entry
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %sum.014 = phi double [ %add6, %for.body ], [ 0.000000e+00, %entry ]
  %mul = shl nsw i32 %i.015, 1
  %arrayidx = getelementptr inbounds double, double* %A, i32 %mul
  %0 = bitcast double* %arrayidx to <2 x double>*
  %1 = load <2 x double>, <2 x double>* %0, align 4
  %2 = fmul <2 x double> <double 7.000000e+00, double 7.000000e+00>, %1
  %3 = extractelement <2 x double> %2, i32 0
  %4 = extractelement <2 x double> %2, i32 1
  %add5 = fadd double %3, %4
  %add6 = fadd double %sum.014, %add5
  %inc = add nsw i32 %i.015, 1
  %exitcond = icmp eq i32 %inc, %n
  br i1 %exitcond, label %for.cond.for.end_crit_edge, label %for.body

for.cond.for.end_crit_edge:                       ; preds = %for.body
  %phitmp = fptosi double %add6 to i32
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %entry
  %sum.0.lcssa = phi i32 [ %phitmp, %for.cond.for.end_crit_edge ], [ 0, %entry ]
  ret i32 %sum.0.lcssa
}

define i32 @horiz_max_multiple_uses([32 x i32]* %x, i32* %p) #0 {
  %x0 = getelementptr [32 x i32], [32 x i32]* %x, i64 0, i64 0
  %x4 = getelementptr [32 x i32], [32 x i32]* %x, i64 0, i64 4
  %x5 = getelementptr [32 x i32], [32 x i32]* %x, i64 0, i64 5
  %1 = bitcast i32* %x0 to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 4
  %t4 = load i32, i32* %x4
  %t5 = load i32, i32* %x5
  %c01 = icmp sgt i32 undef, undef
  %s5 = select i1 %c01, i32 undef, i32 undef
  %c012 = icmp sgt i32 %s5, undef
  %t8 = select i1 %c012, i32 %s5, i32 undef
  %c0123 = icmp sgt i32 %t8, undef
  %rdx4 = select i1 %c0123, i32 %t8, i32 undef
  %MAX_ROOT_CMP = icmp sgt i32 %rdx4, %t4
  %rdx.shuf = shufflevector <4 x i32> %2, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp = icmp sgt <4 x i32> %2, %rdx.shuf
  %rdx.minmax.select = select <4 x i1> %rdx.minmax.cmp, <4 x i32> %2, <4 x i32> %rdx.shuf
  %rdx.shuf1 = shufflevector <4 x i32> %rdx.minmax.select, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp2 = icmp sgt <4 x i32> %rdx.minmax.select, %rdx.shuf1
  %rdx.minmax.select3 = select <4 x i1> %rdx.minmax.cmp2, <4 x i32> %rdx.minmax.select, <4 x i32> %rdx.shuf1
  %3 = extractelement <4 x i32> %rdx.minmax.select3, i32 0
  %4 = icmp sgt i32 %3, %t4
  %5 = select i1 %4, i32 %3, i32 %t4
  %c012345 = icmp sgt i32 %5, %t5
  %t17 = select i1 %c012345, i32 %5, i32 %t5
  %three_or_four = select i1 %MAX_ROOT_CMP, i32 3, i32 4
  store i32 %three_or_four, i32* %p, align 8
  ret i32 %t17
}

define i1 @bad_insertpoint_rdx([8 x i32]* %p) #0 {
  %arrayidx22 = getelementptr inbounds [8 x i32], [8 x i32]* %p, i64 0, i64 0
  %t0 = load i32, i32* %arrayidx22, align 16
  %cmp23 = icmp sgt i32 %t0, 0
  %spec.select = select i1 %cmp23, i32 %t0, i32 0
  %arrayidx22.1 = getelementptr inbounds [8 x i32], [8 x i32]* %p, i64 0, i64 1
  %t1 = load i32, i32* %arrayidx22.1, align 4
  %cmp23.1 = icmp sgt i32 %t1, %spec.select
  %spec.store.select87 = zext i1 %cmp23.1 to i32
  %spec.select88 = select i1 %cmp23.1, i32 %t1, i32 %spec.select
  %cmp23.2 = icmp sgt i32 %spec.store.select87, %spec.select88
  ret i1 %cmp23.2
}

attributes #0 = { "target-cpu"="corei7-avx" }
