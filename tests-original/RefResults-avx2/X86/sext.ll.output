; ModuleID = '<stdin>'
source_filename = "<stdin>"
target triple = "x86_64-unknown"

define <2 x i64> @loadext_2i8_to_2i64(i8* %p0) #0 {
  %p1 = getelementptr inbounds i8, i8* %p0, i64 1
  %1 = bitcast i8* %p0 to <2 x i8>*
  %2 = load <2 x i8>, <2 x i8>* %1, align 1
  %3 = sext <2 x i8> %2 to <2 x i64>
  %4 = extractelement <2 x i64> %3, i32 0
  %v0 = insertelement <2 x i64> undef, i64 %4, i32 0
  %5 = extractelement <2 x i64> %3, i32 1
  %v1 = insertelement <2 x i64> %v0, i64 %5, i32 1
  ret <2 x i64> %v1
}

define <4 x i32> @loadext_4i8_to_4i32(i8* %p0) #0 {
  %p1 = getelementptr inbounds i8, i8* %p0, i64 1
  %p2 = getelementptr inbounds i8, i8* %p0, i64 2
  %p3 = getelementptr inbounds i8, i8* %p0, i64 3
  %1 = bitcast i8* %p0 to <4 x i8>*
  %2 = load <4 x i8>, <4 x i8>* %1, align 1
  %3 = sext <4 x i8> %2 to <4 x i32>
  %4 = extractelement <4 x i32> %3, i32 0
  %v0 = insertelement <4 x i32> undef, i32 %4, i32 0
  %5 = extractelement <4 x i32> %3, i32 1
  %v1 = insertelement <4 x i32> %v0, i32 %5, i32 1
  %6 = extractelement <4 x i32> %3, i32 2
  %v2 = insertelement <4 x i32> %v1, i32 %6, i32 2
  %7 = extractelement <4 x i32> %3, i32 3
  %v3 = insertelement <4 x i32> %v2, i32 %7, i32 3
  ret <4 x i32> %v3
}

define <4 x i64> @loadext_4i8_to_4i64(i8* %p0) #0 {
  %p1 = getelementptr inbounds i8, i8* %p0, i64 1
  %p2 = getelementptr inbounds i8, i8* %p0, i64 2
  %p3 = getelementptr inbounds i8, i8* %p0, i64 3
  %1 = bitcast i8* %p0 to <2 x i8>*
  %2 = load <2 x i8>, <2 x i8>* %1, align 1
  %i2 = load i8, i8* %p2, align 1
  %i3 = load i8, i8* %p3, align 1
  %3 = sext <2 x i8> %2 to <2 x i64>
  %x2 = sext i8 %i2 to i64
  %x3 = sext i8 %i3 to i64
  %4 = extractelement <2 x i64> %3, i32 0
  %v0 = insertelement <4 x i64> undef, i64 %4, i32 0
  %5 = extractelement <2 x i64> %3, i32 1
  %v1 = insertelement <4 x i64> %v0, i64 %5, i32 1
  %v2 = insertelement <4 x i64> %v1, i64 %x2, i32 2
  %v3 = insertelement <4 x i64> %v2, i64 %x3, i32 3
  ret <4 x i64> %v3
}

define <8 x i16> @loadext_8i8_to_8i16(i8* %p0) #0 {
  %p1 = getelementptr inbounds i8, i8* %p0, i64 1
  %p2 = getelementptr inbounds i8, i8* %p0, i64 2
  %p3 = getelementptr inbounds i8, i8* %p0, i64 3
  %p4 = getelementptr inbounds i8, i8* %p0, i64 4
  %p5 = getelementptr inbounds i8, i8* %p0, i64 5
  %p6 = getelementptr inbounds i8, i8* %p0, i64 6
  %p7 = getelementptr inbounds i8, i8* %p0, i64 7
  %1 = bitcast i8* %p0 to <8 x i8>*
  %2 = load <8 x i8>, <8 x i8>* %1, align 1
  %3 = sext <8 x i8> %2 to <8 x i16>
  %4 = extractelement <8 x i16> %3, i32 0
  %v0 = insertelement <8 x i16> undef, i16 %4, i32 0
  %5 = extractelement <8 x i16> %3, i32 1
  %v1 = insertelement <8 x i16> %v0, i16 %5, i32 1
  %6 = extractelement <8 x i16> %3, i32 2
  %v2 = insertelement <8 x i16> %v1, i16 %6, i32 2
  %7 = extractelement <8 x i16> %3, i32 3
  %v3 = insertelement <8 x i16> %v2, i16 %7, i32 3
  %8 = extractelement <8 x i16> %3, i32 4
  %v4 = insertelement <8 x i16> %v3, i16 %8, i32 4
  %9 = extractelement <8 x i16> %3, i32 5
  %v5 = insertelement <8 x i16> %v4, i16 %9, i32 5
  %10 = extractelement <8 x i16> %3, i32 6
  %v6 = insertelement <8 x i16> %v5, i16 %10, i32 6
  %11 = extractelement <8 x i16> %3, i32 7
  %v7 = insertelement <8 x i16> %v6, i16 %11, i32 7
  ret <8 x i16> %v7
}

define <8 x i32> @loadext_8i8_to_8i32(i8* %p0) #0 {
  %p1 = getelementptr inbounds i8, i8* %p0, i64 1
  %p2 = getelementptr inbounds i8, i8* %p0, i64 2
  %p3 = getelementptr inbounds i8, i8* %p0, i64 3
  %p4 = getelementptr inbounds i8, i8* %p0, i64 4
  %p5 = getelementptr inbounds i8, i8* %p0, i64 5
  %p6 = getelementptr inbounds i8, i8* %p0, i64 6
  %p7 = getelementptr inbounds i8, i8* %p0, i64 7
  %1 = bitcast i8* %p0 to <8 x i8>*
  %2 = load <8 x i8>, <8 x i8>* %1, align 1
  %3 = sext <8 x i8> %2 to <8 x i32>
  %4 = extractelement <8 x i32> %3, i32 0
  %v0 = insertelement <8 x i32> undef, i32 %4, i32 0
  %5 = extractelement <8 x i32> %3, i32 1
  %v1 = insertelement <8 x i32> %v0, i32 %5, i32 1
  %6 = extractelement <8 x i32> %3, i32 2
  %v2 = insertelement <8 x i32> %v1, i32 %6, i32 2
  %7 = extractelement <8 x i32> %3, i32 3
  %v3 = insertelement <8 x i32> %v2, i32 %7, i32 3
  %8 = extractelement <8 x i32> %3, i32 4
  %v4 = insertelement <8 x i32> %v3, i32 %8, i32 4
  %9 = extractelement <8 x i32> %3, i32 5
  %v5 = insertelement <8 x i32> %v4, i32 %9, i32 5
  %10 = extractelement <8 x i32> %3, i32 6
  %v6 = insertelement <8 x i32> %v5, i32 %10, i32 6
  %11 = extractelement <8 x i32> %3, i32 7
  %v7 = insertelement <8 x i32> %v6, i32 %11, i32 7
  ret <8 x i32> %v7
}

define <16 x i16> @loadext_16i8_to_16i16(i8* %p0) #0 {
  %p1 = getelementptr inbounds i8, i8* %p0, i64 1
  %p2 = getelementptr inbounds i8, i8* %p0, i64 2
  %p3 = getelementptr inbounds i8, i8* %p0, i64 3
  %p4 = getelementptr inbounds i8, i8* %p0, i64 4
  %p5 = getelementptr inbounds i8, i8* %p0, i64 5
  %p6 = getelementptr inbounds i8, i8* %p0, i64 6
  %p7 = getelementptr inbounds i8, i8* %p0, i64 7
  %p8 = getelementptr inbounds i8, i8* %p0, i64 8
  %p9 = getelementptr inbounds i8, i8* %p0, i64 9
  %p10 = getelementptr inbounds i8, i8* %p0, i64 10
  %p11 = getelementptr inbounds i8, i8* %p0, i64 11
  %p12 = getelementptr inbounds i8, i8* %p0, i64 12
  %p13 = getelementptr inbounds i8, i8* %p0, i64 13
  %p14 = getelementptr inbounds i8, i8* %p0, i64 14
  %p15 = getelementptr inbounds i8, i8* %p0, i64 15
  %1 = bitcast i8* %p0 to <16 x i8>*
  %2 = load <16 x i8>, <16 x i8>* %1, align 1
  %3 = sext <16 x i8> %2 to <16 x i16>
  %4 = extractelement <16 x i16> %3, i32 0
  %v0 = insertelement <16 x i16> undef, i16 %4, i32 0
  %5 = extractelement <16 x i16> %3, i32 1
  %v1 = insertelement <16 x i16> %v0, i16 %5, i32 1
  %6 = extractelement <16 x i16> %3, i32 2
  %v2 = insertelement <16 x i16> %v1, i16 %6, i32 2
  %7 = extractelement <16 x i16> %3, i32 3
  %v3 = insertelement <16 x i16> %v2, i16 %7, i32 3
  %8 = extractelement <16 x i16> %3, i32 4
  %v4 = insertelement <16 x i16> %v3, i16 %8, i32 4
  %9 = extractelement <16 x i16> %3, i32 5
  %v5 = insertelement <16 x i16> %v4, i16 %9, i32 5
  %10 = extractelement <16 x i16> %3, i32 6
  %v6 = insertelement <16 x i16> %v5, i16 %10, i32 6
  %11 = extractelement <16 x i16> %3, i32 7
  %v7 = insertelement <16 x i16> %v6, i16 %11, i32 7
  %12 = extractelement <16 x i16> %3, i32 8
  %v8 = insertelement <16 x i16> %v7, i16 %12, i32 8
  %13 = extractelement <16 x i16> %3, i32 9
  %v9 = insertelement <16 x i16> %v8, i16 %13, i32 9
  %14 = extractelement <16 x i16> %3, i32 10
  %v10 = insertelement <16 x i16> %v9, i16 %14, i32 10
  %15 = extractelement <16 x i16> %3, i32 11
  %v11 = insertelement <16 x i16> %v10, i16 %15, i32 11
  %16 = extractelement <16 x i16> %3, i32 12
  %v12 = insertelement <16 x i16> %v11, i16 %16, i32 12
  %17 = extractelement <16 x i16> %3, i32 13
  %v13 = insertelement <16 x i16> %v12, i16 %17, i32 13
  %18 = extractelement <16 x i16> %3, i32 14
  %v14 = insertelement <16 x i16> %v13, i16 %18, i32 14
  %19 = extractelement <16 x i16> %3, i32 15
  %v15 = insertelement <16 x i16> %v14, i16 %19, i32 15
  ret <16 x i16> %v15
}

define <2 x i64> @loadext_2i16_to_2i64(i16* %p0) #0 {
  %p1 = getelementptr inbounds i16, i16* %p0, i64 1
  %1 = bitcast i16* %p0 to <2 x i16>*
  %2 = load <2 x i16>, <2 x i16>* %1, align 1
  %3 = sext <2 x i16> %2 to <2 x i64>
  %4 = extractelement <2 x i64> %3, i32 0
  %v0 = insertelement <2 x i64> undef, i64 %4, i32 0
  %5 = extractelement <2 x i64> %3, i32 1
  %v1 = insertelement <2 x i64> %v0, i64 %5, i32 1
  ret <2 x i64> %v1
}

define <4 x i32> @loadext_4i16_to_4i32(i16* %p0) #0 {
  %p1 = getelementptr inbounds i16, i16* %p0, i64 1
  %p2 = getelementptr inbounds i16, i16* %p0, i64 2
  %p3 = getelementptr inbounds i16, i16* %p0, i64 3
  %1 = bitcast i16* %p0 to <4 x i16>*
  %2 = load <4 x i16>, <4 x i16>* %1, align 1
  %3 = sext <4 x i16> %2 to <4 x i32>
  %4 = extractelement <4 x i32> %3, i32 0
  %v0 = insertelement <4 x i32> undef, i32 %4, i32 0
  %5 = extractelement <4 x i32> %3, i32 1
  %v1 = insertelement <4 x i32> %v0, i32 %5, i32 1
  %6 = extractelement <4 x i32> %3, i32 2
  %v2 = insertelement <4 x i32> %v1, i32 %6, i32 2
  %7 = extractelement <4 x i32> %3, i32 3
  %v3 = insertelement <4 x i32> %v2, i32 %7, i32 3
  ret <4 x i32> %v3
}

define <4 x i64> @loadext_4i16_to_4i64(i16* %p0) #0 {
  %p1 = getelementptr inbounds i16, i16* %p0, i64 1
  %p2 = getelementptr inbounds i16, i16* %p0, i64 2
  %p3 = getelementptr inbounds i16, i16* %p0, i64 3
  %1 = bitcast i16* %p0 to <2 x i16>*
  %2 = load <2 x i16>, <2 x i16>* %1, align 1
  %i2 = load i16, i16* %p2, align 1
  %i3 = load i16, i16* %p3, align 1
  %3 = sext <2 x i16> %2 to <2 x i64>
  %x2 = sext i16 %i2 to i64
  %x3 = sext i16 %i3 to i64
  %4 = extractelement <2 x i64> %3, i32 0
  %v0 = insertelement <4 x i64> undef, i64 %4, i32 0
  %5 = extractelement <2 x i64> %3, i32 1
  %v1 = insertelement <4 x i64> %v0, i64 %5, i32 1
  %v2 = insertelement <4 x i64> %v1, i64 %x2, i32 2
  %v3 = insertelement <4 x i64> %v2, i64 %x3, i32 3
  ret <4 x i64> %v3
}

define <8 x i32> @loadext_8i16_to_8i32(i16* %p0) #0 {
  %p1 = getelementptr inbounds i16, i16* %p0, i64 1
  %p2 = getelementptr inbounds i16, i16* %p0, i64 2
  %p3 = getelementptr inbounds i16, i16* %p0, i64 3
  %p4 = getelementptr inbounds i16, i16* %p0, i64 4
  %p5 = getelementptr inbounds i16, i16* %p0, i64 5
  %p6 = getelementptr inbounds i16, i16* %p0, i64 6
  %p7 = getelementptr inbounds i16, i16* %p0, i64 7
  %1 = bitcast i16* %p0 to <8 x i16>*
  %2 = load <8 x i16>, <8 x i16>* %1, align 1
  %3 = sext <8 x i16> %2 to <8 x i32>
  %4 = extractelement <8 x i32> %3, i32 0
  %v0 = insertelement <8 x i32> undef, i32 %4, i32 0
  %5 = extractelement <8 x i32> %3, i32 1
  %v1 = insertelement <8 x i32> %v0, i32 %5, i32 1
  %6 = extractelement <8 x i32> %3, i32 2
  %v2 = insertelement <8 x i32> %v1, i32 %6, i32 2
  %7 = extractelement <8 x i32> %3, i32 3
  %v3 = insertelement <8 x i32> %v2, i32 %7, i32 3
  %8 = extractelement <8 x i32> %3, i32 4
  %v4 = insertelement <8 x i32> %v3, i32 %8, i32 4
  %9 = extractelement <8 x i32> %3, i32 5
  %v5 = insertelement <8 x i32> %v4, i32 %9, i32 5
  %10 = extractelement <8 x i32> %3, i32 6
  %v6 = insertelement <8 x i32> %v5, i32 %10, i32 6
  %11 = extractelement <8 x i32> %3, i32 7
  %v7 = insertelement <8 x i32> %v6, i32 %11, i32 7
  ret <8 x i32> %v7
}

define <2 x i64> @loadext_2i32_to_2i64(i32* %p0) #0 {
  %p1 = getelementptr inbounds i32, i32* %p0, i64 1
  %1 = bitcast i32* %p0 to <2 x i32>*
  %2 = load <2 x i32>, <2 x i32>* %1, align 1
  %3 = sext <2 x i32> %2 to <2 x i64>
  %4 = extractelement <2 x i64> %3, i32 0
  %v0 = insertelement <2 x i64> undef, i64 %4, i32 0
  %5 = extractelement <2 x i64> %3, i32 1
  %v1 = insertelement <2 x i64> %v0, i64 %5, i32 1
  ret <2 x i64> %v1
}

define <4 x i64> @loadext_4i32_to_4i64(i32* %p0) #0 {
  %p1 = getelementptr inbounds i32, i32* %p0, i64 1
  %p2 = getelementptr inbounds i32, i32* %p0, i64 2
  %p3 = getelementptr inbounds i32, i32* %p0, i64 3
  %1 = bitcast i32* %p0 to <4 x i32>*
  %2 = load <4 x i32>, <4 x i32>* %1, align 1
  %3 = sext <4 x i32> %2 to <4 x i64>
  %4 = extractelement <4 x i64> %3, i32 0
  %v0 = insertelement <4 x i64> undef, i64 %4, i32 0
  %5 = extractelement <4 x i64> %3, i32 1
  %v1 = insertelement <4 x i64> %v0, i64 %5, i32 1
  %6 = extractelement <4 x i64> %3, i32 2
  %v2 = insertelement <4 x i64> %v1, i64 %6, i32 2
  %7 = extractelement <4 x i64> %3, i32 3
  %v3 = insertelement <4 x i64> %v2, i64 %7, i32 3
  ret <4 x i64> %v3
}

attributes #0 = { "target-cpu"="core-avx2" }
