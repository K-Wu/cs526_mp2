; ModuleID = '<stdin>'
source_filename = "<stdin>"
target triple = "x86_64-unknown"

@a64 = common global [8 x i64] zeroinitializer, align 64
@b64 = common global [8 x i64] zeroinitializer, align 64
@c64 = common global [8 x i64] zeroinitializer, align 64
@a32 = common global [16 x i32] zeroinitializer, align 64
@b32 = common global [16 x i32] zeroinitializer, align 64
@c32 = common global [16 x i32] zeroinitializer, align 64
@a16 = common global [32 x i16] zeroinitializer, align 64
@b16 = common global [32 x i16] zeroinitializer, align 64
@c16 = common global [32 x i16] zeroinitializer, align 64
@a8 = common global [64 x i8] zeroinitializer, align 64
@b8 = common global [64 x i8] zeroinitializer, align 64
@c8 = common global [64 x i8] zeroinitializer, align 64

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #0

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #0

; Function Attrs: nounwind readnone speculatable
declare { i16, i1 } @llvm.uadd.with.overflow.i16(i16, i16) #0

; Function Attrs: nounwind readnone speculatable
declare { i8, i1 } @llvm.uadd.with.overflow.i8(i8, i8) #0

define void @add_v8i64() #1 {
  %a0 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @a64, i32 0, i64 0), align 8
  %a1 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @a64, i32 0, i64 1), align 8
  %a2 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @a64, i32 0, i64 2), align 8
  %a3 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @a64, i32 0, i64 3), align 8
  %a4 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @a64, i32 0, i64 4), align 8
  %a5 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @a64, i32 0, i64 5), align 8
  %a6 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @a64, i32 0, i64 6), align 8
  %a7 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @a64, i32 0, i64 7), align 8
  %b0 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @b64, i32 0, i64 0), align 8
  %b1 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @b64, i32 0, i64 1), align 8
  %b2 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @b64, i32 0, i64 2), align 8
  %b3 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @b64, i32 0, i64 3), align 8
  %b4 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @b64, i32 0, i64 4), align 8
  %b5 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @b64, i32 0, i64 5), align 8
  %b6 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @b64, i32 0, i64 6), align 8
  %b7 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @b64, i32 0, i64 7), align 8
  %c0 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %a0, i64 %b0)
  %c1 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %a1, i64 %b1)
  %c2 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %a2, i64 %b2)
  %c3 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %a3, i64 %b3)
  %c4 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %a4, i64 %b4)
  %c5 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %a5, i64 %b5)
  %c6 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %a6, i64 %b6)
  %c7 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %a7, i64 %b7)
  %r0 = extractvalue { i64, i1 } %c0, 0
  %r1 = extractvalue { i64, i1 } %c1, 0
  %r2 = extractvalue { i64, i1 } %c2, 0
  %r3 = extractvalue { i64, i1 } %c3, 0
  %r4 = extractvalue { i64, i1 } %c4, 0
  %r5 = extractvalue { i64, i1 } %c5, 0
  %r6 = extractvalue { i64, i1 } %c6, 0
  %r7 = extractvalue { i64, i1 } %c7, 0
  store i64 %r0, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @c64, i32 0, i64 0), align 8
  store i64 %r1, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @c64, i32 0, i64 1), align 8
  store i64 %r2, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @c64, i32 0, i64 2), align 8
  store i64 %r3, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @c64, i32 0, i64 3), align 8
  store i64 %r4, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @c64, i32 0, i64 4), align 8
  store i64 %r5, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @c64, i32 0, i64 5), align 8
  store i64 %r6, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @c64, i32 0, i64 6), align 8
  store i64 %r7, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @c64, i32 0, i64 7), align 8
  ret void
}

define void @add_v16i32() #1 {
  %a0 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 0), align 4
  %a1 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 1), align 4
  %a2 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 2), align 4
  %a3 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 3), align 4
  %a4 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 4), align 4
  %a5 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 5), align 4
  %a6 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 6), align 4
  %a7 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 7), align 4
  %a8 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 8), align 4
  %a9 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 9), align 4
  %a10 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 10), align 4
  %a11 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 11), align 4
  %a12 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 12), align 4
  %a13 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 13), align 4
  %a14 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 14), align 4
  %a15 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @a32, i32 0, i64 15), align 4
  %b0 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 0), align 4
  %b1 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 1), align 4
  %b2 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 2), align 4
  %b3 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 3), align 4
  %b4 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 4), align 4
  %b5 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 5), align 4
  %b6 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 6), align 4
  %b7 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 7), align 4
  %b8 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 8), align 4
  %b9 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 9), align 4
  %b10 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 10), align 4
  %b11 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 11), align 4
  %b12 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 12), align 4
  %b13 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 13), align 4
  %b14 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 14), align 4
  %b15 = load i32, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @b32, i32 0, i64 15), align 4
  %c0 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a0, i32 %b0)
  %c1 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a1, i32 %b1)
  %c2 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a2, i32 %b2)
  %c3 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a3, i32 %b3)
  %c4 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a4, i32 %b4)
  %c5 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a5, i32 %b5)
  %c6 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a6, i32 %b6)
  %c7 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a7, i32 %b7)
  %c8 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a8, i32 %b8)
  %c9 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a9, i32 %b9)
  %c10 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a10, i32 %b10)
  %c11 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a11, i32 %b11)
  %c12 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a12, i32 %b12)
  %c13 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a13, i32 %b13)
  %c14 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a14, i32 %b14)
  %c15 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a15, i32 %b15)
  %r0 = extractvalue { i32, i1 } %c0, 0
  %r1 = extractvalue { i32, i1 } %c1, 0
  %r2 = extractvalue { i32, i1 } %c2, 0
  %r3 = extractvalue { i32, i1 } %c3, 0
  %r4 = extractvalue { i32, i1 } %c4, 0
  %r5 = extractvalue { i32, i1 } %c5, 0
  %r6 = extractvalue { i32, i1 } %c6, 0
  %r7 = extractvalue { i32, i1 } %c7, 0
  %r8 = extractvalue { i32, i1 } %c8, 0
  %r9 = extractvalue { i32, i1 } %c9, 0
  %r10 = extractvalue { i32, i1 } %c10, 0
  %r11 = extractvalue { i32, i1 } %c11, 0
  %r12 = extractvalue { i32, i1 } %c12, 0
  %r13 = extractvalue { i32, i1 } %c13, 0
  %r14 = extractvalue { i32, i1 } %c14, 0
  %r15 = extractvalue { i32, i1 } %c15, 0
  store i32 %r0, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 0), align 4
  store i32 %r1, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 1), align 4
  store i32 %r2, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 2), align 4
  store i32 %r3, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 3), align 4
  store i32 %r4, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 4), align 4
  store i32 %r5, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 5), align 4
  store i32 %r6, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 6), align 4
  store i32 %r7, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 7), align 4
  store i32 %r8, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 8), align 4
  store i32 %r9, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 9), align 4
  store i32 %r10, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 10), align 4
  store i32 %r11, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 11), align 4
  store i32 %r12, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 12), align 4
  store i32 %r13, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 13), align 4
  store i32 %r14, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 14), align 4
  store i32 %r15, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @c32, i32 0, i64 15), align 4
  ret void
}

define void @add_v32i16() #1 {
  %a0 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 0), align 2
  %a1 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 1), align 2
  %a2 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 2), align 2
  %a3 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 3), align 2
  %a4 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 4), align 2
  %a5 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 5), align 2
  %a6 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 6), align 2
  %a7 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 7), align 2
  %a8 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 8), align 2
  %a9 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 9), align 2
  %a10 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 10), align 2
  %a11 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 11), align 2
  %a12 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 12), align 2
  %a13 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 13), align 2
  %a14 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 14), align 2
  %a15 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 15), align 2
  %a16 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 16), align 2
  %a17 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 17), align 2
  %a18 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 18), align 2
  %a19 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 19), align 2
  %a20 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 20), align 2
  %a21 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 21), align 2
  %a22 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 22), align 2
  %a23 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 23), align 2
  %a24 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 24), align 2
  %a25 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 25), align 2
  %a26 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 26), align 2
  %a27 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 27), align 2
  %a28 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 28), align 2
  %a29 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 29), align 2
  %a30 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 30), align 2
  %a31 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @a16, i32 0, i64 31), align 2
  %b0 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 0), align 2
  %b1 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 1), align 2
  %b2 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 2), align 2
  %b3 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 3), align 2
  %b4 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 4), align 2
  %b5 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 5), align 2
  %b6 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 6), align 2
  %b7 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 7), align 2
  %b8 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 8), align 2
  %b9 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 9), align 2
  %b10 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 10), align 2
  %b11 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 11), align 2
  %b12 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 12), align 2
  %b13 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 13), align 2
  %b14 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 14), align 2
  %b15 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 15), align 2
  %b16 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 16), align 2
  %b17 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 17), align 2
  %b18 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 18), align 2
  %b19 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 19), align 2
  %b20 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 20), align 2
  %b21 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 21), align 2
  %b22 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 22), align 2
  %b23 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 23), align 2
  %b24 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 24), align 2
  %b25 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 25), align 2
  %b26 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 26), align 2
  %b27 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 27), align 2
  %b28 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 28), align 2
  %b29 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 29), align 2
  %b30 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 30), align 2
  %b31 = load i16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @b16, i32 0, i64 31), align 2
  %c0 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a0, i16 %b0)
  %c1 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a1, i16 %b1)
  %c2 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a2, i16 %b2)
  %c3 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a3, i16 %b3)
  %c4 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a4, i16 %b4)
  %c5 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a5, i16 %b5)
  %c6 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a6, i16 %b6)
  %c7 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a7, i16 %b7)
  %c8 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a8, i16 %b8)
  %c9 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a9, i16 %b9)
  %c10 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a10, i16 %b10)
  %c11 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a11, i16 %b11)
  %c12 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a12, i16 %b12)
  %c13 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a13, i16 %b13)
  %c14 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a14, i16 %b14)
  %c15 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a15, i16 %b15)
  %c16 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a16, i16 %b16)
  %c17 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a17, i16 %b17)
  %c18 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a18, i16 %b18)
  %c19 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a19, i16 %b19)
  %c20 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a20, i16 %b20)
  %c21 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a21, i16 %b21)
  %c22 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a22, i16 %b22)
  %c23 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a23, i16 %b23)
  %c24 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a24, i16 %b24)
  %c25 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a25, i16 %b25)
  %c26 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a26, i16 %b26)
  %c27 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a27, i16 %b27)
  %c28 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a28, i16 %b28)
  %c29 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a29, i16 %b29)
  %c30 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a30, i16 %b30)
  %c31 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %a31, i16 %b31)
  %r0 = extractvalue { i16, i1 } %c0, 0
  %r1 = extractvalue { i16, i1 } %c1, 0
  %r2 = extractvalue { i16, i1 } %c2, 0
  %r3 = extractvalue { i16, i1 } %c3, 0
  %r4 = extractvalue { i16, i1 } %c4, 0
  %r5 = extractvalue { i16, i1 } %c5, 0
  %r6 = extractvalue { i16, i1 } %c6, 0
  %r7 = extractvalue { i16, i1 } %c7, 0
  %r8 = extractvalue { i16, i1 } %c8, 0
  %r9 = extractvalue { i16, i1 } %c9, 0
  %r10 = extractvalue { i16, i1 } %c10, 0
  %r11 = extractvalue { i16, i1 } %c11, 0
  %r12 = extractvalue { i16, i1 } %c12, 0
  %r13 = extractvalue { i16, i1 } %c13, 0
  %r14 = extractvalue { i16, i1 } %c14, 0
  %r15 = extractvalue { i16, i1 } %c15, 0
  %r16 = extractvalue { i16, i1 } %c16, 0
  %r17 = extractvalue { i16, i1 } %c17, 0
  %r18 = extractvalue { i16, i1 } %c18, 0
  %r19 = extractvalue { i16, i1 } %c19, 0
  %r20 = extractvalue { i16, i1 } %c20, 0
  %r21 = extractvalue { i16, i1 } %c21, 0
  %r22 = extractvalue { i16, i1 } %c22, 0
  %r23 = extractvalue { i16, i1 } %c23, 0
  %r24 = extractvalue { i16, i1 } %c24, 0
  %r25 = extractvalue { i16, i1 } %c25, 0
  %r26 = extractvalue { i16, i1 } %c26, 0
  %r27 = extractvalue { i16, i1 } %c27, 0
  %r28 = extractvalue { i16, i1 } %c28, 0
  %r29 = extractvalue { i16, i1 } %c29, 0
  %r30 = extractvalue { i16, i1 } %c30, 0
  %r31 = extractvalue { i16, i1 } %c31, 0
  store i16 %r0, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 0), align 2
  store i16 %r1, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 1), align 2
  store i16 %r2, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 2), align 2
  store i16 %r3, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 3), align 2
  store i16 %r4, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 4), align 2
  store i16 %r5, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 5), align 2
  store i16 %r6, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 6), align 2
  store i16 %r7, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 7), align 2
  store i16 %r8, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 8), align 2
  store i16 %r9, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 9), align 2
  store i16 %r10, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 10), align 2
  store i16 %r11, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 11), align 2
  store i16 %r12, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 12), align 2
  store i16 %r13, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 13), align 2
  store i16 %r14, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 14), align 2
  store i16 %r15, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 15), align 2
  store i16 %r16, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 16), align 2
  store i16 %r17, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 17), align 2
  store i16 %r18, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 18), align 2
  store i16 %r19, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 19), align 2
  store i16 %r20, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 20), align 2
  store i16 %r21, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 21), align 2
  store i16 %r22, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 22), align 2
  store i16 %r23, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 23), align 2
  store i16 %r24, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 24), align 2
  store i16 %r25, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 25), align 2
  store i16 %r26, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 26), align 2
  store i16 %r27, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 27), align 2
  store i16 %r28, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 28), align 2
  store i16 %r29, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 29), align 2
  store i16 %r30, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 30), align 2
  store i16 %r31, i16* getelementptr inbounds ([32 x i16], [32 x i16]* @c16, i32 0, i64 31), align 2
  ret void
}

define void @add_v64i8() #1 {
  %a0 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 0), align 1
  %a1 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 1), align 1
  %a2 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 2), align 1
  %a3 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 3), align 1
  %a4 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 4), align 1
  %a5 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 5), align 1
  %a6 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 6), align 1
  %a7 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 7), align 1
  %a8 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 8), align 1
  %a9 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 9), align 1
  %a10 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 10), align 1
  %a11 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 11), align 1
  %a12 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 12), align 1
  %a13 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 13), align 1
  %a14 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 14), align 1
  %a15 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 15), align 1
  %a16 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 16), align 1
  %a17 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 17), align 1
  %a18 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 18), align 1
  %a19 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 19), align 1
  %a20 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 20), align 1
  %a21 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 21), align 1
  %a22 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 22), align 1
  %a23 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 23), align 1
  %a24 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 24), align 1
  %a25 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 25), align 1
  %a26 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 26), align 1
  %a27 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 27), align 1
  %a28 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 28), align 1
  %a29 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 29), align 1
  %a30 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 30), align 1
  %a31 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 31), align 1
  %a32 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 32), align 1
  %a33 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 33), align 1
  %a34 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 34), align 1
  %a35 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 35), align 1
  %a36 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 36), align 1
  %a37 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 37), align 1
  %a38 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 38), align 1
  %a39 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 39), align 1
  %a40 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 40), align 1
  %a41 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 41), align 1
  %a42 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 42), align 1
  %a43 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 43), align 1
  %a44 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 44), align 1
  %a45 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 45), align 1
  %a46 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 46), align 1
  %a47 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 47), align 1
  %a48 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 48), align 1
  %a49 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 49), align 1
  %a50 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 50), align 1
  %a51 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 51), align 1
  %a52 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 52), align 1
  %a53 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 53), align 1
  %a54 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 54), align 1
  %a55 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 55), align 1
  %a56 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 56), align 1
  %a57 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 57), align 1
  %a58 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 58), align 1
  %a59 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 59), align 1
  %a60 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 60), align 1
  %a61 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 61), align 1
  %a62 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 62), align 1
  %a63 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @a8, i32 0, i64 63), align 1
  %b0 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 0), align 1
  %b1 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 1), align 1
  %b2 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 2), align 1
  %b3 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 3), align 1
  %b4 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 4), align 1
  %b5 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 5), align 1
  %b6 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 6), align 1
  %b7 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 7), align 1
  %b8 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 8), align 1
  %b9 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 9), align 1
  %b10 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 10), align 1
  %b11 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 11), align 1
  %b12 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 12), align 1
  %b13 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 13), align 1
  %b14 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 14), align 1
  %b15 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 15), align 1
  %b16 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 16), align 1
  %b17 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 17), align 1
  %b18 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 18), align 1
  %b19 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 19), align 1
  %b20 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 20), align 1
  %b21 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 21), align 1
  %b22 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 22), align 1
  %b23 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 23), align 1
  %b24 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 24), align 1
  %b25 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 25), align 1
  %b26 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 26), align 1
  %b27 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 27), align 1
  %b28 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 28), align 1
  %b29 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 29), align 1
  %b30 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 30), align 1
  %b31 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 31), align 1
  %b32 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 32), align 1
  %b33 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 33), align 1
  %b34 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 34), align 1
  %b35 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 35), align 1
  %b36 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 36), align 1
  %b37 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 37), align 1
  %b38 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 38), align 1
  %b39 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 39), align 1
  %b40 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 40), align 1
  %b41 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 41), align 1
  %b42 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 42), align 1
  %b43 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 43), align 1
  %b44 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 44), align 1
  %b45 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 45), align 1
  %b46 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 46), align 1
  %b47 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 47), align 1
  %b48 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 48), align 1
  %b49 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 49), align 1
  %b50 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 50), align 1
  %b51 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 51), align 1
  %b52 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 52), align 1
  %b53 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 53), align 1
  %b54 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 54), align 1
  %b55 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 55), align 1
  %b56 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 56), align 1
  %b57 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 57), align 1
  %b58 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 58), align 1
  %b59 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 59), align 1
  %b60 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 60), align 1
  %b61 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 61), align 1
  %b62 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 62), align 1
  %b63 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @b8, i32 0, i64 63), align 1
  %c0 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a0, i8 %b0)
  %c1 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a1, i8 %b1)
  %c2 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a2, i8 %b2)
  %c3 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a3, i8 %b3)
  %c4 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a4, i8 %b4)
  %c5 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a5, i8 %b5)
  %c6 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a6, i8 %b6)
  %c7 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a7, i8 %b7)
  %c8 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a8, i8 %b8)
  %c9 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a9, i8 %b9)
  %c10 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a10, i8 %b10)
  %c11 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a11, i8 %b11)
  %c12 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a12, i8 %b12)
  %c13 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a13, i8 %b13)
  %c14 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a14, i8 %b14)
  %c15 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a15, i8 %b15)
  %c16 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a16, i8 %b16)
  %c17 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a17, i8 %b17)
  %c18 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a18, i8 %b18)
  %c19 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a19, i8 %b19)
  %c20 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a20, i8 %b20)
  %c21 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a21, i8 %b21)
  %c22 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a22, i8 %b22)
  %c23 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a23, i8 %b23)
  %c24 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a24, i8 %b24)
  %c25 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a25, i8 %b25)
  %c26 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a26, i8 %b26)
  %c27 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a27, i8 %b27)
  %c28 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a28, i8 %b28)
  %c29 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a29, i8 %b29)
  %c30 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a30, i8 %b30)
  %c31 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a31, i8 %b31)
  %c32 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a32, i8 %b32)
  %c33 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a33, i8 %b33)
  %c34 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a34, i8 %b34)
  %c35 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a35, i8 %b35)
  %c36 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a36, i8 %b36)
  %c37 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a37, i8 %b37)
  %c38 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a38, i8 %b38)
  %c39 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a39, i8 %b39)
  %c40 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a40, i8 %b40)
  %c41 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a41, i8 %b41)
  %c42 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a42, i8 %b42)
  %c43 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a43, i8 %b43)
  %c44 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a44, i8 %b44)
  %c45 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a45, i8 %b45)
  %c46 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a46, i8 %b46)
  %c47 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a47, i8 %b47)
  %c48 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a48, i8 %b48)
  %c49 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a49, i8 %b49)
  %c50 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a50, i8 %b50)
  %c51 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a51, i8 %b51)
  %c52 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a52, i8 %b52)
  %c53 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a53, i8 %b53)
  %c54 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a54, i8 %b54)
  %c55 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a55, i8 %b55)
  %c56 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a56, i8 %b56)
  %c57 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a57, i8 %b57)
  %c58 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a58, i8 %b58)
  %c59 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a59, i8 %b59)
  %c60 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a60, i8 %b60)
  %c61 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a61, i8 %b61)
  %c62 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a62, i8 %b62)
  %c63 = call { i8, i1 } @llvm.uadd.with.overflow.i8(i8 %a63, i8 %b63)
  %r0 = extractvalue { i8, i1 } %c0, 0
  %r1 = extractvalue { i8, i1 } %c1, 0
  %r2 = extractvalue { i8, i1 } %c2, 0
  %r3 = extractvalue { i8, i1 } %c3, 0
  %r4 = extractvalue { i8, i1 } %c4, 0
  %r5 = extractvalue { i8, i1 } %c5, 0
  %r6 = extractvalue { i8, i1 } %c6, 0
  %r7 = extractvalue { i8, i1 } %c7, 0
  %r8 = extractvalue { i8, i1 } %c8, 0
  %r9 = extractvalue { i8, i1 } %c9, 0
  %r10 = extractvalue { i8, i1 } %c10, 0
  %r11 = extractvalue { i8, i1 } %c11, 0
  %r12 = extractvalue { i8, i1 } %c12, 0
  %r13 = extractvalue { i8, i1 } %c13, 0
  %r14 = extractvalue { i8, i1 } %c14, 0
  %r15 = extractvalue { i8, i1 } %c15, 0
  %r16 = extractvalue { i8, i1 } %c16, 0
  %r17 = extractvalue { i8, i1 } %c17, 0
  %r18 = extractvalue { i8, i1 } %c18, 0
  %r19 = extractvalue { i8, i1 } %c19, 0
  %r20 = extractvalue { i8, i1 } %c20, 0
  %r21 = extractvalue { i8, i1 } %c21, 0
  %r22 = extractvalue { i8, i1 } %c22, 0
  %r23 = extractvalue { i8, i1 } %c23, 0
  %r24 = extractvalue { i8, i1 } %c24, 0
  %r25 = extractvalue { i8, i1 } %c25, 0
  %r26 = extractvalue { i8, i1 } %c26, 0
  %r27 = extractvalue { i8, i1 } %c27, 0
  %r28 = extractvalue { i8, i1 } %c28, 0
  %r29 = extractvalue { i8, i1 } %c29, 0
  %r30 = extractvalue { i8, i1 } %c30, 0
  %r31 = extractvalue { i8, i1 } %c31, 0
  %r32 = extractvalue { i8, i1 } %c32, 0
  %r33 = extractvalue { i8, i1 } %c33, 0
  %r34 = extractvalue { i8, i1 } %c34, 0
  %r35 = extractvalue { i8, i1 } %c35, 0
  %r36 = extractvalue { i8, i1 } %c36, 0
  %r37 = extractvalue { i8, i1 } %c37, 0
  %r38 = extractvalue { i8, i1 } %c38, 0
  %r39 = extractvalue { i8, i1 } %c39, 0
  %r40 = extractvalue { i8, i1 } %c40, 0
  %r41 = extractvalue { i8, i1 } %c41, 0
  %r42 = extractvalue { i8, i1 } %c42, 0
  %r43 = extractvalue { i8, i1 } %c43, 0
  %r44 = extractvalue { i8, i1 } %c44, 0
  %r45 = extractvalue { i8, i1 } %c45, 0
  %r46 = extractvalue { i8, i1 } %c46, 0
  %r47 = extractvalue { i8, i1 } %c47, 0
  %r48 = extractvalue { i8, i1 } %c48, 0
  %r49 = extractvalue { i8, i1 } %c49, 0
  %r50 = extractvalue { i8, i1 } %c50, 0
  %r51 = extractvalue { i8, i1 } %c51, 0
  %r52 = extractvalue { i8, i1 } %c52, 0
  %r53 = extractvalue { i8, i1 } %c53, 0
  %r54 = extractvalue { i8, i1 } %c54, 0
  %r55 = extractvalue { i8, i1 } %c55, 0
  %r56 = extractvalue { i8, i1 } %c56, 0
  %r57 = extractvalue { i8, i1 } %c57, 0
  %r58 = extractvalue { i8, i1 } %c58, 0
  %r59 = extractvalue { i8, i1 } %c59, 0
  %r60 = extractvalue { i8, i1 } %c60, 0
  %r61 = extractvalue { i8, i1 } %c61, 0
  %r62 = extractvalue { i8, i1 } %c62, 0
  %r63 = extractvalue { i8, i1 } %c63, 0
  store i8 %r0, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 0), align 1
  store i8 %r1, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 1), align 1
  store i8 %r2, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 2), align 1
  store i8 %r3, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 3), align 1
  store i8 %r4, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 4), align 1
  store i8 %r5, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 5), align 1
  store i8 %r6, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 6), align 1
  store i8 %r7, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 7), align 1
  store i8 %r8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 8), align 1
  store i8 %r9, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 9), align 1
  store i8 %r10, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 10), align 1
  store i8 %r11, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 11), align 1
  store i8 %r12, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 12), align 1
  store i8 %r13, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 13), align 1
  store i8 %r14, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 14), align 1
  store i8 %r15, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 15), align 1
  store i8 %r16, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 16), align 1
  store i8 %r17, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 17), align 1
  store i8 %r18, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 18), align 1
  store i8 %r19, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 19), align 1
  store i8 %r20, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 20), align 1
  store i8 %r21, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 21), align 1
  store i8 %r22, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 22), align 1
  store i8 %r23, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 23), align 1
  store i8 %r24, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 24), align 1
  store i8 %r25, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 25), align 1
  store i8 %r26, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 26), align 1
  store i8 %r27, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 27), align 1
  store i8 %r28, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 28), align 1
  store i8 %r29, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 29), align 1
  store i8 %r30, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 30), align 1
  store i8 %r31, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 31), align 1
  store i8 %r32, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 32), align 1
  store i8 %r33, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 33), align 1
  store i8 %r34, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 34), align 1
  store i8 %r35, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 35), align 1
  store i8 %r36, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 36), align 1
  store i8 %r37, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 37), align 1
  store i8 %r38, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 38), align 1
  store i8 %r39, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 39), align 1
  store i8 %r40, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 40), align 1
  store i8 %r41, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 41), align 1
  store i8 %r42, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 42), align 1
  store i8 %r43, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 43), align 1
  store i8 %r44, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 44), align 1
  store i8 %r45, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 45), align 1
  store i8 %r46, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 46), align 1
  store i8 %r47, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 47), align 1
  store i8 %r48, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 48), align 1
  store i8 %r49, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 49), align 1
  store i8 %r50, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 50), align 1
  store i8 %r51, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 51), align 1
  store i8 %r52, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 52), align 1
  store i8 %r53, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 53), align 1
  store i8 %r54, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 54), align 1
  store i8 %r55, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 55), align 1
  store i8 %r56, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 56), align 1
  store i8 %r57, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 57), align 1
  store i8 %r58, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 58), align 1
  store i8 %r59, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 59), align 1
  store i8 %r60, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 60), align 1
  store i8 %r61, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 61), align 1
  store i8 %r62, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 62), align 1
  store i8 %r63, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @c8, i32 0, i64 63), align 1
  ret void
}

attributes #0 = { nounwind readnone speculatable "target-cpu"="core-avx2" }
attributes #1 = { "target-cpu"="core-avx2" }
