; ModuleID = '<stdin>'
source_filename = "<stdin>"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown"

@src64 = common global [8 x double] zeroinitializer, align 64
@src32 = common global [16 x float] zeroinitializer, align 64
@dst64 = common global [8 x double] zeroinitializer, align 64
@dst32 = common global [16 x float] zeroinitializer, align 64

; Function Attrs: nounwind readnone speculatable
declare float @llvm.sqrt.f32(float) #0

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sqrt.f64(double) #0

; Function Attrs: nounwind
define void @sqrt_2f64() #1 {
  %1 = load <2 x double>, <2 x double>* bitcast ([8 x double]* @src64 to <2 x double>*), align 8
  %2 = call <2 x double> @llvm.sqrt.v2f64(<2 x double> %1)
  store <2 x double> %2, <2 x double>* bitcast ([8 x double]* @dst64 to <2 x double>*), align 8
  ret void
}

; Function Attrs: nounwind
define void @sqrt_4f64() #1 {
  %1 = load <4 x double>, <4 x double>* bitcast ([8 x double]* @src64 to <4 x double>*), align 8
  %2 = call <4 x double> @llvm.sqrt.v4f64(<4 x double> %1)
  store <4 x double> %2, <4 x double>* bitcast ([8 x double]* @dst64 to <4 x double>*), align 8
  ret void
}

; Function Attrs: nounwind
define void @sqrt_8f64() #1 {
  %1 = load <4 x double>, <4 x double>* bitcast ([8 x double]* @src64 to <4 x double>*), align 4
  %2 = load <4 x double>, <4 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @src64, i32 0, i64 4) to <4 x double>*), align 4
  %3 = call <4 x double> @llvm.sqrt.v4f64(<4 x double> %1)
  %4 = call <4 x double> @llvm.sqrt.v4f64(<4 x double> %2)
  store <4 x double> %3, <4 x double>* bitcast ([8 x double]* @dst64 to <4 x double>*), align 4
  store <4 x double> %4, <4 x double>* bitcast (double* getelementptr inbounds ([8 x double], [8 x double]* @dst64, i32 0, i64 4) to <4 x double>*), align 4
  ret void
}

; Function Attrs: nounwind
define void @sqrt_4f32() #1 {
  %1 = load <4 x float>, <4 x float>* bitcast ([16 x float]* @src32 to <4 x float>*), align 4
  %2 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %1)
  store <4 x float> %2, <4 x float>* bitcast ([16 x float]* @dst32 to <4 x float>*), align 4
  ret void
}

; Function Attrs: nounwind
define void @sqrt_8f32() #1 {
  %1 = load <8 x float>, <8 x float>* bitcast ([16 x float]* @src32 to <8 x float>*), align 4
  %2 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %1)
  store <8 x float> %2, <8 x float>* bitcast ([16 x float]* @dst32 to <8 x float>*), align 4
  ret void
}

; Function Attrs: nounwind
define void @sqrt_16f32() #1 {
  %1 = load <8 x float>, <8 x float>* bitcast ([16 x float]* @src32 to <8 x float>*), align 4
  %2 = load <8 x float>, <8 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @src32, i32 0, i64 8) to <8 x float>*), align 4
  %3 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %1)
  %4 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %2)
  store <8 x float> %3, <8 x float>* bitcast ([16 x float]* @dst32 to <8 x float>*), align 4
  store <8 x float> %4, <8 x float>* bitcast (float* getelementptr inbounds ([16 x float], [16 x float]* @dst32, i32 0, i64 8) to <8 x float>*), align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.sqrt.v2f64(<2 x double>) #2

; Function Attrs: nounwind readnone speculatable
declare <4 x double> @llvm.sqrt.v4f64(<4 x double>) #2

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>) #2

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.sqrt.v8f32(<8 x float>) #2

attributes #0 = { nounwind readnone speculatable "target-features"="+avx2" }
attributes #1 = { nounwind "target-features"="+avx2" }
attributes #2 = { nounwind readnone speculatable }
