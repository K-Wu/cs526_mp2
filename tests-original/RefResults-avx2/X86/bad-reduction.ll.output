; ModuleID = '<stdin>'
source_filename = "<stdin>"
target triple = "x86_64-unknown-unknown"

%v8i8 = type { i8, i8, i8, i8, i8, i8, i8, i8 }

define i64 @load_bswap(%v8i8* %p) #0 {
  %g0 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 0
  %g1 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 1
  %g2 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 2
  %g3 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 3
  %g4 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 4
  %g5 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 5
  %g6 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 6
  %g7 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 7
  %1 = bitcast i8* %g0 to <4 x i8>*
  %2 = load <4 x i8>, <4 x i8>* %1, align 1
  %t4 = load i8, i8* %g4
  %t5 = load i8, i8* %g5
  %t6 = load i8, i8* %g6
  %t7 = load i8, i8* %g7
  %3 = zext <4 x i8> %2 to <4 x i64>
  %z4 = zext i8 %t4 to i64
  %z5 = zext i8 %t5 to i64
  %z6 = zext i8 %t6 to i64
  %z7 = zext i8 %t7 to i64
  %4 = shl nuw <4 x i64> %3, <i64 56, i64 48, i64 40, i64 32>
  %sh4 = shl nuw nsw i64 %z4, 24
  %sh5 = shl nuw nsw i64 %z5, 16
  %sh6 = shl nuw nsw i64 %z6, 8
  %or01 = or i64 undef, undef
  %or012 = or i64 %or01, undef
  %or0123 = or i64 %or012, undef
  %or01234 = or i64 %or0123, %sh4
  %or012345 = or i64 %or01234, %sh5
  %or0123456 = or i64 %or012345, %sh6
  %rdx.shuf = shufflevector <4 x i64> %4, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = or <4 x i64> %4, %rdx.shuf
  %rdx.shuf1 = shufflevector <4 x i64> %bin.rdx, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = or <4 x i64> %bin.rdx, %rdx.shuf1
  %5 = extractelement <4 x i64> %bin.rdx2, i32 0
  %6 = or i64 %5, %sh4
  %7 = or i64 %6, %sh5
  %8 = or i64 %7, %sh6
  %op.extra = or i64 %8, %z7
  %or01234567 = or i64 %or0123456, %z7
  ret i64 %op.extra
}

define i64 @load_bswap_nop_shift(%v8i8* %p) #0 {
  %g0 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 0
  %g1 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 1
  %g2 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 2
  %g3 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 3
  %g4 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 4
  %g5 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 5
  %g6 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 6
  %g7 = getelementptr inbounds %v8i8, %v8i8* %p, i64 0, i32 7
  %1 = bitcast i8* %g0 to <8 x i8>*
  %2 = load <8 x i8>, <8 x i8>* %1, align 1
  %3 = zext <8 x i8> %2 to <8 x i64>
  %4 = shl nuw <8 x i64> %3, <i64 56, i64 48, i64 40, i64 32, i64 24, i64 16, i64 8, i64 0>
  %or01 = or i64 undef, undef
  %or012 = or i64 %or01, undef
  %or0123 = or i64 %or012, undef
  %or01234 = or i64 %or0123, undef
  %or012345 = or i64 %or01234, undef
  %or0123456 = or i64 %or012345, undef
  %rdx.shuf = shufflevector <8 x i64> %4, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx = or <8 x i64> %4, %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x i64> %bin.rdx, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = or <8 x i64> %bin.rdx, %rdx.shuf1
  %rdx.shuf3 = shufflevector <8 x i64> %bin.rdx2, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx4 = or <8 x i64> %bin.rdx2, %rdx.shuf3
  %5 = extractelement <8 x i64> %bin.rdx4, i32 0
  %or01234567 = or i64 %or0123456, undef
  ret i64 %5
}

define i64 @load64le(i8* %arg) #0 {
  %g1 = getelementptr inbounds i8, i8* %arg, i64 1
  %g2 = getelementptr inbounds i8, i8* %arg, i64 2
  %g3 = getelementptr inbounds i8, i8* %arg, i64 3
  %g4 = getelementptr inbounds i8, i8* %arg, i64 4
  %g5 = getelementptr inbounds i8, i8* %arg, i64 5
  %g6 = getelementptr inbounds i8, i8* %arg, i64 6
  %g7 = getelementptr inbounds i8, i8* %arg, i64 7
  %ld0 = load i8, i8* %arg, align 1
  %1 = bitcast i8* %g1 to <4 x i8>*
  %2 = load <4 x i8>, <4 x i8>* %1, align 1
  %ld5 = load i8, i8* %g5, align 1
  %ld6 = load i8, i8* %g6, align 1
  %ld7 = load i8, i8* %g7, align 1
  %z0 = zext i8 %ld0 to i64
  %3 = zext <4 x i8> %2 to <4 x i64>
  %z5 = zext i8 %ld5 to i64
  %z6 = zext i8 %ld6 to i64
  %z7 = zext i8 %ld7 to i64
  %4 = shl nuw nsw <4 x i64> %3, <i64 8, i64 16, i64 24, i64 32>
  %s5 = shl nuw nsw i64 %z5, 40
  %s6 = shl nuw nsw i64 %z6, 48
  %s7 = shl nuw i64 %z7, 56
  %o1 = or i64 undef, %z0
  %o2 = or i64 %o1, undef
  %o3 = or i64 %o2, undef
  %o4 = or i64 %o3, undef
  %o5 = or i64 %o4, %s5
  %o6 = or i64 %o5, %s6
  %rdx.shuf = shufflevector <4 x i64> %4, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = or <4 x i64> %4, %rdx.shuf
  %rdx.shuf1 = shufflevector <4 x i64> %bin.rdx, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = or <4 x i64> %bin.rdx, %rdx.shuf1
  %5 = extractelement <4 x i64> %bin.rdx2, i32 0
  %6 = or i64 %5, %s5
  %7 = or i64 %6, %s6
  %8 = or i64 %7, %s7
  %op.extra = or i64 %8, %z0
  %o7 = or i64 %o6, %s7
  ret i64 %op.extra
}

define i64 @load64le_nop_shift(i8* %arg) #0 {
  %g1 = getelementptr inbounds i8, i8* %arg, i64 1
  %g2 = getelementptr inbounds i8, i8* %arg, i64 2
  %g3 = getelementptr inbounds i8, i8* %arg, i64 3
  %g4 = getelementptr inbounds i8, i8* %arg, i64 4
  %g5 = getelementptr inbounds i8, i8* %arg, i64 5
  %g6 = getelementptr inbounds i8, i8* %arg, i64 6
  %g7 = getelementptr inbounds i8, i8* %arg, i64 7
  %1 = bitcast i8* %arg to <8 x i8>*
  %2 = load <8 x i8>, <8 x i8>* %1, align 1
  %3 = zext <8 x i8> %2 to <8 x i64>
  %4 = shl nuw <8 x i64> %3, <i64 0, i64 8, i64 16, i64 24, i64 32, i64 40, i64 48, i64 56>
  %o1 = or i64 undef, undef
  %o2 = or i64 %o1, undef
  %o3 = or i64 %o2, undef
  %o4 = or i64 %o3, undef
  %o5 = or i64 %o4, undef
  %o6 = or i64 %o5, undef
  %rdx.shuf = shufflevector <8 x i64> %4, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx = or <8 x i64> %4, %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x i64> %bin.rdx, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx2 = or <8 x i64> %bin.rdx, %rdx.shuf1
  %rdx.shuf3 = shufflevector <8 x i64> %bin.rdx2, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx4 = or <8 x i64> %bin.rdx2, %rdx.shuf3
  %5 = extractelement <8 x i64> %bin.rdx4, i32 0
  %o7 = or i64 %o6, undef
  ret i64 %5
}

attributes #0 = { "target-features"="+avx2" }
