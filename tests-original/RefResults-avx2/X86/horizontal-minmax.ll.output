; ModuleID = '<stdin>'
source_filename = "<stdin>"
target triple = "x86_64-unknown-linux"

@arr = local_unnamed_addr global [32 x i32] zeroinitializer, align 16
@arr1 = local_unnamed_addr global [32 x float] zeroinitializer, align 16
@arrp = local_unnamed_addr global [32 x i32*] zeroinitializer, align 16
@var = global i32 0, align 8

define i32 @maxi8(i32) #0 {
  %2 = load <8 x i32>, <8 x i32>* bitcast ([32 x i32]* @arr to <8 x i32>*), align 16
  %3 = icmp sgt i32 undef, undef
  %4 = select i1 %3, i32 undef, i32 undef
  %5 = icmp sgt i32 %4, undef
  %6 = select i1 %5, i32 %4, i32 undef
  %7 = icmp sgt i32 %6, undef
  %8 = select i1 %7, i32 %6, i32 undef
  %9 = icmp sgt i32 %8, undef
  %10 = select i1 %9, i32 %8, i32 undef
  %11 = icmp sgt i32 %10, undef
  %12 = select i1 %11, i32 %10, i32 undef
  %13 = icmp sgt i32 %12, undef
  %14 = select i1 %13, i32 %12, i32 undef
  %15 = icmp sgt i32 %14, undef
  %rdx.shuf = shufflevector <8 x i32> %2, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp = icmp sgt <8 x i32> %2, %rdx.shuf
  %rdx.minmax.select = select <8 x i1> %rdx.minmax.cmp, <8 x i32> %2, <8 x i32> %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x i32> %rdx.minmax.select, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp2 = icmp sgt <8 x i32> %rdx.minmax.select, %rdx.shuf1
  %rdx.minmax.select3 = select <8 x i1> %rdx.minmax.cmp2, <8 x i32> %rdx.minmax.select, <8 x i32> %rdx.shuf1
  %rdx.shuf4 = shufflevector <8 x i32> %rdx.minmax.select3, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp5 = icmp sgt <8 x i32> %rdx.minmax.select3, %rdx.shuf4
  %rdx.minmax.select6 = select <8 x i1> %rdx.minmax.cmp5, <8 x i32> %rdx.minmax.select3, <8 x i32> %rdx.shuf4
  %16 = extractelement <8 x i32> %rdx.minmax.select6, i32 0
  %17 = select i1 %15, i32 %14, i32 undef
  ret i32 %16
}

define i32 @maxi16(i32) #0 {
  %2 = load <16 x i32>, <16 x i32>* bitcast ([32 x i32]* @arr to <16 x i32>*), align 16
  %3 = icmp sgt i32 undef, undef
  %4 = select i1 %3, i32 undef, i32 undef
  %5 = icmp sgt i32 %4, undef
  %6 = select i1 %5, i32 %4, i32 undef
  %7 = icmp sgt i32 %6, undef
  %8 = select i1 %7, i32 %6, i32 undef
  %9 = icmp sgt i32 %8, undef
  %10 = select i1 %9, i32 %8, i32 undef
  %11 = icmp sgt i32 %10, undef
  %12 = select i1 %11, i32 %10, i32 undef
  %13 = icmp sgt i32 %12, undef
  %14 = select i1 %13, i32 %12, i32 undef
  %15 = icmp sgt i32 %14, undef
  %16 = select i1 %15, i32 %14, i32 undef
  %17 = icmp sgt i32 %16, undef
  %18 = select i1 %17, i32 %16, i32 undef
  %19 = icmp sgt i32 %18, undef
  %20 = select i1 %19, i32 %18, i32 undef
  %21 = icmp sgt i32 %20, undef
  %22 = select i1 %21, i32 %20, i32 undef
  %23 = icmp sgt i32 %22, undef
  %24 = select i1 %23, i32 %22, i32 undef
  %25 = icmp sgt i32 %24, undef
  %26 = select i1 %25, i32 %24, i32 undef
  %27 = icmp sgt i32 %26, undef
  %28 = select i1 %27, i32 %26, i32 undef
  %29 = icmp sgt i32 %28, undef
  %30 = select i1 %29, i32 %28, i32 undef
  %31 = icmp sgt i32 %30, undef
  %rdx.shuf = shufflevector <16 x i32> %2, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp = icmp sgt <16 x i32> %2, %rdx.shuf
  %rdx.minmax.select = select <16 x i1> %rdx.minmax.cmp, <16 x i32> %2, <16 x i32> %rdx.shuf
  %rdx.shuf1 = shufflevector <16 x i32> %rdx.minmax.select, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp2 = icmp sgt <16 x i32> %rdx.minmax.select, %rdx.shuf1
  %rdx.minmax.select3 = select <16 x i1> %rdx.minmax.cmp2, <16 x i32> %rdx.minmax.select, <16 x i32> %rdx.shuf1
  %rdx.shuf4 = shufflevector <16 x i32> %rdx.minmax.select3, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp5 = icmp sgt <16 x i32> %rdx.minmax.select3, %rdx.shuf4
  %rdx.minmax.select6 = select <16 x i1> %rdx.minmax.cmp5, <16 x i32> %rdx.minmax.select3, <16 x i32> %rdx.shuf4
  %rdx.shuf7 = shufflevector <16 x i32> %rdx.minmax.select6, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp8 = icmp sgt <16 x i32> %rdx.minmax.select6, %rdx.shuf7
  %rdx.minmax.select9 = select <16 x i1> %rdx.minmax.cmp8, <16 x i32> %rdx.minmax.select6, <16 x i32> %rdx.shuf7
  %32 = extractelement <16 x i32> %rdx.minmax.select9, i32 0
  %33 = select i1 %31, i32 %30, i32 undef
  ret i32 %32
}

define i32 @maxi32(i32) #0 {
  %2 = load <32 x i32>, <32 x i32>* bitcast ([32 x i32]* @arr to <32 x i32>*), align 16
  %3 = icmp sgt i32 undef, undef
  %4 = select i1 %3, i32 undef, i32 undef
  %5 = icmp sgt i32 %4, undef
  %6 = select i1 %5, i32 %4, i32 undef
  %7 = icmp sgt i32 %6, undef
  %8 = select i1 %7, i32 %6, i32 undef
  %9 = icmp sgt i32 %8, undef
  %10 = select i1 %9, i32 %8, i32 undef
  %11 = icmp sgt i32 %10, undef
  %12 = select i1 %11, i32 %10, i32 undef
  %13 = icmp sgt i32 %12, undef
  %14 = select i1 %13, i32 %12, i32 undef
  %15 = icmp sgt i32 %14, undef
  %16 = select i1 %15, i32 %14, i32 undef
  %17 = icmp sgt i32 %16, undef
  %18 = select i1 %17, i32 %16, i32 undef
  %19 = icmp sgt i32 %18, undef
  %20 = select i1 %19, i32 %18, i32 undef
  %21 = icmp sgt i32 %20, undef
  %22 = select i1 %21, i32 %20, i32 undef
  %23 = icmp sgt i32 %22, undef
  %24 = select i1 %23, i32 %22, i32 undef
  %25 = icmp sgt i32 %24, undef
  %26 = select i1 %25, i32 %24, i32 undef
  %27 = icmp sgt i32 %26, undef
  %28 = select i1 %27, i32 %26, i32 undef
  %29 = icmp sgt i32 %28, undef
  %30 = select i1 %29, i32 %28, i32 undef
  %31 = icmp sgt i32 %30, undef
  %32 = select i1 %31, i32 %30, i32 undef
  %33 = icmp sgt i32 %32, undef
  %34 = select i1 %33, i32 %32, i32 undef
  %35 = icmp sgt i32 %34, undef
  %36 = select i1 %35, i32 %34, i32 undef
  %37 = icmp sgt i32 %36, undef
  %38 = select i1 %37, i32 %36, i32 undef
  %39 = icmp sgt i32 %38, undef
  %40 = select i1 %39, i32 %38, i32 undef
  %41 = icmp sgt i32 %40, undef
  %42 = select i1 %41, i32 %40, i32 undef
  %43 = icmp sgt i32 %42, undef
  %44 = select i1 %43, i32 %42, i32 undef
  %45 = icmp sgt i32 %44, undef
  %46 = select i1 %45, i32 %44, i32 undef
  %47 = icmp sgt i32 %46, undef
  %48 = select i1 %47, i32 %46, i32 undef
  %49 = icmp sgt i32 %48, undef
  %50 = select i1 %49, i32 %48, i32 undef
  %51 = icmp sgt i32 %50, undef
  %52 = select i1 %51, i32 %50, i32 undef
  %53 = icmp sgt i32 %52, undef
  %54 = select i1 %53, i32 %52, i32 undef
  %55 = icmp sgt i32 %54, undef
  %56 = select i1 %55, i32 %54, i32 undef
  %57 = icmp sgt i32 %56, undef
  %58 = select i1 %57, i32 %56, i32 undef
  %59 = icmp sgt i32 %58, undef
  %60 = select i1 %59, i32 %58, i32 undef
  %61 = icmp sgt i32 %60, undef
  %62 = select i1 %61, i32 %60, i32 undef
  %63 = icmp sgt i32 %62, undef
  %rdx.shuf = shufflevector <32 x i32> %2, <32 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp = icmp sgt <32 x i32> %2, %rdx.shuf
  %rdx.minmax.select = select <32 x i1> %rdx.minmax.cmp, <32 x i32> %2, <32 x i32> %rdx.shuf
  %rdx.shuf1 = shufflevector <32 x i32> %rdx.minmax.select, <32 x i32> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp2 = icmp sgt <32 x i32> %rdx.minmax.select, %rdx.shuf1
  %rdx.minmax.select3 = select <32 x i1> %rdx.minmax.cmp2, <32 x i32> %rdx.minmax.select, <32 x i32> %rdx.shuf1
  %rdx.shuf4 = shufflevector <32 x i32> %rdx.minmax.select3, <32 x i32> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp5 = icmp sgt <32 x i32> %rdx.minmax.select3, %rdx.shuf4
  %rdx.minmax.select6 = select <32 x i1> %rdx.minmax.cmp5, <32 x i32> %rdx.minmax.select3, <32 x i32> %rdx.shuf4
  %rdx.shuf7 = shufflevector <32 x i32> %rdx.minmax.select6, <32 x i32> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp8 = icmp sgt <32 x i32> %rdx.minmax.select6, %rdx.shuf7
  %rdx.minmax.select9 = select <32 x i1> %rdx.minmax.cmp8, <32 x i32> %rdx.minmax.select6, <32 x i32> %rdx.shuf7
  %rdx.shuf10 = shufflevector <32 x i32> %rdx.minmax.select9, <32 x i32> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp11 = icmp sgt <32 x i32> %rdx.minmax.select9, %rdx.shuf10
  %rdx.minmax.select12 = select <32 x i1> %rdx.minmax.cmp11, <32 x i32> %rdx.minmax.select9, <32 x i32> %rdx.shuf10
  %64 = extractelement <32 x i32> %rdx.minmax.select12, i32 0
  %65 = select i1 %63, i32 %62, i32 undef
  ret i32 %64
}

define float @maxf8(float) #0 {
  %2 = load <8 x float>, <8 x float>* bitcast ([32 x float]* @arr1 to <8 x float>*), align 16
  %3 = fcmp fast ogt float undef, undef
  %4 = select i1 %3, float undef, float undef
  %5 = fcmp fast ogt float %4, undef
  %6 = select i1 %5, float %4, float undef
  %7 = fcmp fast ogt float %6, undef
  %8 = select i1 %7, float %6, float undef
  %9 = fcmp fast ogt float %8, undef
  %10 = select i1 %9, float %8, float undef
  %11 = fcmp fast ogt float %10, undef
  %12 = select i1 %11, float %10, float undef
  %13 = fcmp fast ogt float %12, undef
  %14 = select i1 %13, float %12, float undef
  %15 = fcmp fast ogt float %14, undef
  %rdx.shuf = shufflevector <8 x float> %2, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp = fcmp fast ogt <8 x float> %2, %rdx.shuf
  %rdx.minmax.select = select <8 x i1> %rdx.minmax.cmp, <8 x float> %2, <8 x float> %rdx.shuf
  %rdx.shuf1 = shufflevector <8 x float> %rdx.minmax.select, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp2 = fcmp fast ogt <8 x float> %rdx.minmax.select, %rdx.shuf1
  %rdx.minmax.select3 = select <8 x i1> %rdx.minmax.cmp2, <8 x float> %rdx.minmax.select, <8 x float> %rdx.shuf1
  %rdx.shuf4 = shufflevector <8 x float> %rdx.minmax.select3, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp5 = fcmp fast ogt <8 x float> %rdx.minmax.select3, %rdx.shuf4
  %rdx.minmax.select6 = select <8 x i1> %rdx.minmax.cmp5, <8 x float> %rdx.minmax.select3, <8 x float> %rdx.shuf4
  %16 = extractelement <8 x float> %rdx.minmax.select6, i32 0
  %17 = select i1 %15, float %14, float undef
  ret float %16
}

define float @maxf16(float) #0 {
  %2 = load <16 x float>, <16 x float>* bitcast ([32 x float]* @arr1 to <16 x float>*), align 16
  %3 = fcmp fast ogt float undef, undef
  %4 = select i1 %3, float undef, float undef
  %5 = fcmp fast ogt float %4, undef
  %6 = select i1 %5, float %4, float undef
  %7 = fcmp fast ogt float %6, undef
  %8 = select i1 %7, float %6, float undef
  %9 = fcmp fast ogt float %8, undef
  %10 = select i1 %9, float %8, float undef
  %11 = fcmp fast ogt float %10, undef
  %12 = select i1 %11, float %10, float undef
  %13 = fcmp fast ogt float %12, undef
  %14 = select i1 %13, float %12, float undef
  %15 = fcmp fast ogt float %14, undef
  %16 = select i1 %15, float %14, float undef
  %17 = fcmp fast ogt float %16, undef
  %18 = select i1 %17, float %16, float undef
  %19 = fcmp fast ogt float %18, undef
  %20 = select i1 %19, float %18, float undef
  %21 = fcmp fast ogt float %20, undef
  %22 = select i1 %21, float %20, float undef
  %23 = fcmp fast ogt float %22, undef
  %24 = select i1 %23, float %22, float undef
  %25 = fcmp fast ogt float %24, undef
  %26 = select i1 %25, float %24, float undef
  %27 = fcmp fast ogt float %26, undef
  %28 = select i1 %27, float %26, float undef
  %29 = fcmp fast ogt float %28, undef
  %30 = select i1 %29, float %28, float undef
  %31 = fcmp fast ogt float %30, undef
  %rdx.shuf = shufflevector <16 x float> %2, <16 x float> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp = fcmp fast ogt <16 x float> %2, %rdx.shuf
  %rdx.minmax.select = select <16 x i1> %rdx.minmax.cmp, <16 x float> %2, <16 x float> %rdx.shuf
  %rdx.shuf1 = shufflevector <16 x float> %rdx.minmax.select, <16 x float> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp2 = fcmp fast ogt <16 x float> %rdx.minmax.select, %rdx.shuf1
  %rdx.minmax.select3 = select <16 x i1> %rdx.minmax.cmp2, <16 x float> %rdx.minmax.select, <16 x float> %rdx.shuf1
  %rdx.shuf4 = shufflevector <16 x float> %rdx.minmax.select3, <16 x float> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp5 = fcmp fast ogt <16 x float> %rdx.minmax.select3, %rdx.shuf4
  %rdx.minmax.select6 = select <16 x i1> %rdx.minmax.cmp5, <16 x float> %rdx.minmax.select3, <16 x float> %rdx.shuf4
  %rdx.shuf7 = shufflevector <16 x float> %rdx.minmax.select6, <16 x float> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp8 = fcmp fast ogt <16 x float> %rdx.minmax.select6, %rdx.shuf7
  %rdx.minmax.select9 = select <16 x i1> %rdx.minmax.cmp8, <16 x float> %rdx.minmax.select6, <16 x float> %rdx.shuf7
  %32 = extractelement <16 x float> %rdx.minmax.select9, i32 0
  %33 = select i1 %31, float %30, float undef
  ret float %32
}

define float @maxf32(float) #0 {
  %2 = load <32 x float>, <32 x float>* bitcast ([32 x float]* @arr1 to <32 x float>*), align 16
  %3 = fcmp fast ogt float undef, undef
  %4 = select i1 %3, float undef, float undef
  %5 = fcmp fast ogt float %4, undef
  %6 = select i1 %5, float %4, float undef
  %7 = fcmp fast ogt float %6, undef
  %8 = select i1 %7, float %6, float undef
  %9 = fcmp fast ogt float %8, undef
  %10 = select i1 %9, float %8, float undef
  %11 = fcmp fast ogt float %10, undef
  %12 = select i1 %11, float %10, float undef
  %13 = fcmp fast ogt float %12, undef
  %14 = select i1 %13, float %12, float undef
  %15 = fcmp fast ogt float %14, undef
  %16 = select i1 %15, float %14, float undef
  %17 = fcmp fast ogt float %16, undef
  %18 = select i1 %17, float %16, float undef
  %19 = fcmp fast ogt float %18, undef
  %20 = select i1 %19, float %18, float undef
  %21 = fcmp fast ogt float %20, undef
  %22 = select i1 %21, float %20, float undef
  %23 = fcmp fast ogt float %22, undef
  %24 = select i1 %23, float %22, float undef
  %25 = fcmp fast ogt float %24, undef
  %26 = select i1 %25, float %24, float undef
  %27 = fcmp fast ogt float %26, undef
  %28 = select i1 %27, float %26, float undef
  %29 = fcmp fast ogt float %28, undef
  %30 = select i1 %29, float %28, float undef
  %31 = fcmp fast ogt float %30, undef
  %32 = select i1 %31, float %30, float undef
  %33 = fcmp fast ogt float %32, undef
  %34 = select i1 %33, float %32, float undef
  %35 = fcmp fast ogt float %34, undef
  %36 = select i1 %35, float %34, float undef
  %37 = fcmp fast ogt float %36, undef
  %38 = select i1 %37, float %36, float undef
  %39 = fcmp fast ogt float %38, undef
  %40 = select i1 %39, float %38, float undef
  %41 = fcmp fast ogt float %40, undef
  %42 = select i1 %41, float %40, float undef
  %43 = fcmp fast ogt float %42, undef
  %44 = select i1 %43, float %42, float undef
  %45 = fcmp fast ogt float %44, undef
  %46 = select i1 %45, float %44, float undef
  %47 = fcmp fast ogt float %46, undef
  %48 = select i1 %47, float %46, float undef
  %49 = fcmp fast ogt float %48, undef
  %50 = select i1 %49, float %48, float undef
  %51 = fcmp fast ogt float %50, undef
  %52 = select i1 %51, float %50, float undef
  %53 = fcmp fast ogt float %52, undef
  %54 = select i1 %53, float %52, float undef
  %55 = fcmp fast ogt float %54, undef
  %56 = select i1 %55, float %54, float undef
  %57 = fcmp fast ogt float %56, undef
  %58 = select i1 %57, float %56, float undef
  %59 = fcmp fast ogt float %58, undef
  %60 = select i1 %59, float %58, float undef
  %61 = fcmp fast ogt float %60, undef
  %62 = select i1 %61, float %60, float undef
  %63 = fcmp fast ogt float %62, undef
  %rdx.shuf = shufflevector <32 x float> %2, <32 x float> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp = fcmp fast ogt <32 x float> %2, %rdx.shuf
  %rdx.minmax.select = select <32 x i1> %rdx.minmax.cmp, <32 x float> %2, <32 x float> %rdx.shuf
  %rdx.shuf1 = shufflevector <32 x float> %rdx.minmax.select, <32 x float> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp2 = fcmp fast ogt <32 x float> %rdx.minmax.select, %rdx.shuf1
  %rdx.minmax.select3 = select <32 x i1> %rdx.minmax.cmp2, <32 x float> %rdx.minmax.select, <32 x float> %rdx.shuf1
  %rdx.shuf4 = shufflevector <32 x float> %rdx.minmax.select3, <32 x float> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp5 = fcmp fast ogt <32 x float> %rdx.minmax.select3, %rdx.shuf4
  %rdx.minmax.select6 = select <32 x i1> %rdx.minmax.cmp5, <32 x float> %rdx.minmax.select3, <32 x float> %rdx.shuf4
  %rdx.shuf7 = shufflevector <32 x float> %rdx.minmax.select6, <32 x float> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp8 = fcmp fast ogt <32 x float> %rdx.minmax.select6, %rdx.shuf7
  %rdx.minmax.select9 = select <32 x i1> %rdx.minmax.cmp8, <32 x float> %rdx.minmax.select6, <32 x float> %rdx.shuf7
  %rdx.shuf10 = shufflevector <32 x float> %rdx.minmax.select9, <32 x float> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp11 = fcmp fast ogt <32 x float> %rdx.minmax.select9, %rdx.shuf10
  %rdx.minmax.select12 = select <32 x i1> %rdx.minmax.cmp11, <32 x float> %rdx.minmax.select9, <32 x float> %rdx.shuf10
  %64 = extractelement <32 x float> %rdx.minmax.select12, i32 0
  %65 = select i1 %63, float %62, float undef
  ret float %64
}

define i32 @maxi8_mutiple_uses(i32) #0 {
  %2 = load i32, i32* getelementptr inbounds ([32 x i32], [32 x i32]* @arr, i64 0, i64 0), align 16
  %3 = load i32, i32* getelementptr inbounds ([32 x i32], [32 x i32]* @arr, i64 0, i64 1), align 4
  %4 = icmp sgt i32 %2, %3
  %5 = select i1 %4, i32 %2, i32 %3
  %6 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([32 x i32], [32 x i32]* @arr, i64 0, i64 2) to <4 x i32>*), align 8
  %7 = icmp sgt i32 %5, undef
  %8 = select i1 %7, i32 %5, i32 undef
  %9 = icmp sgt i32 %8, undef
  %10 = select i1 %9, i32 %8, i32 undef
  %11 = icmp sgt i32 %10, undef
  %12 = select i1 %11, i32 %10, i32 undef
  %13 = icmp sgt i32 %12, undef
  %14 = select i1 %13, i32 %12, i32 undef
  %15 = load i32, i32* getelementptr inbounds ([32 x i32], [32 x i32]* @arr, i64 0, i64 6), align 8
  %16 = icmp sgt i32 %14, %15
  %rdx.shuf = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp = icmp sgt <4 x i32> %6, %rdx.shuf
  %rdx.minmax.select = select <4 x i1> %rdx.minmax.cmp, <4 x i32> %6, <4 x i32> %rdx.shuf
  %rdx.shuf1 = shufflevector <4 x i32> %rdx.minmax.select, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp2 = icmp sgt <4 x i32> %rdx.minmax.select, %rdx.shuf1
  %rdx.minmax.select3 = select <4 x i1> %rdx.minmax.cmp2, <4 x i32> %rdx.minmax.select, <4 x i32> %rdx.shuf1
  %17 = extractelement <4 x i32> %rdx.minmax.select3, i32 0
  %18 = icmp sgt i32 %17, %15
  %19 = select i1 %18, i32 %17, i32 %15
  %20 = icmp sgt i32 %19, %5
  %op.extra = select i1 %20, i32 %19, i32 %5
  %21 = select i1 %16, i32 %14, i32 %15
  %22 = load i32, i32* getelementptr inbounds ([32 x i32], [32 x i32]* @arr, i64 0, i64 7), align 4
  %23 = icmp sgt i32 %op.extra, %22
  %24 = select i1 %23, i32 %op.extra, i32 %22
  %25 = select i1 %4, i32 3, i32 4
  store i32 %25, i32* @var, align 8
  ret i32 %24
}

define i32 @maxi8_wrong_parent(i32) #0 {
  %2 = load i32, i32* getelementptr inbounds ([32 x i32], [32 x i32]* @arr, i64 0, i64 0), align 16
  %3 = load i32, i32* getelementptr inbounds ([32 x i32], [32 x i32]* @arr, i64 0, i64 1), align 4
  %4 = icmp sgt i32 %2, %3
  br label %pp

pp:                                               ; preds = %1
  %5 = select i1 %4, i32 %2, i32 %3
  %6 = load <4 x i32>, <4 x i32>* bitcast (i32* getelementptr inbounds ([32 x i32], [32 x i32]* @arr, i64 0, i64 2) to <4 x i32>*), align 8
  %7 = icmp sgt i32 %5, undef
  %8 = select i1 %7, i32 %5, i32 undef
  %9 = icmp sgt i32 %8, undef
  %10 = select i1 %9, i32 %8, i32 undef
  %11 = icmp sgt i32 %10, undef
  %12 = select i1 %11, i32 %10, i32 undef
  %13 = icmp sgt i32 %12, undef
  %14 = select i1 %13, i32 %12, i32 undef
  %15 = load i32, i32* getelementptr inbounds ([32 x i32], [32 x i32]* @arr, i64 0, i64 6), align 8
  %16 = icmp sgt i32 %14, %15
  %17 = select i1 %16, i32 %14, i32 %15
  %18 = load i32, i32* getelementptr inbounds ([32 x i32], [32 x i32]* @arr, i64 0, i64 7), align 4
  %19 = icmp sgt i32 %17, %18
  %rdx.shuf = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp = icmp sgt <4 x i32> %6, %rdx.shuf
  %rdx.minmax.select = select <4 x i1> %rdx.minmax.cmp, <4 x i32> %6, <4 x i32> %rdx.shuf
  %rdx.shuf1 = shufflevector <4 x i32> %rdx.minmax.select, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp2 = icmp sgt <4 x i32> %rdx.minmax.select, %rdx.shuf1
  %rdx.minmax.select3 = select <4 x i1> %rdx.minmax.cmp2, <4 x i32> %rdx.minmax.select, <4 x i32> %rdx.shuf1
  %20 = extractelement <4 x i32> %rdx.minmax.select3, i32 0
  %21 = icmp sgt i32 %20, %15
  %22 = select i1 %21, i32 %20, i32 %15
  %23 = icmp sgt i32 %22, %18
  %24 = select i1 %23, i32 %22, i32 %18
  %25 = icmp sgt i32 %24, %5
  %op.extra = select i1 %25, i32 %24, i32 %5
  %26 = select i1 %19, i32 %17, i32 %18
  ret i32 %op.extra
}

define i32* @maxp8(i32) #0 {
  %2 = load i32*, i32** getelementptr inbounds ([32 x i32*], [32 x i32*]* @arrp, i64 0, i64 0), align 16
  %3 = load i32*, i32** getelementptr inbounds ([32 x i32*], [32 x i32*]* @arrp, i64 0, i64 1), align 4
  %4 = icmp ugt i32* %2, %3
  %5 = select i1 %4, i32* %2, i32* %3
  %6 = load i32*, i32** getelementptr inbounds ([32 x i32*], [32 x i32*]* @arrp, i64 0, i64 2), align 8
  %7 = icmp ugt i32* %5, %6
  %8 = select i1 %7, i32* %5, i32* %6
  %9 = load i32*, i32** getelementptr inbounds ([32 x i32*], [32 x i32*]* @arrp, i64 0, i64 3), align 4
  %10 = icmp ugt i32* %8, %9
  %11 = select i1 %10, i32* %8, i32* %9
  %12 = load i32*, i32** getelementptr inbounds ([32 x i32*], [32 x i32*]* @arrp, i64 0, i64 4), align 16
  %13 = icmp ugt i32* %11, %12
  %14 = select i1 %13, i32* %11, i32* %12
  %15 = load i32*, i32** getelementptr inbounds ([32 x i32*], [32 x i32*]* @arrp, i64 0, i64 5), align 4
  %16 = icmp ugt i32* %14, %15
  %17 = select i1 %16, i32* %14, i32* %15
  %18 = load i32*, i32** getelementptr inbounds ([32 x i32*], [32 x i32*]* @arrp, i64 0, i64 6), align 8
  %19 = icmp ugt i32* %17, %18
  %20 = select i1 %19, i32* %17, i32* %18
  %21 = load i32*, i32** getelementptr inbounds ([32 x i32*], [32 x i32*]* @arrp, i64 0, i64 7), align 4
  %22 = icmp ugt i32* %20, %21
  %23 = select i1 %22, i32* %20, i32* %21
  ret i32* %23
}

attributes #0 = { "target-cpu"="core-avx2" }
